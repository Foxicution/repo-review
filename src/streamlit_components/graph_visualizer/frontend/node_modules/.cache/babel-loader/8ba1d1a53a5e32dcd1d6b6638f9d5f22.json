{"ast":null,"code":"import _asyncToGenerator from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../../util/buffer';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n/** @ignore */\nexport function toDOMStream(source, options) {\n  if (isAsyncIterable(source)) {\n    return asyncIterableAsReadableDOMStream(source, options);\n  }\n  if (isIterable(source)) {\n    return iterableAsReadableDOMStream(source, options);\n  }\n  /* istanbul ignore next */\n  throw new Error(\"toDOMStream() must be called with an Iterable or AsyncIterable\");\n}\n/** @ignore */\nfunction iterableAsReadableDOMStream(source, options) {\n  var it = null;\n  var bm = options && options.type === 'bytes' || false;\n  var hwm = options && options.highWaterMark || Math.pow(2, 24);\n  return new ReadableStream(_objectSpread(_objectSpread({}, options), {}, {\n    start: function start(controller) {\n      next(controller, it || (it = source[Symbol.iterator]()));\n    },\n    pull: function pull(controller) {\n      it ? next(controller, it) : controller.close();\n    },\n    cancel: function cancel() {\n      (it && it.return && it.return() || true) && (it = null);\n    }\n  }), _objectSpread({\n    highWaterMark: bm ? hwm : undefined\n  }, options));\n  function next(controller, it) {\n    var buf;\n    var r = null;\n    var size = controller.desiredSize || null;\n    while (!(r = it.next(bm ? size : null)).done) {\n      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n        size != null && bm && (size = size - buf.byteLength + 1);\n        r.value = buf;\n      }\n      controller.enqueue(r.value);\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n    controller.close();\n  }\n}\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream(source, options) {\n  var it = null;\n  var bm = options && options.type === 'bytes' || false;\n  var hwm = options && options.highWaterMark || Math.pow(2, 24);\n  return new ReadableStream(_objectSpread(_objectSpread({}, options), {}, {\n    start: function start(controller) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return next(controller, it || (it = source[Symbol.asyncIterator]()));\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    pull: function pull(controller) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!it) {\n                  _context2.next = 5;\n                  break;\n                }\n                _context2.next = 3;\n                return next(controller, it);\n              case 3:\n                _context2.next = 6;\n                break;\n              case 5:\n                controller.close();\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    cancel: function cancel() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t1 = it;\n                if (!_context3.t1) {\n                  _context3.next = 8;\n                  break;\n                }\n                _context3.t2 = it.return;\n                if (!_context3.t2) {\n                  _context3.next = 7;\n                  break;\n                }\n                _context3.next = 6;\n                return it.return();\n              case 6:\n                _context3.t2 = _context3.sent;\n              case 7:\n                _context3.t1 = _context3.t2;\n              case 8:\n                _context3.t0 = _context3.t1;\n                if (_context3.t0) {\n                  _context3.next = 11;\n                  break;\n                }\n                _context3.t0 = true;\n              case 11:\n                _context3.t3 = _context3.t0;\n                if (!_context3.t3) {\n                  _context3.next = 14;\n                  break;\n                }\n                it = null;\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  }), _objectSpread({\n    highWaterMark: bm ? hwm : undefined\n  }, options));\n  function next(_x, _x2) {\n    return _next.apply(this, arguments);\n  }\n  function _next() {\n    _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(controller, it) {\n      var buf, r, size;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              r = null;\n              size = controller.desiredSize || null;\n            case 2:\n              _context4.next = 4;\n              return it.next(bm ? size : null);\n            case 4:\n              if ((r = _context4.sent).done) {\n                _context4.next = 11;\n                break;\n              }\n              if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = buf;\n              }\n              controller.enqueue(r.value);\n              if (!(size != null && --size <= 0)) {\n                _context4.next = 9;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 9:\n              _context4.next = 2;\n              break;\n            case 11:\n              controller.close();\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _next.apply(this, arguments);\n  }\n}","map":{"version":3,"mappings":"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","names":["toUint8Array","isIterable","isAsyncIterable","toDOMStream","source","options","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","Error","it","bm","type","hwm","highWaterMark","ReadableStream","start","controller","next","Symbol","iterator","pull","close","cancel","return","undefined","buf","r","size","desiredSize","done","ArrayBuffer","isView","value","byteLength","enqueue","asyncIterator"],"sources":["io/whatwg/iterable.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}