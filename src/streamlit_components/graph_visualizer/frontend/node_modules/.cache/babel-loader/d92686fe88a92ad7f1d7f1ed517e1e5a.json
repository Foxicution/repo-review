{"ast":null,"code":"import _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\n/** @ignore */\nexport var VectorLoader = /*#__PURE__*/function (_Visitor) {\n  _inherits(VectorLoader, _Visitor);\n  var _super = _createSuper(VectorLoader);\n  function VectorLoader(bytes, nodes, buffers, dictionaries) {\n    var _this;\n    _classCallCheck(this, VectorLoader);\n    _this = _super.call(this);\n    _this.nodesIndex = -1;\n    _this.buffersIndex = -1;\n    _this.bytes = bytes;\n    _this.nodes = nodes;\n    _this.buffers = buffers;\n    _this.dictionaries = dictionaries;\n    return _this;\n  }\n  _createClass(VectorLoader, [{\n    key: \"visit\",\n    value: function visit(node) {\n      return _get(_getPrototypeOf(VectorLoader.prototype), \"visit\", this).call(this, node instanceof Field ? node.type : node);\n    }\n  }, {\n    key: \"visitNull\",\n    value: function visitNull(type) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref.length;\n      return Data.Null(type, 0, length);\n    }\n  }, {\n    key: \"visitBool\",\n    value: function visitBool(type) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref2.length,\n        nullCount = _ref2.nullCount;\n      return Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitInt\",\n    value: function visitInt(type) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref3.length,\n        nullCount = _ref3.nullCount;\n      return Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitFloat\",\n    value: function visitFloat(type) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref4.length,\n        nullCount = _ref4.nullCount;\n      return Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitUtf8\",\n    value: function visitUtf8(type) {\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref5.length,\n        nullCount = _ref5.nullCount;\n      return Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(type) {\n      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref6.length,\n        nullCount = _ref6.nullCount;\n      return Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n    }\n  }, {\n    key: \"visitFixedSizeBinary\",\n    value: function visitFixedSizeBinary(type) {\n      var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref7.length,\n        nullCount = _ref7.nullCount;\n      return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitDate\",\n    value: function visitDate(type) {\n      var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref8.length,\n        nullCount = _ref8.nullCount;\n      return Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitTimestamp\",\n    value: function visitTimestamp(type) {\n      var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref9.length,\n        nullCount = _ref9.nullCount;\n      return Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitTime\",\n    value: function visitTime(type) {\n      var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref10.length,\n        nullCount = _ref10.nullCount;\n      return Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitDecimal\",\n    value: function visitDecimal(type) {\n      var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref11.length,\n        nullCount = _ref11.nullCount;\n      return Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitList\",\n    value: function visitList(type) {\n      var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref12.length,\n        nullCount = _ref12.nullCount;\n      return Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n    }\n  }, {\n    key: \"visitStruct\",\n    value: function visitStruct(type) {\n      var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref13.length,\n        nullCount = _ref13.nullCount;\n      return Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));\n    }\n  }, {\n    key: \"visitUnion\",\n    value: function visitUnion(type) {\n      return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);\n    }\n  }, {\n    key: \"visitDenseUnion\",\n    value: function visitDenseUnion(type) {\n      var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref14.length,\n        nullCount = _ref14.nullCount;\n      return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children));\n    }\n  }, {\n    key: \"visitSparseUnion\",\n    value: function visitSparseUnion(type) {\n      var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref15.length,\n        nullCount = _ref15.nullCount;\n      return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));\n    }\n  }, {\n    key: \"visitDictionary\",\n    value: function visitDictionary(type) {\n      var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref16.length,\n        nullCount = _ref16.nullCount;\n      return Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));\n    }\n  }, {\n    key: \"visitInterval\",\n    value: function visitInterval(type) {\n      var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref17.length,\n        nullCount = _ref17.nullCount;\n      return Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitFixedSizeList\",\n    value: function visitFixedSizeList(type) {\n      var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref18.length,\n        nullCount = _ref18.nullCount;\n      return Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));\n    }\n  }, {\n    key: \"visitMap\",\n    value: function visitMap(type) {\n      var _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref19.length,\n        nullCount = _ref19.nullCount;\n      return Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n    }\n  }, {\n    key: \"nextFieldNode\",\n    value: function nextFieldNode() {\n      return this.nodes[++this.nodesIndex];\n    }\n  }, {\n    key: \"nextBufferRange\",\n    value: function nextBufferRange() {\n      return this.buffers[++this.buffersIndex];\n    }\n  }, {\n    key: \"readNullBitmap\",\n    value: function readNullBitmap(type, nullCount) {\n      var buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n      return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n  }, {\n    key: \"readOffsets\",\n    value: function readOffsets(type, buffer) {\n      return this.readData(type, buffer);\n    }\n  }, {\n    key: \"readTypeIds\",\n    value: function readTypeIds(type, buffer) {\n      return this.readData(type, buffer);\n    }\n  }, {\n    key: \"readData\",\n    value: function readData(_type) {\n      var _ref20 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n        length = _ref20.length,\n        offset = _ref20.offset;\n      return this.bytes.subarray(offset, offset + length);\n    }\n  }, {\n    key: \"readDictionary\",\n    value: function readDictionary(type) {\n      return this.dictionaries.get(type.id);\n    }\n  }]);\n  return VectorLoader;\n}(Visitor);\n/** @ignore */\nexport var JSONVectorLoader = /*#__PURE__*/function (_VectorLoader) {\n  _inherits(JSONVectorLoader, _VectorLoader);\n  var _super2 = _createSuper(JSONVectorLoader);\n  function JSONVectorLoader(sources, nodes, buffers, dictionaries) {\n    var _this2;\n    _classCallCheck(this, JSONVectorLoader);\n    _this2 = _super2.call(this, new Uint8Array(0), nodes, buffers, dictionaries);\n    _this2.sources = sources;\n    return _this2;\n  }\n  _createClass(JSONVectorLoader, [{\n    key: \"readNullBitmap\",\n    value: function readNullBitmap(_type, nullCount) {\n      var _ref21 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange(),\n        offset = _ref21.offset;\n      return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n  }, {\n    key: \"readOffsets\",\n    value: function readOffsets(_type) {\n      var _ref22 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n        offset = _ref22.offset;\n      return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n  }, {\n    key: \"readTypeIds\",\n    value: function readTypeIds(type) {\n      var _ref23 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n        offset = _ref23.offset;\n      return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n  }, {\n    key: \"readData\",\n    value: function readData(type) {\n      var _ref24 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n        offset = _ref24.offset;\n      var sources = this.sources;\n      if (DataType.isTimestamp(type)) {\n        return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n      } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n        return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n      } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n        return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n      } else if (DataType.isDecimal(type)) {\n        return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n      } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n        return binaryDataFromJSON(sources[offset]);\n      } else if (DataType.isBool(type)) {\n        return packBools(sources[offset]);\n      } else if (DataType.isUtf8(type)) {\n        return encodeUtf8(sources[offset].join(''));\n      }\n      return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map(function (x) {\n        return +x;\n      })));\n    }\n  }]);\n  return JSONVectorLoader;\n}(VectorLoader);\n/** @ignore */\nfunction binaryDataFromJSON(values) {\n  // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n  // There are definitely more efficient ways to do this... but it gets the\n  // job done.\n  var joined = values.join('');\n  var data = new Uint8Array(joined.length / 2);\n  for (var i = 0; i < joined.length; i += 2) {\n    data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n  }\n  return data;\n}","map":{"version":3,"mappings":"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","names":["Data","Field","DataType","Visitor","packBools","encodeUtf8","Int64","Int128","UnionMode","DateUnit","toArrayBufferView","VectorLoader","bytes","nodes","buffers","dictionaries","node","type","nextFieldNode","length","Null","nullCount","Bool","readNullBitmap","readData","Int","Float","Utf8","readOffsets","Binary","FixedSizeBinary","Date","Timestamp","Time","Decimal","List","visit","children","Struct","visitMany","mode","Sparse","visitSparseUnion","visitDenseUnion","Union","readTypeIds","Dictionary","indices","readDictionary","Interval","FixedSizeList","Map","nodesIndex","buffersIndex","buffer","nextBufferRange","Uint8Array","_type","offset","subarray","get","id","JSONVectorLoader","sources","Int32Array","ArrayType","isTimestamp","convertArray","isInt","isTime","bitWidth","isDate","unit","MILLISECOND","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","join","map","x","values","joined","data","i","parseInt","substr"],"sources":["visitor/vectorloader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n"]},"metadata":{},"sourceType":"module"}