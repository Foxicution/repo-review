{"ast":null,"code":"import _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType } from '../type';\nTable.prototype.countBy = function (name) {\n  return new DataFrame(this.chunks).countBy(name);\n};\nTable.prototype.scan = function (next, bind) {\n  return new DataFrame(this.chunks).scan(next, bind);\n};\nTable.prototype.scanReverse = function (next, bind) {\n  return new DataFrame(this.chunks).scanReverse(next, bind);\n};\nTable.prototype.filter = function (predicate) {\n  return new DataFrame(this.chunks).filter(predicate);\n};\nexport var DataFrame = /*#__PURE__*/function (_Table) {\n  _inherits(DataFrame, _Table);\n  var _super = _createSuper(DataFrame);\n  function DataFrame() {\n    _classCallCheck(this, DataFrame);\n    return _super.apply(this, arguments);\n  }\n  _createClass(DataFrame, [{\n    key: \"filter\",\n    value: function filter(predicate) {\n      return new FilteredDataFrame(this.chunks, predicate);\n    }\n  }, {\n    key: \"scan\",\n    value: function scan(next, bind) {\n      var batches = this.chunks,\n        numBatches = batches.length;\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n        if (bind) {\n          bind(batch);\n        }\n        // yield all indices\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          next(index, batch);\n        }\n      }\n    }\n  }, {\n    key: \"scanReverse\",\n    value: function scanReverse(next, bind) {\n      var batches = this.chunks,\n        numBatches = batches.length;\n      for (var batchIndex = numBatches; --batchIndex >= 0;) {\n        // load batches\n        var batch = batches[batchIndex];\n        if (bind) {\n          bind(batch);\n        }\n        // yield all indices\n        for (var index = batch.length; --index >= 0;) {\n          next(index, batch);\n        }\n      }\n    }\n  }, {\n    key: \"countBy\",\n    value: function countBy(name) {\n      var batches = this.chunks,\n        numBatches = batches.length;\n      var count_by = typeof name === 'string' ? new Col(name) : name;\n      // Assume that all dictionary batches are deltas, which means that the\n      // last record batch has the most complete dictionary\n      count_by.bind(batches[numBatches - 1]);\n      var vector = count_by.vector;\n      if (!DataType.isDictionary(vector.type)) {\n        throw new Error('countBy currently only supports dictionary-encoded columns');\n      }\n      var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n      var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n      var counts = new CountsArrayType(vector.dictionary.length);\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n        // rebind the countBy Col\n        count_by.bind(batch);\n        var keys = count_by.vector.indices;\n        // yield all indices\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          var key = keys.get(index);\n          if (key !== null) {\n            counts[key]++;\n          }\n        }\n      }\n      return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n  }]);\n  return DataFrame;\n}(Table);\n/** @ignore */\nexport var CountByResult = /*#__PURE__*/function (_Table2) {\n  _inherits(CountByResult, _Table2);\n  var _super2 = _createSuper(CountByResult);\n  function CountByResult(values, counts) {\n    _classCallCheck(this, CountByResult);\n    var schema = new Schema([new Field('values', values.type), new Field('counts', counts.type)]);\n    return _super2.call(this, new RecordBatch(schema, counts.length, [values, counts]));\n  }\n  _createClass(CountByResult, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var values = this.getColumnAt(0);\n      var counts = this.getColumnAt(1);\n      var result = {};\n      for (var i = -1; ++i < this.length;) {\n        result[values.get(i)] = counts.get(i);\n      }\n      return result;\n    }\n  }]);\n  return CountByResult;\n}(Table);\n/** @ignore */\nexport var FilteredDataFrame = /*#__PURE__*/function (_DataFrame, _Symbol$iterator) {\n  _inherits(FilteredDataFrame, _DataFrame);\n  var _super3 = _createSuper(FilteredDataFrame);\n  function FilteredDataFrame(batches, predicate) {\n    var _this;\n    _classCallCheck(this, FilteredDataFrame);\n    _this = _super3.call(this, batches);\n    _this._predicate = predicate;\n    return _this;\n  }\n  _createClass(FilteredDataFrame, [{\n    key: \"scan\",\n    value: function scan(next, bind) {\n      // inlined version of this:\n      // this.parent.scan((idx, columns) => {\n      //     if (this.predicate(idx, columns)) next(idx, columns);\n      // });\n      var batches = this._chunks;\n      var numBatches = batches.length;\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n        var predicate = this._predicate.bind(batch);\n        var isBound = false;\n        // yield all indices\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          if (predicate(index, batch)) {\n            // bind batches lazily - if predicate doesn't match anything\n            // in the batch we don't need to call bind on the batch\n            if (bind && !isBound) {\n              bind(batch);\n              isBound = true;\n            }\n            next(index, batch);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"scanReverse\",\n    value: function scanReverse(next, bind) {\n      var batches = this._chunks;\n      var numBatches = batches.length;\n      for (var batchIndex = numBatches; --batchIndex >= 0;) {\n        // load batches\n        var batch = batches[batchIndex];\n        var predicate = this._predicate.bind(batch);\n        var isBound = false;\n        // yield all indices\n        for (var index = batch.length; --index >= 0;) {\n          if (predicate(index, batch)) {\n            // bind batches lazily - if predicate doesn't match anything\n            // in the batch we don't need to call bind on the batch\n            if (bind && !isBound) {\n              bind(batch);\n              isBound = true;\n            }\n            next(index, batch);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"count\",\n    value: function count() {\n      // inlined version of this:\n      // let sum = 0;\n      // this.parent.scan((idx, columns) => {\n      //     if (this.predicate(idx, columns)) ++sum;\n      // });\n      // return sum;\n      var sum = 0;\n      var batches = this._chunks;\n      var numBatches = batches.length;\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n        var predicate = this._predicate.bind(batch);\n        // yield all indices\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          if (predicate(index, batch)) {\n            ++sum;\n          }\n        }\n      }\n      return sum;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      var batches, numBatches, batchIndex, batch, predicate, index, numRows;\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // inlined version of this:\n              // this.parent.scan((idx, columns) => {\n              //     if (this.predicate(idx, columns)) next(idx, columns);\n              // });\n              batches = this._chunks;\n              numBatches = batches.length;\n              batchIndex = -1;\n            case 3:\n              if (!(++batchIndex < numBatches)) {\n                _context.next = 15;\n                break;\n              }\n              // load batches\n              batch = batches[batchIndex]; // TODO: bind batches lazily\n              // If predicate doesn't match anything in the batch we don't need\n              // to bind the callback\n              predicate = this._predicate.bind(batch); // yield all indices\n              index = -1, numRows = batch.length;\n            case 7:\n              if (!(++index < numRows)) {\n                _context.next = 13;\n                break;\n              }\n              if (!predicate(index, batch)) {\n                _context.next = 11;\n                break;\n              }\n              _context.next = 11;\n              return batch.get(index);\n            case 11:\n              _context.next = 7;\n              break;\n            case 13:\n              _context.next = 3;\n              break;\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"filter\",\n    value: function filter(predicate) {\n      return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));\n    }\n  }, {\n    key: \"countBy\",\n    value: function countBy(name) {\n      var batches = this._chunks,\n        numBatches = batches.length;\n      var count_by = typeof name === 'string' ? new Col(name) : name;\n      // Assume that all dictionary batches are deltas, which means that the\n      // last record batch has the most complete dictionary\n      count_by.bind(batches[numBatches - 1]);\n      var vector = count_by.vector;\n      if (!DataType.isDictionary(vector.type)) {\n        throw new Error('countBy currently only supports dictionary-encoded columns');\n      }\n      var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n      var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n      var counts = new CountsArrayType(vector.dictionary.length);\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n        var predicate = this._predicate.bind(batch);\n        // rebind the countBy Col\n        count_by.bind(batch);\n        var keys = count_by.vector.indices;\n        // yield all indices\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          var key = keys.get(index);\n          if (key !== null && predicate(index, batch)) {\n            counts[key]++;\n          }\n        }\n      }\n      return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n  }]);\n  return FilteredDataFrame;\n}(DataFrame, Symbol.iterator);","map":{"version":3,"mappings":"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","names":["Table","IntVector","Field","Schema","Col","RecordBatch","DataType","prototype","countBy","name","DataFrame","chunks","scan","next","bind","scanReverse","filter","predicate","FilteredDataFrame","batches","numBatches","length","batchIndex","batch","index","numRows","count_by","vector","isDictionary","type","Error","countByteLength","Math","ceil","log","CountsArrayType","Uint32Array","Uint16Array","Uint8Array","counts","dictionary","keys","indices","key","get","CountByResult","from","values","schema","getColumnAt","result","i","_predicate","_chunks","isBound","sum","and","Symbol","iterator"],"sources":["compute/dataframe.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}