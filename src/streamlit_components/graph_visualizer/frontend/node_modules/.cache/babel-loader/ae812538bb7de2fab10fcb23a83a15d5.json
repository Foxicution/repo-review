{"ast":null,"code":"var _jsxFileName = \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n    this.render = () => {\n      const graph = {\n        nodes: [{\n          id: 1,\n          label: \"Node 1\",\n          title: \"node 1 tootip text\"\n        }, {\n          id: 2,\n          label: \"Node 2\",\n          title: \"node 2 tootip text\"\n        }, {\n          id: 3,\n          label: \"Node 3\",\n          title: \"node 3 tootip text\"\n        }, {\n          id: 4,\n          label: \"Node 4\",\n          title: \"node 4 tootip text\"\n        }, {\n          id: 5,\n          label: \"Node 5\",\n          title: \"node 5 tootip text\"\n        }],\n        edges: [{\n          from: 1,\n          to: 2\n        }, {\n          from: 1,\n          to: 3\n        }, {\n          from: 2,\n          to: 4\n        }, {\n          from: 2,\n          to: 5\n        }]\n      };\n      const options = {\n        layout: {\n          hierarchical: true\n        },\n        edges: {\n          color: \"#000000\"\n        },\n        height: \"500px\"\n      };\n\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 7\n        }\n      }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        style: style,\n        onClick: this.onClicked,\n        disabled: this.props.disabled,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, \"Click Me!\"));\n    };\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","MyComponent","state","numClicks","isFocused","render","graph","nodes","id","label","title","edges","from","to","options","layout","hierarchical","color","height","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onClicked","disabled","_onFocus","_onBlur","setState","prevState","setComponentValue"],"sources":["/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport Graph from \"react-graph-vis\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    const graph = {\n      nodes: [\n        { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n        { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n        { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n        { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n        { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n      ],\n      edges: [\n        { from: 1, to: 2 },\n        { from: 1, to: 3 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 }\n      ]\n    };\n  \n    const options = {\n      layout: {\n        hierarchical: true\n      },\n      edges: {\n        color: \"#000000\"\n      },\n      height: \"500px\"\n    };\n  \n\n\n\n\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        Hello, {name}! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Click Me!\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)"],"mappings":"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"},"metadata":{},"sourceType":"module"}