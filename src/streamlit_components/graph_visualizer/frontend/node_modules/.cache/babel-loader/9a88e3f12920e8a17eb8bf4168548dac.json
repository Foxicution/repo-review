{"ast":null,"code":"var _jsxFileName = \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useState } from \"react\";\nimport Graph from 'react-graph-vis';\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\nclass StreamlitVisGraph extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.App = () => {\n      // const createNode = (x: any, y: any) => {\n      //   const color = randomColor();\n      //   setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      //     const id = counter + 1;\n      //     const from = Math.floor(Math.random() * (counter - 1)) + 1;\n      //     return {\n      //       graph: {\n      //         nodes: [\n      //           ...nodes,\n      //           { id, label: `Node ${id}`, color, x, y }\n      //         ],\n      //         edges: [\n      //           ...edges,\n      //           { from, to: id }\n      //         ]\n      //       },\n      //       counter: id,\n      //       ...rest\n      //     }\n      //   });\n      // }\n      const [state, setState] = useState({\n        counter: 5,\n        graph: {\n          nodes: [{\n            id: 1,\n            label: \"Node 1\",\n            color: \"#e04141\"\n          }, {\n            id: 2,\n            label: \"Node 2\",\n            color: \"#e09c41\"\n          }, {\n            id: 3,\n            label: \"Node 3\",\n            color: \"#e0df41\"\n          }, {\n            id: 4,\n            label: \"Node 4\",\n            color: \"#7be041\"\n          }, {\n            id: 5,\n            label: \"Node 5\",\n            color: \"#41e0c9\"\n          }],\n          edges: [{\n            from: 1,\n            to: 2\n          }, {\n            from: 1,\n            to: 3\n          }, {\n            from: 2,\n            to: 4\n          }, {\n            from: 2,\n            to: 5\n          }]\n        },\n        events: {\n          select: event => {\n            console.log(\"Selected nodes:\");\n            console.log(event.nodes[0]);\n          }\n          // doubleClick: ({ pointer: { canvas } }) => {\n          //   createNode(canvas.x, canvas.y);\n          // }\n        }\n      });\n\n      const {\n        graph,\n        events\n      } = state;\n      return /*#__PURE__*/React.createElement(Graph, {\n        graph: graph,\n        options: options,\n        events: events,\n        style: {\n          height: \"640px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      });\n    };\n  }\n}\nexport default withStreamlitConnection(StreamlitVisGraph);","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","useState","Graph","randomColor","red","Math","floor","random","toString","padStart","green","blue","options","layout","hierarchical","edges","color","StreamlitVisGraph","App","state","setState","counter","graph","nodes","id","label","from","to","events","select","event","console","log","height"],"sources":["/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useState } from \"react\"\nimport { v4 as uuidv4 } from 'uuid'\nimport Graph from 'react-graph-vis';\n\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\n\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\nclass StreamlitVisGraph extends StreamlitComponentBase {\n  \n  App = () => {\n    // const createNode = (x: any, y: any) => {\n    //   const color = randomColor();\n    //   setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n    //     const id = counter + 1;\n    //     const from = Math.floor(Math.random() * (counter - 1)) + 1;\n    //     return {\n    //       graph: {\n    //         nodes: [\n    //           ...nodes,\n    //           { id, label: `Node ${id}`, color, x, y }\n    //         ],\n    //         edges: [\n    //           ...edges,\n    //           { from, to: id }\n    //         ]\n    //       },\n    //       counter: id,\n    //       ...rest\n    //     }\n    //   });\n    // }\n    const [state, setState] = useState({\n      counter: 5,\n      graph: {\n        nodes: [\n          { id: 1, label: \"Node 1\", color: \"#e04141\" },\n          { id: 2, label: \"Node 2\", color: \"#e09c41\" },\n          { id: 3, label: \"Node 3\", color: \"#e0df41\" },\n          { id: 4, label: \"Node 4\", color: \"#7be041\" },\n          { id: 5, label: \"Node 5\", color: \"#41e0c9\" }\n        ],\n        edges: [\n          { from: 1, to: 2 },\n          { from: 1, to: 3 },\n          { from: 2, to: 4 },\n          { from: 2, to: 5 }\n        ]\n      },\n      events: {\n        select: (event: any) => {\n          console.log(\"Selected nodes:\");\n          console.log(event.nodes[0]);\n        },\n        // doubleClick: ({ pointer: { canvas } }) => {\n        //   createNode(canvas.x, canvas.y);\n        // }\n      }\n    })\n    const { graph, events } = state;\n    return (\n        <Graph graph={graph} options={options} events={events} style={{ height: \"640px\" }} />\n    );\n  \n  }\n}\n\nexport default withStreamlitConnection(StreamlitVisGraph)"],"mappings":"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"},"metadata":{},"sourceType":"module"}