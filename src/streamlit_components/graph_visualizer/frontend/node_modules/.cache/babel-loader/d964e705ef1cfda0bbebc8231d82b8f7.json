{"ast":null,"code":"import _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\n/** @ignore */\nexport var kUnknownNullCount = -1;\n/** @ignore */\nexport var Data = /*#__PURE__*/function () {\n  function Data(type, offset, length, nullCount, buffers, childData, dictionary) {\n    _classCallCheck(this, Data);\n    this.type = type;\n    this.dictionary = dictionary;\n    this.offset = Math.floor(Math.max(offset || 0, 0));\n    this.length = Math.floor(Math.max(length || 0, 0));\n    this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    this.childData = (childData || []).map(function (x) {\n      return x instanceof Data ? x : x.data;\n    });\n    var buffer;\n    if (buffers instanceof Data) {\n      this.stride = buffers.stride;\n      this.values = buffers.values;\n      this.typeIds = buffers.typeIds;\n      this.nullBitmap = buffers.nullBitmap;\n      this.valueOffsets = buffers.valueOffsets;\n    } else {\n      this.stride = strideForType(type);\n      if (buffers) {\n        (buffer = buffers[0]) && (this.valueOffsets = buffer);\n        (buffer = buffers[1]) && (this.values = buffer);\n        (buffer = buffers[2]) && (this.nullBitmap = buffer);\n        (buffer = buffers[3]) && (this.typeIds = buffer);\n      }\n    }\n  }\n  _createClass(Data, [{\n    key: \"typeId\",\n    get: function get() {\n      return this.type.typeId;\n    }\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this.type.ArrayType;\n    }\n  }, {\n    key: \"buffers\",\n    get: function get() {\n      return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      var byteLength = 0;\n      var valueOffsets = this.valueOffsets,\n        values = this.values,\n        nullBitmap = this.nullBitmap,\n        typeIds = this.typeIds;\n      valueOffsets && (byteLength += valueOffsets.byteLength);\n      values && (byteLength += values.byteLength);\n      nullBitmap && (byteLength += nullBitmap.byteLength);\n      typeIds && (byteLength += typeIds.byteLength);\n      return this.childData.reduce(function (byteLength, child) {\n        return byteLength + child.byteLength;\n      }, byteLength);\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      var nullCount = this._nullCount;\n      var nullBitmap;\n      if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n        this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n      }\n      return nullCount;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(type) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;\n      var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.length;\n      var nullCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._nullCount;\n      var buffers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this;\n      var childData = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.childData;\n      return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(offset, length) {\n      var stride = this.stride,\n        typeId = this.typeId,\n        childData = this.childData;\n      // +true === 1, +false === 0, so this means\n      // we keep nullCount at 0 if it's already 0,\n      // otherwise set to the invalidated flag -1\n      var nullCount = +(this._nullCount === 0) - 1;\n      var childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n      var buffers = this._sliceBuffers(offset, length, stride, typeId);\n      return this.clone(this.type, this.offset + offset, length, nullCount, buffers,\n      // Don't slice children if we have value offsets (the variable-width types)\n      !childData.length || this.valueOffsets ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n  }, {\n    key: \"_changeLengthAndBackfillNullBitmap\",\n    value: function _changeLengthAndBackfillNullBitmap(newLength) {\n      if (this.typeId === Type.Null) {\n        return this.clone(this.type, 0, newLength, 0);\n      }\n      var length = this.length,\n        nullCount = this.nullCount;\n      // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n      var bitmap = new Uint8Array((newLength + 63 & ~63) >> 3).fill(255, 0, length >> 3);\n      // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n      bitmap[length >> 3] = (1 << length - (length & ~7)) - 1;\n      // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n      if (nullCount > 0) {\n        bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n      }\n      var buffers = this.buffers;\n      buffers[BufferType.VALIDITY] = bitmap;\n      return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n  }, {\n    key: \"_sliceBuffers\",\n    value: function _sliceBuffers(offset, length, stride, typeId) {\n      var arr,\n        buffers = this.buffers;\n      // If typeIds exist, slice the typeIds buffer\n      (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n      // If offsets exist, only slice the offsets buffer\n      (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n      // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n      (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n      return buffers;\n    }\n  }, {\n    key: \"_sliceChildren\",\n    value: function _sliceChildren(childData, offset, length) {\n      return childData.map(function (child) {\n        return child.slice(offset, length);\n      });\n    }\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n  }], [{\n    key: \"new\",\n    value: function _new(type, offset, length, nullCount, buffers, childData, dictionary) {\n      if (buffers instanceof Data) {\n        buffers = buffers.buffers;\n      } else if (!buffers) {\n        buffers = [];\n      }\n      switch (type.typeId) {\n        case Type.Null:\n          return Data.Null(type, offset, length);\n        case Type.Int:\n          return Data.Int(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n        case Type.Dictionary:\n          return Data.Dictionary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary);\n        case Type.Float:\n          return Data.Float(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n        case Type.Bool:\n          return Data.Bool(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n        case Type.Decimal:\n          return Data.Decimal(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n        case Type.Date:\n          return Data.Date(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n        case Type.Time:\n          return Data.Time(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n        case Type.Timestamp:\n          return Data.Timestamp(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n        case Type.Interval:\n          return Data.Interval(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n        case Type.FixedSizeBinary:\n          return Data.FixedSizeBinary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n        case Type.Binary:\n          return Data.Binary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []);\n        case Type.Utf8:\n          return Data.Utf8(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []);\n        case Type.List:\n          return Data.List(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]);\n        case Type.FixedSizeList:\n          return Data.FixedSizeList(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]);\n        case Type.Struct:\n          return Data.Struct(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []);\n        case Type.Map:\n          return Data.Map(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]);\n        case Type.Union:\n          return Data.Union(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData);\n      }\n      throw new Error(\"Unrecognized typeId \".concat(type.typeId));\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Null\",\n    value: function Null(type, offset, length) {\n      return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Int\",\n    value: function Int(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Dictionary\",\n    value: function Dictionary(type, offset, length, nullCount, nullBitmap, data, dictionary) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Float\",\n    value: function Float(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Bool\",\n    value: function Bool(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Decimal\",\n    value: function Decimal(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Date\",\n    value: function Date(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Time\",\n    value: function Time(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Timestamp\",\n    value: function Timestamp(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Interval\",\n    value: function Interval(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"FixedSizeBinary\",\n    value: function FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {\n      return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Binary\",\n    value: function Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n      return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Utf8\",\n    value: function Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n      return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"List\",\n    value: function List(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {\n      return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"FixedSizeList\",\n    value: function FixedSizeList(type, offset, length, nullCount, nullBitmap, child) {\n      return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Struct\",\n    value: function Struct(type, offset, length, nullCount, nullBitmap, children) {\n      return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Map\",\n    value: function Map(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {\n      return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"Union\",\n    value: function Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildren, children) {\n      var buffers = [undefined, undefined, toUint8Array(nullBitmap), toArrayBufferView(type.ArrayType, typeIds)];\n      if (type.mode === UnionMode.Sparse) {\n        return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren);\n      }\n      buffers[BufferType.OFFSET] = toInt32Array(valueOffsetsOrChildren);\n      return new Data(type, offset, length, nullCount, buffers, children);\n    }\n  }]);\n  return Data;\n}();\nData.prototype.childData = Object.freeze([]);","map":{"version":3,"mappings":"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","names":["truncateBitmap","popcnt_bit_range","BufferType","UnionMode","Type","strideForType","toArrayBufferView","toUint8Array","toInt32Array","kUnknownNullCount","Data","type","offset","length","nullCount","buffers","childData","dictionary","Math","floor","max","_nullCount","map","x","data","buffer","stride","values","typeIds","nullBitmap","valueOffsets","typeId","ArrayType","byteLength","reduce","child","childStride","_sliceBuffers","clone","_sliceChildren","newLength","Null","bitmap","Uint8Array","fill","set","VALIDITY","arr","TYPE","subarray","OFFSET","DATA","slice","Int","Dictionary","Float","Bool","Decimal","Date","Time","Timestamp","Interval","FixedSizeBinary","Binary","Utf8","List","FixedSizeList","Struct","Map","Union","Error","undefined","indices","children","valueOffsetsOrChildren","mode","Sparse","prototype","Object","freeze"],"sources":["data.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n"]},"metadata":{},"sourceType":"module"}