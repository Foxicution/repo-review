{"ast":null,"code":"var _jsxFileName = \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport Graph from 'react-graph-vis';\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\nclass StreamlitVisGraph extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      graph: JSON.parse(this.props.args[\"data\"]),\n      events: {\n        select: event => {\n          console.log(\"Selected nodes:\");\n          console.log(event.nodes[0]);\n          Streamlit.setComponentValue(event.nodes[0]);\n        },\n        options: null\n        // doubleClick: ({ pointer: { canvas } }) => {\n        //   createNode(canvas.x, canvas.y);\n        // }\n      }\n    };\n    this.render = () => {\n      // const createNode = (x: any, y: any) => {\n      //   const color = randomColor();\n      //   setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      //     const id = counter + 1;\n      //     const from = Math.floor(Math.random() * (counter - 1)) + 1;\n      //     return {\n      //       graph: {\n      //         nodes: [\n      //           ...nodes,\n      //           { id, label: `Node ${id}`, color, x, y }\n      //         ],\n      //         edges: [\n      //           ...edges,\n      //           { from, to: id }\n      //         ]\n      //       },\n      //       counter: id,\n      //       ...rest\n      //     }\n      //   });\n      // }\n      return /*#__PURE__*/React.createElement(Graph, {\n        graph: this.state.graph,\n        options: options,\n        events: this.state.events,\n        style: {\n          height: \"640px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }\n      });\n    };\n  }\n}\nexport default withStreamlitConnection(StreamlitVisGraph);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","Graph","options","layout","hierarchical","edges","color","StreamlitVisGraph","state","graph","JSON","parse","props","args","events","select","event","console","log","nodes","setComponentValue","render","height"],"sources":["/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useState } from \"react\"\nimport { v4 as uuidv4 } from 'uuid'\nimport Graph from 'react-graph-vis';\nimport internal from \"stream\";\n\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\ninterface State{\n  graph: any,\n  events: any,\n  options: any\n}\n\nclass StreamlitVisGraph extends StreamlitComponentBase<State> {\n  public state = {\n    graph: JSON.parse(this.props.args[\"data\"]),\n    events: {\n      select: (event: any) => {\n        console.log(\"Selected nodes:\");\n        console.log(event.nodes[0]);\n        Streamlit.setComponentValue(event.nodes[0])\n      },\n      options: null\n      // doubleClick: ({ pointer: { canvas } }) => {\n      //   createNode(canvas.x, canvas.y);\n      // }\n    }\n  }\n  \n  render = () => {\n    // const createNode = (x: any, y: any) => {\n    //   const color = randomColor();\n    //   setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n    //     const id = counter + 1;\n    //     const from = Math.floor(Math.random() * (counter - 1)) + 1;\n    //     return {\n    //       graph: {\n    //         nodes: [\n    //           ...nodes,\n    //           { id, label: `Node ${id}`, color, x, y }\n    //         ],\n    //         edges: [\n    //           ...edges,\n    //           { from, to: id }\n    //         ]\n    //       },\n    //       counter: id,\n    //       ...rest\n    //     }\n    //   });\n    // }\n    return (\n        <Graph graph={this.state.graph} options={options} events={this.state.events} style={{ height: \"640px\" }} />\n    );\n  \n  }\n}\n\nexport default withStreamlitConnection(StreamlitVisGraph)"],"mappings":";AAAA,SACEA,SAAS,EACTC,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAA+B,OAAO;AAElD,OAAOC,KAAK,MAAM,iBAAiB;AAGnC,MAAMC,OAAO,GAAG;EACdC,MAAM,EAAE;IACNC,YAAY,EAAE;EAChB,CAAC;EACDC,KAAK,EAAE;IACLC,KAAK,EAAE;EACT;AACF,CAAC;AAQD,MAAMC,iBAAiB,SAAST,sBAAsB,CAAQ;EAAA;IAAA;IAAA,KACrDU,KAAK,GAAG;MACbC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,MAAM,CAAC,CAAC;MAC1CC,MAAM,EAAE;QACNC,MAAM,EAAGC,KAAU,IAAK;UACtBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9BD,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;UAC3BtB,SAAS,CAACuB,iBAAiB,CAACJ,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC;QACDjB,OAAO,EAAE;QACT;QACA;QACA;MACF;IACF,CAAC;IAAA,KAEDmB,MAAM,GAAG,MAAM;MACb;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,oBACI,oBAAC,KAAK;QAAC,KAAK,EAAE,IAAI,CAACb,KAAK,CAACC,KAAM;QAAC,OAAO,EAAEP,OAAQ;QAAC,MAAM,EAAE,IAAI,CAACM,KAAK,CAACM,MAAO;QAAC,KAAK,EAAE;UAAEQ,MAAM,EAAE;QAAQ,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG;IAGjH,CAAC;EAAA;AACH;AAEA,eAAevB,uBAAuB,CAACQ,iBAAiB,CAAC"},"metadata":{},"sourceType":"module"}