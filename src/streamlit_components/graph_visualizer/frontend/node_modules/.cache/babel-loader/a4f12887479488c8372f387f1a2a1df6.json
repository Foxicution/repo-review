{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(iterateBits);\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport function getBool(_data, _index, byte, bit) {\n  return (byte & 1 << bit) !== 0;\n}\n/** @ignore */\nexport function getBit(_data, _index, byte, bit) {\n  return (byte & 1 << bit) >> bit;\n}\n/** @ignore */\nexport function setBool(bytes, index, value) {\n  return value ? !!(bytes[index >> 3] |= 1 << index % 8) || true : !(bytes[index >> 3] &= ~(1 << index % 8)) && false;\n}\n/** @ignore */\nexport function truncateBitmap(offset, length, bitmap) {\n  var alignedSize = bitmap.byteLength + 7 & ~7;\n  if (offset > 0 || bitmap.byteLength < alignedSize) {\n    var bytes = new Uint8Array(alignedSize);\n    // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n    bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n    // Otherwise iterate each bit from the offset and return a new one\n    packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n    return bytes;\n  }\n  return bitmap;\n}\n/** @ignore */\nexport function packBools(values) {\n  var xs = [];\n  var i = 0,\n    bit = 0,\n    byte = 0;\n  var _iterator = _createForOfIteratorHelper(values),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      value && (byte |= 1 << bit);\n      if (++bit === 8) {\n        xs[i++] = byte;\n        byte = bit = 0;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (i === 0 || bit > 0) {\n    xs[i++] = byte;\n  }\n  var b = new Uint8Array(xs.length + 7 & ~7);\n  b.set(xs);\n  return b;\n}\n/** @ignore */\nexport function iterateBits(bytes, begin, length, context, get) {\n  var bit, byteIndex, index, remaining, byte;\n  return _regeneratorRuntime().wrap(function iterateBits$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          bit = begin % 8;\n          byteIndex = begin >> 3;\n          index = 0, remaining = length;\n        case 3:\n          if (!(remaining > 0)) {\n            _context.next = 11;\n            break;\n          }\n          byte = bytes[byteIndex++];\n        case 5:\n          _context.next = 7;\n          return get(context, index++, byte, bit);\n        case 7:\n          if (--remaining > 0 && ++bit < 8) {\n            _context.next = 5;\n            break;\n          }\n        case 8:\n          bit = 0;\n          _context.next = 3;\n          break;\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data, lhs, rhs) {\n  if (rhs - lhs <= 0) {\n    return 0;\n  }\n  // If the bit range is less than one byte, sum the 1 bits in the bit range\n  if (rhs - lhs < 8) {\n    var sum = 0;\n    var _iterator2 = _createForOfIteratorHelper(iterateBits(data, lhs, rhs - lhs, data, getBit)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var bit = _step2.value;\n        sum += bit;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return sum;\n  }\n  // Get the next lowest multiple of 8 from the right hand side\n  var rhsInside = rhs >> 3 << 3;\n  // Get the next highest multiple of 8 from the left hand side\n  var lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n  return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n    // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n    popcnt_bit_range(data, rhsInside, rhs) +\n    // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n    popcnt_array(data, lhsInside >> 3, rhsInside - lhsInside >> 3)\n  );\n}\n/** @ignore */\nexport function popcnt_array(arr, byteOffset, byteLength) {\n  var cnt = 0,\n    pos = byteOffset | 0;\n  var view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n  var len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n  while (len - pos >= 4) {\n    cnt += popcnt_uint32(view.getUint32(pos));\n    pos += 4;\n  }\n  while (len - pos >= 2) {\n    cnt += popcnt_uint32(view.getUint16(pos));\n    pos += 2;\n  }\n  while (len - pos >= 1) {\n    cnt += popcnt_uint32(view.getUint8(pos));\n    pos += 1;\n  }\n  return cnt;\n}\n/** @ignore */\nexport function popcnt_uint32(uint32) {\n  var i = uint32 | 0;\n  i = i - (i >>> 1 & 0x55555555);\n  i = (i & 0x33333333) + (i >>> 2 & 0x33333333);\n  return (i + (i >>> 4) & 0x0F0F0F0F) * 0x01010101 >>> 24;\n}","map":{"version":3,"mappings":"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","names":["iterateBits","getBool","_data","_index","byte","bit","getBit","setBool","bytes","index","value","truncateBitmap","offset","length","bitmap","alignedSize","byteLength","Uint8Array","set","subarray","packBools","values","xs","i","b","begin","context","get","byteIndex","remaining","popcnt_bit_range","data","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","byteOffset","cnt","pos","view","DataView","buffer","len","popcnt_uint32","getUint32","getUint16","getUint8","uint32"],"sources":["util/bit.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n"]},"metadata":{},"sourceType":"module"}