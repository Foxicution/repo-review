{"ast":null,"code":"import _toConsumableArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder } from '../builder';\nimport { Union } from '../type';\n/** @ignore */\nexport var UnionBuilder = /*#__PURE__*/function (_Builder) {\n  _inherits(UnionBuilder, _Builder);\n  var _super = _createSuper(UnionBuilder);\n  function UnionBuilder(options) {\n    var _this;\n    _classCallCheck(this, UnionBuilder);\n    _this = _super.call(this, options);\n    _this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n    if (typeof options['valueToChildTypeId'] === 'function') {\n      _this._valueToChildTypeId = options['valueToChildTypeId'];\n    }\n    return _this;\n  }\n  _createClass(UnionBuilder, [{\n    key: \"typeIdToChildIndex\",\n    get: function get() {\n      return this.type.typeIdToChildIndex;\n    }\n  }, {\n    key: \"append\",\n    value: function append(value, childTypeId) {\n      return this.set(this.length, value, childTypeId);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value, childTypeId) {\n      if (childTypeId === undefined) {\n        childTypeId = this._valueToChildTypeId(this, value, index);\n      }\n      if (this.setValid(index, this.isValid(value))) {\n        this.setValue(index, value, childTypeId);\n      }\n      return this;\n    }\n    // @ts-ignore\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value, childTypeId) {\n      this._typeIds.set(index, childTypeId);\n      _get(_getPrototypeOf(UnionBuilder.prototype), \"setValue\", this).call(this, index, value);\n    }\n    // @ts-ignore\n  }, {\n    key: \"addChild\",\n    value: function addChild(child) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\".concat(this.children.length);\n      var childTypeId = this.children.push(child);\n      var _this$type = this.type,\n        children = _this$type.children,\n        mode = _this$type.mode,\n        typeIds = _this$type.typeIds;\n      var fields = [].concat(_toConsumableArray(children), [new Field(name, child.type)]);\n      this.type = new Union(mode, [].concat(_toConsumableArray(typeIds), [childTypeId]), fields);\n      return childTypeId;\n    }\n    /** @ignore */\n    // @ts-ignore\n  }, {\n    key: \"_valueToChildTypeId\",\n    value: function _valueToChildTypeId(builder, value, offset) {\n      throw new Error(\"Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.\");\n    }\n  }]);\n  return UnionBuilder;\n}(Builder);\n/** @ignore */\nexport var SparseUnionBuilder = /*#__PURE__*/function (_UnionBuilder) {\n  _inherits(SparseUnionBuilder, _UnionBuilder);\n  var _super2 = _createSuper(SparseUnionBuilder);\n  function SparseUnionBuilder() {\n    _classCallCheck(this, SparseUnionBuilder);\n    return _super2.apply(this, arguments);\n  }\n  return _createClass(SparseUnionBuilder);\n}(UnionBuilder);\n/** @ignore */\nexport var DenseUnionBuilder = /*#__PURE__*/function (_UnionBuilder2) {\n  _inherits(DenseUnionBuilder, _UnionBuilder2);\n  var _super3 = _createSuper(DenseUnionBuilder);\n  function DenseUnionBuilder(options) {\n    var _this2;\n    _classCallCheck(this, DenseUnionBuilder);\n    _this2 = _super3.call(this, options);\n    _this2._offsets = new DataBufferBuilder(new Int32Array(0));\n    return _this2;\n  }\n  /** @ignore */\n  _createClass(DenseUnionBuilder, [{\n    key: \"setValue\",\n    value: function setValue(index, value, childTypeId) {\n      var childIndex = this.type.typeIdToChildIndex[childTypeId];\n      this._offsets.set(index, this.getChildAt(childIndex).length);\n      return _get(_getPrototypeOf(DenseUnionBuilder.prototype), \"setValue\", this).call(this, index, value, childTypeId);\n    }\n  }]);\n  return DenseUnionBuilder;\n}(UnionBuilder);","map":{"version":3,"mappings":"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","names":["Field","DataBufferBuilder","Builder","Union","UnionBuilder","options","_typeIds","Int8Array","_valueToChildTypeId","type","typeIdToChildIndex","value","childTypeId","set","length","index","undefined","setValid","isValid","setValue","child","name","children","push","mode","typeIds","fields","builder","offset","Error","SparseUnionBuilder","DenseUnionBuilder","_offsets","Int32Array","childIndex","getChildAt"],"sources":["builder/union.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}