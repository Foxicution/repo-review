{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\nexport class Schema {\n  constructor() {\n    let fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let metadata = arguments.length > 1 ? arguments[1] : undefined;\n    let dictionaries = arguments.length > 2 ? arguments[2] : undefined;\n    this.fields = fields || [];\n    this.metadata = metadata || new Map();\n    if (!dictionaries) {\n      dictionaries = generateDictionaryMap(fields);\n    }\n    this.dictionaries = dictionaries;\n  }\n  /** @nocollapse */\n  static from() {\n    return Schema.new(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\n  }\n  /** @nocollapse */\n  static new() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new Schema(selectFieldArgs(args)[0]);\n  }\n  get [Symbol.toStringTag]() {\n    return 'Schema';\n  }\n  toString() {\n    return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n  }\n  compareTo(other) {\n    return comparer.compareSchemas(this, other);\n  }\n  select() {\n    for (var _len2 = arguments.length, columnNames = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      columnNames[_key2] = arguments[_key2];\n    }\n    const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n    return new Schema(this.fields.filter(f => names[f.name]), this.metadata);\n  }\n  selectAt() {\n    for (var _len3 = arguments.length, columnIndices = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      columnIndices[_key3] = arguments[_key3];\n    }\n    return new Schema(columnIndices.map(i => this.fields[i]).filter(Boolean), this.metadata);\n  }\n  assign() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    const other = args[0] instanceof Schema ? args[0] : new Schema(selectArgs(Field, args));\n    const curFields = [...this.fields];\n    const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n    const newFields = other.fields.filter(f2 => {\n      const i = curFields.findIndex(f => f.name === f2.name);\n      return ~i ? (curFields[i] = f2.clone({\n        metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n      })) && false : true;\n    });\n    const newDictionaries = generateDictionaryMap(newFields, new Map());\n    return new Schema([...curFields, ...newFields], metadata, new Map([...this.dictionaries, ...newDictionaries]));\n  }\n}\nexport class Field {\n  constructor(name, type) {\n    let nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let metadata = arguments.length > 3 ? arguments[3] : undefined;\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata || new Map();\n  }\n  /** @nocollapse */\n  static new() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    let [name, type, nullable, metadata] = args;\n    if (args[0] && typeof args[0] === 'object') {\n      ({\n        name\n      } = args[0]);\n      type === undefined && (type = args[0].type);\n      nullable === undefined && (nullable = args[0].nullable);\n      metadata === undefined && (metadata = args[0].metadata);\n    }\n    return new Field(`${name}`, type, nullable, metadata);\n  }\n  get typeId() {\n    return this.type.typeId;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Field';\n  }\n  toString() {\n    return `${this.name}: ${this.type}`;\n  }\n  compareTo(other) {\n    return comparer.compareField(this, other);\n  }\n  clone() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    let [name, type, nullable, metadata] = args;\n    !args[0] || typeof args[0] !== 'object' ? [name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args : ({\n      name = this.name,\n      type = this.type,\n      nullable = this.nullable,\n      metadata = this.metadata\n    } = args[0]);\n    return Field.new(name, type, nullable, metadata);\n  }\n}\n/** @ignore */\nfunction mergeMaps(m1, m2) {\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n/** @ignore */\nfunction generateDictionaryMap(fields) {\n  let dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  for (let i = -1, n = fields.length; ++i < n;) {\n    const field = fields[i];\n    const type = field.type;\n    if (DataType.isDictionary(type)) {\n      if (!dictionaries.has(type.id)) {\n        dictionaries.set(type.id, type.dictionary);\n      } else if (dictionaries.get(type.id) !== type.dictionary) {\n        throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n      }\n    }\n    if (type.children && type.children.length > 0) {\n      generateDictionaryMap(type.children, dictionaries);\n    }\n  }\n  return dictionaries;\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nSchema.prototype.fields = null;\nSchema.prototype.metadata = null;\nSchema.prototype.dictionaries = null;\nField.prototype.type = null;\nField.prototype.name = null;\nField.prototype.nullable = null;\nField.prototype.metadata = null;","map":{"version":3,"mappings":"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","names":["DataType","selectArgs","selectFieldArgs","instance","comparer","Schema","constructor","fields","metadata","dictionaries","Map","generateDictionaryMap","from","new","args","Symbol","toStringTag","toString","map","f","i","join","compareTo","other","compareSchemas","select","columnNames","names","reduce","xs","x","Object","create","filter","name","selectAt","columnIndices","Boolean","assign","Field","curFields","mergeMaps","newFields","f2","findIndex","clone","newDictionaries","type","nullable","undefined","typeId","compareField","m1","m2","n","length","field","isDictionary","has","id","set","dictionary","get","Error","children","prototype"],"sources":["schema.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n"]},"metadata":{},"sourceType":"module"}