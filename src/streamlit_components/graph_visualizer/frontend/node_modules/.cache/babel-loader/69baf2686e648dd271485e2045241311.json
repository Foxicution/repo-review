{"ast":null,"code":"var _jsxFileName = \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport Graph from 'react-graph-vis';\nclass StreamlitVisGraph extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      graph: JSON.parse(this.props.args[\"data\"]),\n      events: {\n        select: event => {\n          console.log(\"Selected nodes:\");\n          console.log(event.nodes[0]);\n          Streamlit.setComponentValue(event.nodes[0]);\n        }\n        // doubleClick: ({ pointer: { canvas } }) => {\n        //   createNode(canvas.x, canvas.y);\n        // }\n      },\n\n      options: JSON.parse(this.props.args[\"options\"])\n    };\n    this.render = () => {\n      return /*#__PURE__*/React.createElement(Graph, {\n        graph: this.state.graph,\n        options: this.state.options,\n        events: this.state.events,\n        style: {\n          height: 700,\n          width: \"100%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      });\n    };\n  }\n}\nexport default withStreamlitConnection(StreamlitVisGraph);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","Graph","StreamlitVisGraph","state","graph","JSON","parse","props","args","events","select","event","console","log","nodes","setComponentValue","options","render","height","width"],"sources":["/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React from \"react\"\nimport Graph from 'react-graph-vis';\nimport { networkInterfaces } from \"os\";\n\n// const options = {\n//   layout: {\n//     hierarchical: false\n//   },\n//   edges: {\n//     color: \"#000000\"\n//   }\n// };\n\ninterface State{\n  graph: any,\n  events: any,\n  options: any\n}\n\nclass StreamlitVisGraph extends StreamlitComponentBase<State> {\n  public state = {\n    graph: JSON.parse(this.props.args[\"data\"]),\n    events: {\n      select: (event: any) => {\n        console.log(\"Selected nodes:\");\n        console.log(event.nodes[0]);\n        Streamlit.setComponentValue(event.nodes[0])\n      },\n      // doubleClick: ({ pointer: { canvas } }) => {\n      //   createNode(canvas.x, canvas.y);\n      // }\n    },\n    options: JSON.parse(this.props.args[\"options\"])\n  }\n  \n  render = () => {\n    return (\n        <Graph\n        graph={this.state.graph}\n        options={this.state.options}\n        events={this.state.events}\n        style={{ height: 700, width: \"100%\" }}\n        />\n    );\n  }\n}\n\nexport default withStreamlitConnection(StreamlitVisGraph)"],"mappings":";AAAA,SACEA,SAAS,EACTC,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,iBAAiB;AAkBnC,MAAMC,iBAAiB,SAASJ,sBAAsB,CAAQ;EAAA;IAAA;IAAA,KACrDK,KAAK,GAAG;MACbC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,MAAM,CAAC,CAAC;MAC1CC,MAAM,EAAE;QACNC,MAAM,EAAGC,KAAU,IAAK;UACtBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9BD,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;UAC3BjB,SAAS,CAACkB,iBAAiB,CAACJ,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7C;QACA;QACA;QACA;MACF,CAAC;;MACDE,OAAO,EAAEX,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,SAAS,CAAC;IAChD,CAAC;IAAA,KAEDS,MAAM,GAAG,MAAM;MACb,oBACI,oBAAC,KAAK;QACN,KAAK,EAAE,IAAI,CAACd,KAAK,CAACC,KAAM;QACxB,OAAO,EAAE,IAAI,CAACD,KAAK,CAACa,OAAQ;QAC5B,MAAM,EAAE,IAAI,CAACb,KAAK,CAACM,MAAO;QAC1B,KAAK,EAAE;UAAES,MAAM,EAAE,GAAG;UAAEC,KAAK,EAAE;QAAO,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACpC;IAER,CAAC;EAAA;AACH;AAEA,eAAepB,uBAAuB,CAACG,iBAAiB,CAAC"},"metadata":{},"sourceType":"module"}