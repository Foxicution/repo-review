{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { clampRange } from '../util/vector';\nimport { DataType } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\nexport var Chunked = /*#__PURE__*/function (_AbstractVector, _Symbol$iterator) {\n  _inherits(Chunked, _AbstractVector);\n  var _super = _createSuper(Chunked);\n  function Chunked(type) {\n    var _this;\n    var chunks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var offsets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : calculateOffsets(chunks);\n    _classCallCheck(this, Chunked);\n    _this = _super.call(this);\n    _this._nullCount = -1;\n    _this._type = type;\n    _this._chunks = chunks;\n    _this._chunkOffsets = offsets;\n    _this._length = offsets[offsets.length - 1];\n    _this._numChildren = (_this._type.children || []).length;\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(Chunked, [{\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: \"chunks\",\n    get: function get() {\n      return this._chunks;\n    }\n  }, {\n    key: \"typeId\",\n    get: function get() {\n      return this._type.typeId;\n    }\n  }, {\n    key: \"VectorName\",\n    get: function get() {\n      return \"Chunked<\".concat(this._type, \">\");\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._chunks[0] ? this._chunks[0].data : null;\n    }\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this._type.ArrayType;\n    }\n  }, {\n    key: \"numChildren\",\n    get: function get() {\n      return this._numChildren;\n    }\n  }, {\n    key: \"stride\",\n    get: function get() {\n      return this._chunks[0] ? this._chunks[0].stride : 1;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      return this._chunks.reduce(function (byteLength, chunk) {\n        return byteLength + chunk.byteLength;\n      }, 0);\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      var nullCount = this._nullCount;\n      if (nullCount < 0) {\n        this._nullCount = nullCount = this._chunks.reduce(function (x, _ref) {\n          var nullCount = _ref.nullCount;\n          return x + nullCount;\n        }, 0);\n      }\n      return nullCount;\n    }\n  }, {\n    key: \"indices\",\n    get: function get() {\n      if (DataType.isDictionary(this._type)) {\n        if (!this._indices) {\n          var _chunks2 = this._chunks;\n          this._indices = _chunks2.length === 1 ? _chunks2[0].indices : Chunked.concat.apply(Chunked, _toConsumableArray(_chunks2.map(function (x) {\n            return x.indices;\n          })));\n        }\n        return this._indices;\n      }\n      return null;\n    }\n  }, {\n    key: \"dictionary\",\n    get: function get() {\n      if (DataType.isDictionary(this._type)) {\n        return this._chunks[this._chunks.length - 1].data.dictionary;\n      }\n      return null;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      var _iterator, _step, chunk;\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(this._chunks);\n              _context.prev = 1;\n              _iterator.s();\n            case 3:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 8;\n                break;\n              }\n              chunk = _step.value;\n              return _context.delegateYield(chunk, \"t0\", 6);\n            case 6:\n              _context.next = 3;\n              break;\n            case 8:\n              _context.next = 13;\n              break;\n            case 10:\n              _context.prev = 10;\n              _context.t1 = _context[\"catch\"](1);\n              _iterator.e(_context.t1);\n            case 13:\n              _context.prev = 13;\n              _iterator.f();\n              return _context.finish(13);\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this, [[1, 10, 13, 16]]);\n    })\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n      return new Chunked(this._type, chunks);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n      return this.clone(Chunked.flatten.apply(Chunked, [this].concat(others)));\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(begin, end) {\n      return clampRange(this, begin, end, this._sliceInternal);\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index < 0 || index >= this._numChildren) {\n        return null;\n      }\n      var columns = this._children || (this._children = []);\n      var child, field, chunks;\n      if (child = columns[index]) {\n        return child;\n      }\n      if (field = (this._type.children || [])[index]) {\n        chunks = this._chunks.map(function (vector) {\n          return vector.getChildAt(index);\n        }).filter(function (vec) {\n          return vec != null;\n        });\n        if (chunks.length > 0) {\n          return columns[index] = new Chunked(field.type, chunks);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"search\",\n    value: function search(index, then) {\n      var idx = index;\n      // binary search to find the child vector and value indices\n      var offsets = this._chunkOffsets,\n        rhs = offsets.length - 1;\n      // return early if out of bounds, or if there's just one child\n      if (idx < 0) {\n        return null;\n      }\n      if (idx >= offsets[rhs]) {\n        return null;\n      }\n      if (rhs <= 1) {\n        return then ? then(this, 0, idx) : [0, idx];\n      }\n      var lhs = 0,\n        pos = 0,\n        mid = 0;\n      do {\n        if (lhs + 1 === rhs) {\n          return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n        }\n        mid = lhs + (rhs - lhs) / 2 | 0;\n        idx >= offsets[mid] ? lhs = mid : rhs = mid;\n      } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n      return null;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(index) {\n      return !!this.search(index, this.isValidInternal);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.search(index, this.getInternal);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.search(index, function (_ref2, i, j) {\n        var chunks = _ref2.chunks;\n        return chunks[i].set(j, value);\n      });\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(element, offset) {\n      var _this2 = this;\n      if (offset && typeof offset === 'number') {\n        return this.search(offset, function (self, i, j) {\n          return _this2.indexOfInternal(self, i, j, element);\n        });\n      }\n      return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var chunks = this.chunks;\n      var n = chunks.length;\n      var ArrayType = this._type.ArrayType;\n      if (n <= 0) {\n        return new ArrayType(0);\n      }\n      if (n <= 1) {\n        return chunks[0].toArray();\n      }\n      var len = 0,\n        src = new Array(n);\n      for (var i = -1; ++i < n;) {\n        len += (src[i] = chunks[i].toArray()).length;\n      }\n      if (ArrayType !== src[0].constructor) {\n        ArrayType = src[0].constructor;\n      }\n      var dst = new ArrayType(len);\n      var set = ArrayType === Array ? arraySet : typedSet;\n      for (var _i = -1, idx = 0; ++_i < n;) {\n        idx = set(src[_i], dst, idx);\n      }\n      return dst;\n    }\n  }, {\n    key: \"getInternal\",\n    value: function getInternal(_ref3, i, j) {\n      var _chunks = _ref3._chunks;\n      return _chunks[i].get(j);\n    }\n  }, {\n    key: \"isValidInternal\",\n    value: function isValidInternal(_ref4, i, j) {\n      var _chunks = _ref4._chunks;\n      return _chunks[i].isValid(j);\n    }\n  }, {\n    key: \"indexOfInternal\",\n    value: function indexOfInternal(_ref5, chunkIndex, fromIndex, element) {\n      var _chunks = _ref5._chunks;\n      var i = chunkIndex - 1,\n        n = _chunks.length;\n      var start = fromIndex,\n        offset = 0,\n        found = -1;\n      while (++i < n) {\n        if (~(found = _chunks[i].indexOf(element, start))) {\n          return offset + found;\n        }\n        start = 0;\n        offset += _chunks[i].length;\n      }\n      return -1;\n    }\n  }, {\n    key: \"_sliceInternal\",\n    value: function _sliceInternal(self, begin, end) {\n      var slices = [];\n      var chunks = self.chunks,\n        chunkOffsets = self._chunkOffsets;\n      for (var i = -1, n = chunks.length; ++i < n;) {\n        var chunk = chunks[i];\n        var chunkLength = chunk.length;\n        var chunkOffset = chunkOffsets[i];\n        // If the child is to the right of the slice boundary, we can stop\n        if (chunkOffset >= end) {\n          break;\n        }\n        // If the child is to the left of of the slice boundary, exclude\n        if (begin >= chunkOffset + chunkLength) {\n          continue;\n        }\n        // If the child is between both left and right boundaries, include w/o slicing\n        if (chunkOffset >= begin && chunkOffset + chunkLength <= end) {\n          slices.push(chunk);\n          continue;\n        }\n        // If the child overlaps one of the slice boundaries, include that slice\n        var from = Math.max(0, begin - chunkOffset);\n        var to = Math.min(end - chunkOffset, chunkLength);\n        slices.push(chunk.slice(from, to));\n      }\n      return self.clone(slices);\n    }\n  }], [{\n    key: \"flatten\",\n    value: function flatten() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n      return selectChunkArgs(Vector, vectors);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      var chunks = Chunked.flatten.apply(Chunked, arguments);\n      return new Chunked(chunks[0].type, chunks);\n    }\n  }]);\n  return Chunked;\n}(AbstractVector, Symbol.iterator);\n/** @ignore */\nfunction calculateOffsets(vectors) {\n  var offsets = new Uint32Array((vectors || []).length + 1);\n  var offset = offsets[0] = 0,\n    length = offsets.length;\n  for (var index = 0; ++index < length;) {\n    offsets[index] = offset += vectors[index - 1].length;\n  }\n  return offsets;\n}\n/** @ignore */\nvar typedSet = function typedSet(src, dst, offset) {\n  dst.set(src, offset);\n  return offset + src.length;\n};\n/** @ignore */\nvar arraySet = function arraySet(src, dst, offset) {\n  var idx = offset;\n  for (var i = -1, n = src.length; ++i < n;) {\n    dst[idx++] = src[i];\n  }\n  return idx;\n};","map":{"version":3,"mappings":"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","names":["clampRange","DataType","selectChunkArgs","AbstractVector","Vector","Chunked","type","chunks","offsets","calculateOffsets","_type","_chunks","_chunkOffsets","_length","length","_numChildren","children","typeId","data","ArrayType","stride","reduce","byteLength","chunk","nullCount","_nullCount","x","isDictionary","_indices","indices","concat","map","dictionary","others","clone","flatten","begin","end","_sliceInternal","index","columns","_children","child","field","vector","getChildAt","filter","vec","then","idx","rhs","lhs","pos","mid","search","isValidInternal","getInternal","value","i","j","set","element","offset","self","indexOfInternal","Math","max","n","toArray","len","src","Array","constructor","dst","arraySet","typedSet","get","isValid","chunkIndex","fromIndex","start","found","indexOf","slices","chunkOffsets","chunkLength","chunkOffset","push","from","to","min","slice","vectors","Symbol","iterator","Uint32Array"],"sources":["vector/chunked.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n"]},"metadata":{},"sourceType":"module"}