{"ast":null,"code":"/* tslint:disable:class-name */\n/**\n * @enum {number}\n */\nexport var org;\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        let MetadataVersion;\n        (function (MetadataVersion) {\n          /**\n           * 0.1.0\n           */\n          MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n          /**\n           * 0.2.0\n           */\n          MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n          /**\n           * 0.3.0 -> 0.7.1\n           */\n          MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n          /**\n           * >= 0.8.0\n           */\n          MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n        })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        let UnionMode;\n        (function (UnionMode) {\n          UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n          UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n        })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        let Precision;\n        (function (Precision) {\n          Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n          Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n          Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n        })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        let DateUnit;\n        (function (DateUnit) {\n          DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n          DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n        })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        let TimeUnit;\n        (function (TimeUnit) {\n          TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n          TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n          TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n          TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n        })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum {number}\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        let IntervalUnit;\n        (function (IntervalUnit) {\n          IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n          IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n        })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        let Type;\n        (function (Type) {\n          Type[Type[\"NONE\"] = 0] = \"NONE\";\n          Type[Type[\"Null\"] = 1] = \"Null\";\n          Type[Type[\"Int\"] = 2] = \"Int\";\n          Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n          Type[Type[\"Binary\"] = 4] = \"Binary\";\n          Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n          Type[Type[\"Bool\"] = 6] = \"Bool\";\n          Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n          Type[Type[\"Date\"] = 8] = \"Date\";\n          Type[Type[\"Time\"] = 9] = \"Time\";\n          Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n          Type[Type[\"Interval\"] = 11] = \"Interval\";\n          Type[Type[\"List\"] = 12] = \"List\";\n          Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n          Type[Type[\"Union\"] = 14] = \"Union\";\n          Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n          Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n          Type[Type[\"Map\"] = 17] = \"Map\";\n          Type[Type[\"Duration\"] = 18] = \"Duration\";\n          Type[Type[\"LargeBinary\"] = 19] = \"LargeBinary\";\n          Type[Type[\"LargeUtf8\"] = 20] = \"LargeUtf8\";\n          Type[Type[\"LargeList\"] = 21] = \"LargeList\";\n        })(Type = flatbuf.Type || (flatbuf.Type = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        let Endianness;\n        (function (Endianness) {\n          Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n          Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n        })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Null {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Null\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Null= obj\n           * @returns Null\n           */\n          static getRootAsNull(bb, obj) {\n            return (obj || new Null()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startNull(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endNull(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createNull(builder) {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n          }\n        }\n        flatbuf.Null = Null;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Struct_ {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Struct_\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Struct_= obj\n           * @returns Struct_\n           */\n          static getRootAsStruct_(bb, obj) {\n            return (obj || new Struct_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startStruct_(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endStruct_(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createStruct_(builder) {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n          }\n        }\n        flatbuf.Struct_ = Struct_;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class List {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns List\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param List= obj\n           * @returns List\n           */\n          static getRootAsList(bb, obj) {\n            return (obj || new List()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startList(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endList(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createList(builder) {\n            List.startList(builder);\n            return List.endList(builder);\n          }\n        }\n        flatbuf.List = List;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class LargeList {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeList\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param LargeList= obj\n           * @returns LargeList\n           */\n          static getRootAsLargeList(bb, obj) {\n            return (obj || new LargeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startLargeList(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endLargeList(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createLargeList(builder) {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n          }\n        }\n        flatbuf.LargeList = LargeList;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class FixedSizeList {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FixedSizeList\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param FixedSizeList= obj\n           * @returns FixedSizeList\n           */\n          static getRootAsFixedSizeList(bb, obj) {\n            return (obj || new FixedSizeList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Number of list items per value\n           *\n           * @returns number\n           */\n          listSize() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startFixedSizeList(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number listSize\n           */\n          static addListSize(builder, listSize) {\n            builder.addFieldInt32(0, listSize, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endFixedSizeList(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createFixedSizeList(builder, listSize) {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n          }\n        }\n        flatbuf.FixedSizeList = FixedSizeList;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Map {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Map\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Map= obj\n           * @returns Map\n           */\n          static getRootAsMap(bb, obj) {\n            return (obj || new Map()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Set to true if the keys within each value are sorted\n           *\n           * @returns boolean\n           */\n          keysSorted() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startMap(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean keysSorted\n           */\n          static addKeysSorted(builder, keysSorted) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endMap(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createMap(builder, keysSorted) {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n          }\n        }\n        flatbuf.Map = Map;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Union {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Union\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Union= obj\n           * @returns Union\n           */\n          static getRootAsUnion(bb, obj) {\n            return (obj || new Union()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.UnionMode\n           */\n          mode() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n          }\n          /**\n           * @param number index\n           * @returns number\n           */\n          typeIds(index) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n          }\n          /**\n           * @returns number\n           */\n          typeIdsLength() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @returns Int32Array\n           */\n          typeIdsArray() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startUnion(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.UnionMode mode\n           */\n          static addMode(builder, mode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset typeIdsOffset\n           */\n          static addTypeIds(builder, typeIdsOffset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<number> data\n           * @returns flatbuffers.Offset\n           */\n          static createTypeIdsVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n          static startTypeIdsVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endUnion(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createUnion(builder, mode, typeIdsOffset) {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n          }\n        }\n        flatbuf.Union = Union;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Int {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Int\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Int= obj\n           * @returns Int\n           */\n          static getRootAsInt(bb, obj) {\n            return (obj || new Int()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns number\n           */\n          bitWidth() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @returns boolean\n           */\n          isSigned() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startInt(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number bitWidth\n           */\n          static addBitWidth(builder, bitWidth) {\n            builder.addFieldInt32(0, bitWidth, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean isSigned\n           */\n          static addIsSigned(builder, isSigned) {\n            builder.addFieldInt8(1, +isSigned, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endInt(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createInt(builder, bitWidth, isSigned) {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n          }\n        }\n        flatbuf.Int = Int;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class FloatingPoint {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FloatingPoint\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param FloatingPoint= obj\n           * @returns FloatingPoint\n           */\n          static getRootAsFloatingPoint(bb, obj) {\n            return (obj || new FloatingPoint()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.Precision\n           */\n          precision() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Precision.HALF;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startFloatingPoint(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.Precision precision\n           */\n          static addPrecision(builder, precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endFloatingPoint(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createFloatingPoint(builder, precision) {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n          }\n        }\n        flatbuf.FloatingPoint = FloatingPoint;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Utf8 {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Utf8\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Utf8= obj\n           * @returns Utf8\n           */\n          static getRootAsUtf8(bb, obj) {\n            return (obj || new Utf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startUtf8(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endUtf8(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createUtf8(builder) {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n          }\n        }\n        flatbuf.Utf8 = Utf8;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Opaque binary data\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Binary {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Binary\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Binary= obj\n           * @returns Binary\n           */\n          static getRootAsBinary(bb, obj) {\n            return (obj || new Binary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startBinary(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endBinary(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createBinary(builder) {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n          }\n        }\n        flatbuf.Binary = Binary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class LargeUtf8 {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeUtf8\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param LargeUtf8= obj\n           * @returns LargeUtf8\n           */\n          static getRootAsLargeUtf8(bb, obj) {\n            return (obj || new LargeUtf8()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startLargeUtf8(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endLargeUtf8(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createLargeUtf8(builder) {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n          }\n        }\n        flatbuf.LargeUtf8 = LargeUtf8;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class LargeBinary {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns LargeBinary\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param LargeBinary= obj\n           * @returns LargeBinary\n           */\n          static getRootAsLargeBinary(bb, obj) {\n            return (obj || new LargeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startLargeBinary(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endLargeBinary(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createLargeBinary(builder) {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n          }\n        }\n        flatbuf.LargeBinary = LargeBinary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class FixedSizeBinary {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FixedSizeBinary\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param FixedSizeBinary= obj\n           * @returns FixedSizeBinary\n           */\n          static getRootAsFixedSizeBinary(bb, obj) {\n            return (obj || new FixedSizeBinary()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Number of bytes per value\n           *\n           * @returns number\n           */\n          byteWidth() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startFixedSizeBinary(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number byteWidth\n           */\n          static addByteWidth(builder, byteWidth) {\n            builder.addFieldInt32(0, byteWidth, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endFixedSizeBinary(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createFixedSizeBinary(builder, byteWidth) {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n          }\n        }\n        flatbuf.FixedSizeBinary = FixedSizeBinary;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Bool {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Bool\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Bool= obj\n           * @returns Bool\n           */\n          static getRootAsBool(bb, obj) {\n            return (obj || new Bool()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startBool(builder) {\n            builder.startObject(0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endBool(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createBool(builder) {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n          }\n        }\n        flatbuf.Bool = Bool;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Decimal {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Decimal\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Decimal= obj\n           * @returns Decimal\n           */\n          static getRootAsDecimal(bb, obj) {\n            return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * Total number of decimal digits\n           *\n           * @returns number\n           */\n          precision() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * Number of digits after the decimal point \".\"\n           *\n           * @returns number\n           */\n          scale() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startDecimal(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number precision\n           */\n          static addPrecision(builder, precision) {\n            builder.addFieldInt32(0, precision, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number scale\n           */\n          static addScale(builder, scale) {\n            builder.addFieldInt32(1, scale, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endDecimal(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createDecimal(builder, precision, scale) {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n          }\n        }\n        flatbuf.Decimal = Decimal;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Date {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Date\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Date= obj\n           * @returns Date\n           */\n          static getRootAsDate(bb, obj) {\n            return (obj || new Date()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.DateUnit\n           */\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startDate(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.DateUnit unit\n           */\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endDate(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createDate(builder, unit) {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n          }\n        }\n        flatbuf.Date = Date;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Time {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Time\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Time= obj\n           * @returns Time\n           */\n          static getRootAsTime(bb, obj) {\n            return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.TimeUnit\n           */\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n          }\n          /**\n           * @returns number\n           */\n          bitWidth() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startTime(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.TimeUnit unit\n           */\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number bitWidth\n           */\n          static addBitWidth(builder, bitWidth) {\n            builder.addFieldInt32(1, bitWidth, 32);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endTime(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createTime(builder, unit, bitWidth) {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n          }\n        }\n        flatbuf.Time = Time;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Timestamp {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Timestamp\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Timestamp= obj\n           * @returns Timestamp\n           */\n          static getRootAsTimestamp(bb, obj) {\n            return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.TimeUnit\n           */\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n          }\n          timezone(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startTimestamp(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.TimeUnit unit\n           */\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset timezoneOffset\n           */\n          static addTimezone(builder, timezoneOffset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endTimestamp(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createTimestamp(builder, unit, timezoneOffset) {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n          }\n        }\n        flatbuf.Timestamp = Timestamp;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Interval {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Interval\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Interval= obj\n           * @returns Interval\n           */\n          static getRootAsInterval(bb, obj) {\n            return (obj || new Interval()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.IntervalUnit\n           */\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startInterval(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.IntervalUnit unit\n           */\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endInterval(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createInterval(builder, unit) {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n          }\n        }\n        flatbuf.Interval = Interval;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Duration {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Duration\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Duration= obj\n           * @returns Duration\n           */\n          static getRootAsDuration(bb, obj) {\n            return (obj || new Duration()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.TimeUnit\n           */\n          unit() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startDuration(builder) {\n            builder.startObject(1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.TimeUnit unit\n           */\n          static addUnit(builder, unit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endDuration(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createDuration(builder, unit) {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n          }\n        }\n        flatbuf.Duration = Duration;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class KeyValue {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns KeyValue\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param KeyValue= obj\n           * @returns KeyValue\n           */\n          static getRootAsKeyValue(bb, obj) {\n            return (obj || new KeyValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          key(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n          value(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startKeyValue(builder) {\n            builder.startObject(2);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset keyOffset\n           */\n          static addKey(builder, keyOffset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset valueOffset\n           */\n          static addValue(builder, valueOffset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endKeyValue(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createKeyValue(builder, keyOffset, valueOffset) {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n          }\n        }\n        flatbuf.KeyValue = KeyValue;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class DictionaryEncoding {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryEncoding\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param DictionaryEncoding= obj\n           * @returns DictionaryEncoding\n           */\n          static getRootAsDictionaryEncoding(bb, obj) {\n            return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * The known dictionary id in the application where this data is used. In\n           * the file or streaming formats, the dictionary ids are found in the\n           * DictionaryBatch messages\n           *\n           * @returns flatbuffers.Long\n           */\n          id() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * The dictionary indices are constrained to be positive integers. If this\n           * field is null, the indices must be signed int32\n           *\n           * @param org.apache.arrow.flatbuf.Int= obj\n           * @returns org.apache.arrow.flatbuf.Int|null\n           */\n          indexType(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n          }\n          /**\n           * By default, dictionaries are not ordered, or the order does not have\n           * semantic meaning. In some statistical, applications, dictionary-encoding\n           * is used to represent ordered categorical data, and we provide a way to\n           * preserve that metadata here\n           *\n           * @returns boolean\n           */\n          isOrdered() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startDictionaryEncoding(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long id\n           */\n          static addId(builder, id) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset indexTypeOffset\n           */\n          static addIndexType(builder, indexTypeOffset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean isOrdered\n           */\n          static addIsOrdered(builder, isOrdered) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endDictionaryEncoding(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createDictionaryEncoding(builder, id, indexTypeOffset, isOrdered) {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n          }\n        }\n        flatbuf.DictionaryEncoding = DictionaryEncoding;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Field {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Field\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Field= obj\n           * @returns Field\n           */\n          static getRootAsField(bb, obj) {\n            return (obj || new Field()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          name(optionalEncoding) {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n          }\n          /**\n           * Whether or not this field can contain nulls. Should be true in general.\n           *\n           * @returns boolean\n           */\n          nullable() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.Type\n           */\n          typeType() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? /**  */this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.Type.NONE;\n          }\n          /**\n           * This is the type of the decoded value if the field is dictionary encoded.\n           *\n           * @param flatbuffers.Table obj\n           * @returns ?flatbuffers.Table\n           */\n          type(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n          }\n          /**\n           * Present only if the field is dictionary encoded.\n           *\n           * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n           * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n           */\n          dictionary(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n          }\n          /**\n           * children apply only to nested data types like Struct, List and Union. For\n           * primitive types children will have length 0.\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.Field= obj\n           * @returns org.apache.arrow.flatbuf.Field\n           */\n          children(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n          childrenLength() {\n            let offset = this.bb.__offset(this.bb_pos, 14);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * User-defined metadata\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.KeyValue= obj\n           * @returns org.apache.arrow.flatbuf.KeyValue\n           */\n          customMetadata(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n          customMetadataLength() {\n            let offset = this.bb.__offset(this.bb_pos, 16);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startField(builder) {\n            builder.startObject(7);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset nameOffset\n           */\n          static addName(builder, nameOffset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean nullable\n           */\n          static addNullable(builder, nullable) {\n            builder.addFieldInt8(1, +nullable, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.Type typeType\n           */\n          static addTypeType(builder, typeType) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset typeOffset\n           */\n          static addType(builder, typeOffset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset dictionaryOffset\n           */\n          static addDictionary(builder, dictionaryOffset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset childrenOffset\n           */\n          static addChildren(builder, childrenOffset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n          static createChildrenVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n          static startChildrenVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset customMetadataOffset\n           */\n          static addCustomMetadata(builder, customMetadataOffset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n          static createCustomMetadataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n          static startCustomMetadataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endField(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          static createField(builder, nameOffset, nullable, typeType, typeOffset, dictionaryOffset, childrenOffset, customMetadataOffset) {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n          }\n        }\n        flatbuf.Field = Field;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Buffer {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Buffer\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * The relative offset into the shared memory page where the bytes for this\n           * buffer starts\n           *\n           * @returns flatbuffers.Long\n           */\n          offset() {\n            return this.bb.readInt64(this.bb_pos);\n          }\n          /**\n           * The absolute length (in bytes) of the memory buffer. The memory is found\n           * from offset (inclusive) to offset + length (non-inclusive).\n           *\n           * @returns flatbuffers.Long\n           */\n          length() {\n            return this.bb.readInt64(this.bb_pos + 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long offset\n           * @param flatbuffers.Long length\n           * @returns flatbuffers.Offset\n           */\n          static createBuffer(builder, offset, length) {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n          }\n        }\n        flatbuf.Buffer = Buffer;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        class Schema {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Schema\n           */\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Schema= obj\n           * @returns Schema\n           */\n          static getRootAsSchema(bb, obj) {\n            return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * endianness of the buffer\n           * it is Little Endian by default\n           * if endianness doesn't match the underlying system then the vectors need to be converted\n           *\n           * @returns org.apache.arrow.flatbuf.Endianness\n           */\n          endianness() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : org.apache.arrow.flatbuf.Endianness.Little;\n          }\n          /**\n           * @param number index\n           * @param org.apache.arrow.flatbuf.Field= obj\n           * @returns org.apache.arrow.flatbuf.Field\n           */\n          fields(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n          fieldsLength() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param number index\n           * @param org.apache.arrow.flatbuf.KeyValue= obj\n           * @returns org.apache.arrow.flatbuf.KeyValue\n           */\n          customMetadata(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n          customMetadataLength() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n          static startSchema(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.Endianness endianness\n           */\n          static addEndianness(builder, endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset fieldsOffset\n           */\n          static addFields(builder, fieldsOffset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n          static createFieldsVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n          static startFieldsVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset customMetadataOffset\n           */\n          static addCustomMetadata(builder, customMetadataOffset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n          static createCustomMetadataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n          static startCustomMetadataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n          static endSchema(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset offset\n           */\n          static finishSchemaBuffer(builder, offset) {\n            builder.finish(offset);\n          }\n          static createSchema(builder, endianness, fieldsOffset, customMetadataOffset) {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n          }\n        }\n        flatbuf.Schema = Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"mappings":"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","names":["org","MetadataVersion","flatbuf","arrow","apache","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","constructor","__init","i","bb","bb_pos","getRootAsNull","obj","readInt32","position","startNull","builder","startObject","endNull","offset","endObject","createNull","Struct_","getRootAsStruct_","startStruct_","endStruct_","createStruct_","List","getRootAsList","startList","endList","createList","LargeList","getRootAsLargeList","startLargeList","endLargeList","createLargeList","FixedSizeList","getRootAsFixedSizeList","listSize","__offset","startFixedSizeList","addListSize","addFieldInt32","endFixedSizeList","createFixedSizeList","Map","getRootAsMap","keysSorted","readInt8","startMap","addKeysSorted","addFieldInt8","endMap","createMap","Union","getRootAsUnion","mode","readInt16","Sparse","typeIds","index","__vector","typeIdsLength","__vector_len","typeIdsArray","Int32Array","bytes","buffer","byteOffset","startUnion","addMode","addFieldInt16","addTypeIds","typeIdsOffset","addFieldOffset","createTypeIdsVector","data","startVector","length","addInt32","endVector","startTypeIdsVector","numElems","endUnion","createUnion","Int","getRootAsInt","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","createInt","FloatingPoint","getRootAsFloatingPoint","precision","HALF","startFloatingPoint","addPrecision","endFloatingPoint","createFloatingPoint","Utf8","getRootAsUtf8","startUtf8","endUtf8","createUtf8","Binary","getRootAsBinary","startBinary","endBinary","createBinary","LargeUtf8","getRootAsLargeUtf8","startLargeUtf8","endLargeUtf8","createLargeUtf8","LargeBinary","getRootAsLargeBinary","startLargeBinary","endLargeBinary","createLargeBinary","FixedSizeBinary","getRootAsFixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","createFixedSizeBinary","Bool","getRootAsBool","startBool","endBool","createBool","Decimal","getRootAsDecimal","scale","startDecimal","addScale","endDecimal","createDecimal","Date","getRootAsDate","unit","MILLISECOND","startDate","addUnit","endDate","createDate","Time","getRootAsTime","startTime","endTime","createTime","Timestamp","getRootAsTimestamp","SECOND","timezone","optionalEncoding","__string","startTimestamp","addTimezone","timezoneOffset","endTimestamp","createTimestamp","Interval","getRootAsInterval","YEAR_MONTH","startInterval","endInterval","createInterval","Duration","getRootAsDuration","startDuration","endDuration","createDuration","KeyValue","getRootAsKeyValue","key","value","startKeyValue","addKey","keyOffset","addValue","valueOffset","endKeyValue","createKeyValue","DictionaryEncoding","getRootAsDictionaryEncoding","id","readInt64","createLong","indexType","__indirect","isOrdered","startDictionaryEncoding","addId","addFieldInt64","addIndexType","indexTypeOffset","addIsOrdered","endDictionaryEncoding","createDictionaryEncoding","Field","getRootAsField","name","nullable","typeType","readUint8","NONE","type","__union","dictionary","children","childrenLength","customMetadata","customMetadataLength","startField","addName","nameOffset","addNullable","addTypeType","addType","typeOffset","addDictionary","dictionaryOffset","addChildren","childrenOffset","createChildrenVector","addOffset","startChildrenVector","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","startCustomMetadataVector","endField","createField","Buffer","createBuffer","prep","writeInt64","Schema","getRootAsSchema","endianness","Little","fields","fieldsLength","startSchema","addEndianness","addFields","fieldsOffset","createFieldsVector","startFieldsVector","endSchema","finishSchemaBuffer","finish","createSchema"],"sources":["fb/Schema.ts"],"sourcesContent":["/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}