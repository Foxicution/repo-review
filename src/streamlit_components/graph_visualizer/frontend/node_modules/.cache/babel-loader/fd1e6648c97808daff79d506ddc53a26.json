{"ast":null,"code":"import _asyncToGenerator from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _construct from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/construct\";\nvar _excluded = [\"values\"];\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\nimport * as fn from '../util/fn';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder } from '../builder';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n/** @nocollapse */\nVector.new = newVector;\n/** @nocollapse */\nVector.from = vectorFrom;\n/** @ignore */\nfunction newVector(data) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return _construct(getVectorConstructor.getVisitFn(data)(), [data].concat(args));\n}\n/** @ignore */\nexport function vectorFromValuesWithType(newDataType, input) {\n  if (isIterable(input)) {\n    return Vector.from({\n      'nullValues': [null, undefined],\n      type: newDataType(),\n      'values': input\n    });\n  } else if (isAsyncIterable(input)) {\n    return Vector.from({\n      'nullValues': [null, undefined],\n      type: newDataType(),\n      'values': input\n    });\n  }\n  var _input = _objectSpread({}, input),\n    _input$values = _input['values'],\n    values = _input$values === void 0 ? [] : _input$values,\n    _input$type = _input['type'],\n    type = _input$type === void 0 ? newDataType() : _input$type,\n    _input$nullValues = _input['nullValues'],\n    nullValues = _input$nullValues === void 0 ? [null, undefined] : _input$nullValues;\n  return isIterable(values) ? Vector.from(_objectSpread(_objectSpread({\n    nullValues: nullValues\n  }, input), {}, {\n    type: type\n  })) : Vector.from(_objectSpread(_objectSpread({\n    nullValues: nullValues\n  }, input), {}, {\n    type: type\n  }));\n}\nfunction vectorFrom(input) {\n  var _nullValues$input = _objectSpread({\n      'nullValues': [null, undefined]\n    }, input),\n    _nullValues$input$val = _nullValues$input['values'],\n    values = _nullValues$input$val === void 0 ? [] : _nullValues$input$val,\n    options = _objectWithoutProperties(_nullValues$input, _excluded);\n  if (isIterable(values)) {\n    var chunks = _toConsumableArray(Builder.throughIterable(options)(values));\n    return chunks.length === 1 ? chunks[0] : Chunked.concat(chunks);\n  }\n  return function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(chunks) {\n      var transform, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              transform = Builder.throughAsyncIterable(options);\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(transform(values));\n            case 5:\n              _context.next = 7;\n              return _iterator.next();\n            case 7:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 13;\n                break;\n              }\n              chunk = _step.value;\n              chunks.push(chunk);\n            case 10:\n              _iteratorAbruptCompletion = false;\n              _context.next = 5;\n              break;\n            case 13:\n              _context.next = 19;\n              break;\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 19:\n              _context.prev = 19;\n              _context.prev = 20;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 24;\n                break;\n              }\n              _context.next = 24;\n              return _iterator.return();\n            case 24:\n              _context.prev = 24;\n              if (!_didIteratorError) {\n                _context.next = 27;\n                break;\n              }\n              throw _iteratorError;\n            case 27:\n              return _context.finish(24);\n            case 28:\n              return _context.finish(19);\n            case 29:\n              return _context.abrupt(\"return\", chunks.length === 1 ? chunks[0] : Chunked.concat(chunks));\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 15, 19, 29], [20,, 24, 28]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()([]);\n}\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\nBaseVector.prototype.get = function baseVectorGet(index) {\n  return getVisitor.visit(this, index);\n};\nBaseVector.prototype.set = function baseVectorSet(index, value) {\n  return setVisitor.visit(this, index, value);\n};\nBaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {\n  return indexOfVisitor.visit(this, value, fromIndex);\n};\nBaseVector.prototype.toArray = function baseVectorToArray() {\n  return toArrayVisitor.visit(this);\n};\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {\n  return byteWidthVisitor.visit(this.type);\n};\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {\n  return iteratorVisitor.visit(this);\n};\nBaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors;\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\nObject.keys(Type).map(function (T) {\n  return Type[T];\n}).filter(function (T) {\n  return typeof T === 'number';\n}).filter(function (typeId) {\n  return typeId !== Type.NONE;\n}).forEach(function (typeId) {\n  var VectorCtor = getVectorConstructor.visit(typeId);\n  VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n  VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n});\n/** @ignore */\nfunction partialType0(visit) {\n  return function () {\n    return visit(this.type);\n  };\n}\n/** @ignore */\nfunction wrapNullableGet(fn) {\n  return function (i) {\n    return this.isValid(i) ? fn.call(this, i) : null;\n  };\n}\n/** @ignore */\nfunction wrapNullableSet(fn) {\n  return function (i, a) {\n    if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n      fn.call(this, i, a);\n    }\n  };\n}\n/** @ignore */\nfunction bindBaseVectorDataAccessors() {\n  var nullBitmap = this.nullBitmap;\n  if (nullBitmap && nullBitmap.byteLength > 0) {\n    this.get = wrapNullableGet(this.get);\n    this.set = wrapNullableSet(this.set);\n  }\n}","map":{"version":3,"mappings":"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","names":["Vector","BaseVector","BinaryVector","BoolVector","Chunked","DateVector","DateDayVector","DateMillisecondVector","DecimalVector","DictionaryVector","FixedSizeBinaryVector","FixedSizeListVector","FloatVector","Float16Vector","Float32Vector","Float64Vector","IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","IntVector","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","ListVector","MapVector","NullVector","StructVector","TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","UnionVector","DenseUnionVector","SparseUnionVector","Utf8Vector","MapRow","StructRow","fn","Type","setBool","isIterable","isAsyncIterable","Builder","instance","getVisitor","setVisitor","indexOfVisitor","toArrayVisitor","iteratorVisitor","byteWidthVisitor","getVectorConstructor","new","newVector","from","vectorFrom","data","args","getVisitFn","vectorFromValuesWithType","newDataType","input","undefined","type","values","nullValues","options","chunks","throughIterable","length","concat","transform","throughAsyncIterable","chunk","push","prototype","get","baseVectorGet","index","visit","set","baseVectorSet","value","indexOf","baseVectorIndexOf","fromIndex","toArray","baseVectorToArray","getByteWidth","baseVectorGetByteWidth","Symbol","iterator","baseVectorSymbolIterator","_bindDataAccessors","bindBaseVectorDataAccessors","Object","keys","map","T","filter","typeId","NONE","forEach","VectorCtor","partial1","partial2","partial0","partialType0","wrapNullableGet","i","isValid","call","wrapNullableSet","a","nullBitmap","offset","byteLength"],"sources":["vector/index.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}