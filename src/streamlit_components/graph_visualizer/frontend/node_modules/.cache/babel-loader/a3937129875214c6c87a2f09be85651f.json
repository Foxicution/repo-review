{"ast":null,"code":"var _jsxFileName = \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport Graph from 'react-graph-vis';\nclass StreamlitVisGraph extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.render = () => {\n      // function lookup_node_id(lookup_node: any, mynodes: any){\n      //   for (let node of mynodes){\n      //       if (node.id === lookup_node){\n      //           return node;\n      //       }\n      // }}\n\n      // const graph = this.graph\n      // console.log(graph)\n      // var nodes = JSON.parse(this.props.args[\"nodes\"]);\n      // var edges = JSON.parse(this.props.args[\"edges\"]);\n      // var graph = {\n      //   \"nodes\": nodes,\n      //   \"edges\": edges\n      // }\n      // var graph = {\n      //   nodes: [\n      //     { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n      //     { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n      //     { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n      //     { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n      //     { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n      //   ],\n      //   edges: [\n      //     { from: 1, to: 2 },\n      //     { from: 1, to: 3 },\n      //     { from: 2, to: 4 },\n      //     { from: 2, to: 5 }\n      //   ]\n      // };\n\n      // var nodes = graph.nodes.slice();\n\n      // for (let i = 0; i < nodes.length; i++) {\n      //   if(nodes[i].title)\n      //     nodes[i].div = this.htmlTitle(nodes[i].title);\n      // }\n\n      // const options = JSON.parse(this.props.args[\"config\"]);\n      const options = {\n        layout: {\n          hierarchical: false\n        },\n        edges: {\n          color: \"#000000\"\n        },\n        height: \"500px\"\n      };\n\n      // const events = {\n\n      //   selectNode: (event:any) => {\n      //     console.log(event.nodes[0])\n      //     Streamlit.setComponentValue(event.nodes[0]);\n      //   },\n\n      //   doubleClick: (event:any) => {\n      //     console.log(event.nodes);\n      //     // let link = nodes;\n      //     let lookup_node = lookup_node_id(event.nodes[0], nodes);\n      //     Streamlit.setComponentValue(lookup_node)\n      //     // let link = lookup_node.div.innerHTML;\n      //     // if(link){\n      //     //   window.open(link);\n      //     // }\n      //   }\n      // };\n\n      const [state, setState] = useState({\n        counter: 5,\n        graph: {\n          nodes: [{\n            id: 1,\n            label: \"Node 1\",\n            color: \"#e04141\"\n          }, {\n            id: 2,\n            label: \"Node 2\",\n            color: \"#e09c41\"\n          }, {\n            id: 3,\n            label: \"Node 3\",\n            color: \"#e0df41\"\n          }, {\n            id: 4,\n            label: \"Node 4\",\n            color: \"#7be041\"\n          }, {\n            id: 5,\n            label: \"Node 5\",\n            color: \"#41e0c9\"\n          }],\n          edges: [{\n            from: 1,\n            to: 2\n          }, {\n            from: 1,\n            to: 3\n          }, {\n            from: 2,\n            to: 4\n          }, {\n            from: 2,\n            to: 5\n          }]\n        },\n        events: {\n          select: _ref => {\n            let {\n              nodes,\n              edges\n            } = _ref;\n            console.log(\"Selected nodes:\");\n            console.log(nodes);\n            console.log(\"Selected edges:\");\n            console.log(edges);\n            alert(\"Selected node: \" + nodes);\n          }\n          // doubleClick: ({ pointer: { canvas } }) => {\n          //   createNode(canvas.x, canvas.y);\n          // }\n        }\n      });\n\n      const {\n        graph,\n        events\n      } = state;\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Graph, {\n        graph: graph,\n        options: options,\n        events: events,\n        key: uuidv4(),\n        getNetwork: network => {\n          //  if you want access to vis.js network api you can set the state in a parent component using this property\n          //console.log(network);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 7\n        }\n      }));\n    };\n    this.onSelect = event => Streamlit.setComponentValue(event.nodes[0]);\n    this.htmlTitle = html => {\n      const container = document.createElement(\"div\");\n      container.innerHTML = html;\n      return container;\n    };\n  }\n}\nexport default withStreamlitConnection(StreamlitVisGraph);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","useState","v4","uuidv4","Graph","StreamlitVisGraph","render","options","layout","hierarchical","edges","color","height","state","setState","counter","graph","nodes","id","label","from","to","events","select","console","log","alert","network","onSelect","event","setComponentValue","htmlTitle","html","container","document","createElement","innerHTML"],"sources":["/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useState } from \"react\"\nimport { v4 as uuidv4 } from 'uuid'\nimport Graph from 'react-graph-vis';\n\n\ninterface State {\n  clicked: any\n}\n\nclass StreamlitVisGraph extends StreamlitComponentBase {\n\n\n  // private graph = JSON.parse(this.props.args['data'])\n\n  public render = (): ReactNode => {\n\n    // function lookup_node_id(lookup_node: any, mynodes: any){\n    //   for (let node of mynodes){\n    //       if (node.id === lookup_node){\n    //           return node;\n    //       }\n    // }}\n\n    // const graph = this.graph\n    // console.log(graph)\n    // var nodes = JSON.parse(this.props.args[\"nodes\"]);\n    // var edges = JSON.parse(this.props.args[\"edges\"]);\n    // var graph = {\n    //   \"nodes\": nodes,\n    //   \"edges\": edges\n    // }\n    // var graph = {\n    //   nodes: [\n    //     { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n    //     { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n    //     { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n    //     { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n    //     { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n    //   ],\n    //   edges: [\n    //     { from: 1, to: 2 },\n    //     { from: 1, to: 3 },\n    //     { from: 2, to: 4 },\n    //     { from: 2, to: 5 }\n    //   ]\n    // };\n    \n    // var nodes = graph.nodes.slice();\n\n    // for (let i = 0; i < nodes.length; i++) {\n    //   if(nodes[i].title)\n    //     nodes[i].div = this.htmlTitle(nodes[i].title);\n    // }\n  \n    // const options = JSON.parse(this.props.args[\"config\"]);\n    const options = {\n      layout: {\n        hierarchical: false\n      },\n      edges: {\n        color: \"#000000\"\n      },\n      height: \"500px\"\n    };\n  \n\n    // const events = {\n\n    //   selectNode: (event:any) => {\n    //     console.log(event.nodes[0])\n    //     Streamlit.setComponentValue(event.nodes[0]);\n    //   },\n\n    //   doubleClick: (event:any) => {\n    //     console.log(event.nodes);\n    //     // let link = nodes;\n    //     let lookup_node = lookup_node_id(event.nodes[0], nodes);\n    //     Streamlit.setComponentValue(lookup_node)\n    //     // let link = lookup_node.div.innerHTML;\n    //     // if(link){\n    //     //   window.open(link);\n    //     // }\n    //   }\n    // };\n\n    const [state, setState] = useState({\n      counter: 5,\n      graph: {\n        nodes: [\n          { id: 1, label: \"Node 1\", color: \"#e04141\" },\n          { id: 2, label: \"Node 2\", color: \"#e09c41\" },\n          { id: 3, label: \"Node 3\", color: \"#e0df41\" },\n          { id: 4, label: \"Node 4\", color: \"#7be041\" },\n          { id: 5, label: \"Node 5\", color: \"#41e0c9\" }\n        ],\n        edges: [\n          { from: 1, to: 2 },\n          { from: 1, to: 3 },\n          { from: 2, to: 4 },\n          { from: 2, to: 5 }\n        ]\n      },\n      events: {\n        select: ({ nodes, edges }) => {\n          console.log(\"Selected nodes:\");\n          console.log(nodes);\n          console.log(\"Selected edges:\");\n          console.log(edges);\n          alert(\"Selected node: \" + nodes);\n        }\n        // doubleClick: ({ pointer: { canvas } }) => {\n        //   createNode(canvas.x, canvas.y);\n        // }\n      }\n    })\n    const { graph, events } = state;\n    return (\n      <span>\n    \n      <Graph\n      graph={graph}\n      options={options}\n      events={events}\n      key={uuidv4()}\n      getNetwork={(network: any) => {\n        //  if you want access to vis.js network api you can set the state in a parent component using this property\n        //console.log(network);\n      }}/>\n      </span>\n    )\n  }\n\n  private onSelect = (event: any): void => Streamlit.setComponentValue(event.nodes[0])\n\n  private htmlTitle = (html: string):any => {   \n    const container = document.createElement(\"div\");\n    container.innerHTML = html;\n    return container;\n  }\n}\n\nexport default withStreamlitConnection(StreamlitVisGraph)"],"mappings":"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"},"metadata":{},"sourceType":"module"}