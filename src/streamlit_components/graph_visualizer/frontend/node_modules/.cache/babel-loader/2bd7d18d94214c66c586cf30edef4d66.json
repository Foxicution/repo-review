{"ast":null,"code":"import _slicedToArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\nexport var Schema = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function Schema() {\n    var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var metadata = arguments.length > 1 ? arguments[1] : undefined;\n    var dictionaries = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, Schema);\n    this.fields = fields || [];\n    this.metadata = metadata || new Map();\n    if (!dictionaries) {\n      dictionaries = generateDictionaryMap(fields);\n    }\n    this.dictionaries = dictionaries;\n  }\n  /** @nocollapse */\n  _createClass(Schema, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Schema';\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Schema<{ \".concat(this.fields.map(function (f, i) {\n        return \"\".concat(i, \": \").concat(f);\n      }).join(', '), \" }>\");\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      return comparer.compareSchemas(this, other);\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      for (var _len = arguments.length, columnNames = new Array(_len), _key = 0; _key < _len; _key++) {\n        columnNames[_key] = arguments[_key];\n      }\n      var names = columnNames.reduce(function (xs, x) {\n        return (xs[x] = true) && xs;\n      }, Object.create(null));\n      return new Schema(this.fields.filter(function (f) {\n        return names[f.name];\n      }), this.metadata);\n    }\n  }, {\n    key: \"selectAt\",\n    value: function selectAt() {\n      var _this = this;\n      for (var _len2 = arguments.length, columnIndices = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        columnIndices[_key2] = arguments[_key2];\n      }\n      return new Schema(columnIndices.map(function (i) {\n        return _this.fields[i];\n      }).filter(Boolean), this.metadata);\n    }\n  }, {\n    key: \"assign\",\n    value: function assign() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      var other = args[0] instanceof Schema ? args[0] : new Schema(selectArgs(Field, args));\n      var curFields = _toConsumableArray(this.fields);\n      var metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n      var newFields = other.fields.filter(function (f2) {\n        var i = curFields.findIndex(function (f) {\n          return f.name === f2.name;\n        });\n        return ~i ? (curFields[i] = f2.clone({\n          metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n        })) && false : true;\n      });\n      var newDictionaries = generateDictionaryMap(newFields, new Map());\n      return new Schema([].concat(_toConsumableArray(curFields), _toConsumableArray(newFields)), metadata, new Map([].concat(_toConsumableArray(this.dictionaries), _toConsumableArray(newDictionaries))));\n    }\n  }], [{\n    key: \"from\",\n    value: function from() {\n      return Schema.new(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"new\",\n    value: function _new() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return new Schema(selectFieldArgs(args)[0]);\n    }\n  }]);\n  return Schema;\n}(Symbol.toStringTag);\nexport var Field = /*#__PURE__*/function (_Symbol$toStringTag2) {\n  function Field(name, type) {\n    var nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var metadata = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, Field);\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata || new Map();\n  }\n  /** @nocollapse */\n  _createClass(Field, [{\n    key: \"typeId\",\n    get: function get() {\n      return this.type.typeId;\n    }\n  }, {\n    key: _Symbol$toStringTag2,\n    get: function get() {\n      return 'Field';\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.name, \": \").concat(this.type);\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      return comparer.compareField(this, other);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var _args, _args2, _args2$, _args2$2, _args2$3, _args2$4, _args$, _args$$name, _args$$type, _args$$nullable, _args$$metadata;\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      var name = args[0],\n        type = args[1],\n        nullable = args[2],\n        metadata = args[3];\n      !args[0] || typeof args[0] !== 'object' ? (_args = args, _args2 = _slicedToArray(_args, 4), _args2$ = _args2[0], name = _args2$ === void 0 ? this.name : _args2$, _args2$2 = _args2[1], type = _args2$2 === void 0 ? this.type : _args2$2, _args2$3 = _args2[2], nullable = _args2$3 === void 0 ? this.nullable : _args2$3, _args2$4 = _args2[3], metadata = _args2$4 === void 0 ? this.metadata : _args2$4, _args) : (_args$ = args[0], _args$$name = _args$.name, name = _args$$name === void 0 ? this.name : _args$$name, _args$$type = _args$.type, type = _args$$type === void 0 ? this.type : _args$$type, _args$$nullable = _args$.nullable, nullable = _args$$nullable === void 0 ? this.nullable : _args$$nullable, _args$$metadata = _args$.metadata, metadata = _args$$metadata === void 0 ? this.metadata : _args$$metadata, _args$);\n      return Field.new(name, type, nullable, metadata);\n    }\n  }], [{\n    key: \"new\",\n    value: function _new() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      var name = args[0],\n        type = args[1],\n        nullable = args[2],\n        metadata = args[3];\n      if (args[0] && typeof args[0] === 'object') {\n        name = args[0].name;\n        type === undefined && (type = args[0].type);\n        nullable === undefined && (nullable = args[0].nullable);\n        metadata === undefined && (metadata = args[0].metadata);\n      }\n      return new Field(\"\".concat(name), type, nullable, metadata);\n    }\n  }]);\n  return Field;\n}(Symbol.toStringTag);\n/** @ignore */\nfunction mergeMaps(m1, m2) {\n  return new Map([].concat(_toConsumableArray(m1 || new Map()), _toConsumableArray(m2 || new Map())));\n}\n/** @ignore */\nfunction generateDictionaryMap(fields) {\n  var dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  for (var i = -1, n = fields.length; ++i < n;) {\n    var field = fields[i];\n    var type = field.type;\n    if (DataType.isDictionary(type)) {\n      if (!dictionaries.has(type.id)) {\n        dictionaries.set(type.id, type.dictionary);\n      } else if (dictionaries.get(type.id) !== type.dictionary) {\n        throw new Error(\"Cannot create Schema containing two different dictionaries with the same Id\");\n      }\n    }\n    if (type.children && type.children.length > 0) {\n      generateDictionaryMap(type.children, dictionaries);\n    }\n  }\n  return dictionaries;\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nSchema.prototype.fields = null;\nSchema.prototype.metadata = null;\nSchema.prototype.dictionaries = null;\nField.prototype.type = null;\nField.prototype.name = null;\nField.prototype.nullable = null;\nField.prototype.metadata = null;","map":{"version":3,"mappings":"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","names":["DataType","selectArgs","selectFieldArgs","instance","comparer","Schema","fields","metadata","dictionaries","Map","generateDictionaryMap","map","f","i","join","other","compareSchemas","columnNames","names","reduce","xs","x","Object","create","filter","name","columnIndices","Boolean","args","Field","curFields","mergeMaps","newFields","f2","findIndex","clone","newDictionaries","new","Symbol","toStringTag","type","nullable","typeId","compareField","undefined","m1","m2","n","length","field","isDictionary","has","id","set","dictionary","get","Error","children","prototype"],"sources":["schema.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n"]},"metadata":{},"sourceType":"module"}