{"ast":null,"code":"import _toConsumableArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType } from './type';\nexport var Visitor = /*#__PURE__*/function () {\n  function Visitor() {\n    _classCallCheck(this, Visitor);\n  }\n  _createClass(Visitor, [{\n    key: \"visitMany\",\n    value: function visitMany(nodes) {\n      var _this = this;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return nodes.map(function (node, i) {\n        return _this.visit.apply(_this, [node].concat(_toConsumableArray(args.map(function (x) {\n          return x[i];\n        }))));\n      });\n    }\n  }, {\n    key: \"visit\",\n    value: function visit() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return this.getVisitFn(args[0], false).apply(this, args);\n    }\n  }, {\n    key: \"getVisitFn\",\n    value: function getVisitFn(node) {\n      var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _getVisitFn(this, node, throwIfNotFound);\n    }\n  }, {\n    key: \"visitNull\",\n    value: function visitNull(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitBool\",\n    value: function visitBool(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitInt\",\n    value: function visitInt(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitFloat\",\n    value: function visitFloat(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitUtf8\",\n    value: function visitUtf8(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitFixedSizeBinary\",\n    value: function visitFixedSizeBinary(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitDate\",\n    value: function visitDate(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitTimestamp\",\n    value: function visitTimestamp(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitTime\",\n    value: function visitTime(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitDecimal\",\n    value: function visitDecimal(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitList\",\n    value: function visitList(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitStruct\",\n    value: function visitStruct(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitUnion\",\n    value: function visitUnion(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitDictionary\",\n    value: function visitDictionary(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitInterval\",\n    value: function visitInterval(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitFixedSizeList\",\n    value: function visitFixedSizeList(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitMap\",\n    value: function visitMap(_node) {\n      return null;\n    }\n  }]);\n  return Visitor;\n}();\n/** @ignore */\nfunction _getVisitFn(visitor, node) {\n  var throwIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var fn = null;\n  var dtype = Type.NONE;\n  // tslint:disable\n  if (node instanceof Data) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof Vector) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof DataType) {\n    dtype = inferDType(node);\n  } else if (typeof (dtype = node) !== 'number') {\n    dtype = Type[node];\n  }\n  switch (dtype) {\n    case Type.Null:\n      fn = visitor.visitNull;\n      break;\n    case Type.Bool:\n      fn = visitor.visitBool;\n      break;\n    case Type.Int:\n      fn = visitor.visitInt;\n      break;\n    case Type.Int8:\n      fn = visitor.visitInt8 || visitor.visitInt;\n      break;\n    case Type.Int16:\n      fn = visitor.visitInt16 || visitor.visitInt;\n      break;\n    case Type.Int32:\n      fn = visitor.visitInt32 || visitor.visitInt;\n      break;\n    case Type.Int64:\n      fn = visitor.visitInt64 || visitor.visitInt;\n      break;\n    case Type.Uint8:\n      fn = visitor.visitUint8 || visitor.visitInt;\n      break;\n    case Type.Uint16:\n      fn = visitor.visitUint16 || visitor.visitInt;\n      break;\n    case Type.Uint32:\n      fn = visitor.visitUint32 || visitor.visitInt;\n      break;\n    case Type.Uint64:\n      fn = visitor.visitUint64 || visitor.visitInt;\n      break;\n    case Type.Float:\n      fn = visitor.visitFloat;\n      break;\n    case Type.Float16:\n      fn = visitor.visitFloat16 || visitor.visitFloat;\n      break;\n    case Type.Float32:\n      fn = visitor.visitFloat32 || visitor.visitFloat;\n      break;\n    case Type.Float64:\n      fn = visitor.visitFloat64 || visitor.visitFloat;\n      break;\n    case Type.Utf8:\n      fn = visitor.visitUtf8;\n      break;\n    case Type.Binary:\n      fn = visitor.visitBinary;\n      break;\n    case Type.FixedSizeBinary:\n      fn = visitor.visitFixedSizeBinary;\n      break;\n    case Type.Date:\n      fn = visitor.visitDate;\n      break;\n    case Type.DateDay:\n      fn = visitor.visitDateDay || visitor.visitDate;\n      break;\n    case Type.DateMillisecond:\n      fn = visitor.visitDateMillisecond || visitor.visitDate;\n      break;\n    case Type.Timestamp:\n      fn = visitor.visitTimestamp;\n      break;\n    case Type.TimestampSecond:\n      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMillisecond:\n      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMicrosecond:\n      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampNanosecond:\n      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n      break;\n    case Type.Time:\n      fn = visitor.visitTime;\n      break;\n    case Type.TimeSecond:\n      fn = visitor.visitTimeSecond || visitor.visitTime;\n      break;\n    case Type.TimeMillisecond:\n      fn = visitor.visitTimeMillisecond || visitor.visitTime;\n      break;\n    case Type.TimeMicrosecond:\n      fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n      break;\n    case Type.TimeNanosecond:\n      fn = visitor.visitTimeNanosecond || visitor.visitTime;\n      break;\n    case Type.Decimal:\n      fn = visitor.visitDecimal;\n      break;\n    case Type.List:\n      fn = visitor.visitList;\n      break;\n    case Type.Struct:\n      fn = visitor.visitStruct;\n      break;\n    case Type.Union:\n      fn = visitor.visitUnion;\n      break;\n    case Type.DenseUnion:\n      fn = visitor.visitDenseUnion || visitor.visitUnion;\n      break;\n    case Type.SparseUnion:\n      fn = visitor.visitSparseUnion || visitor.visitUnion;\n      break;\n    case Type.Dictionary:\n      fn = visitor.visitDictionary;\n      break;\n    case Type.Interval:\n      fn = visitor.visitInterval;\n      break;\n    case Type.IntervalDayTime:\n      fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n      break;\n    case Type.IntervalYearMonth:\n      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n      break;\n    case Type.FixedSizeList:\n      fn = visitor.visitFixedSizeList;\n      break;\n    case Type.Map:\n      fn = visitor.visitMap;\n      break;\n  }\n  if (typeof fn === 'function') return fn;\n  if (!throwIfNotFound) return function () {\n    return null;\n  };\n  throw new Error(\"Unrecognized type '\".concat(Type[dtype], \"'\"));\n}\n/** @ignore */\nfunction inferDType(type) {\n  switch (type.typeId) {\n    case Type.Null:\n      return Type.Null;\n    case Type.Int:\n      var bitWidth = type.bitWidth,\n        isSigned = type.isSigned;\n      switch (bitWidth) {\n        case 8:\n          return isSigned ? Type.Int8 : Type.Uint8;\n        case 16:\n          return isSigned ? Type.Int16 : Type.Uint16;\n        case 32:\n          return isSigned ? Type.Int32 : Type.Uint32;\n        case 64:\n          return isSigned ? Type.Int64 : Type.Uint64;\n      }\n      return Type.Int;\n    case Type.Float:\n      switch (type.precision) {\n        case Precision.HALF:\n          return Type.Float16;\n        case Precision.SINGLE:\n          return Type.Float32;\n        case Precision.DOUBLE:\n          return Type.Float64;\n      }\n      return Type.Float;\n    case Type.Binary:\n      return Type.Binary;\n    case Type.Utf8:\n      return Type.Utf8;\n    case Type.Bool:\n      return Type.Bool;\n    case Type.Decimal:\n      return Type.Decimal;\n    case Type.Time:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimeSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimeMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimeMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimeNanosecond;\n      }\n      return Type.Time;\n    case Type.Timestamp:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimestampSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimestampMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimestampMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimestampNanosecond;\n      }\n      return Type.Timestamp;\n    case Type.Date:\n      switch (type.unit) {\n        case DateUnit.DAY:\n          return Type.DateDay;\n        case DateUnit.MILLISECOND:\n          return Type.DateMillisecond;\n      }\n      return Type.Date;\n    case Type.Interval:\n      switch (type.unit) {\n        case IntervalUnit.DAY_TIME:\n          return Type.IntervalDayTime;\n        case IntervalUnit.YEAR_MONTH:\n          return Type.IntervalYearMonth;\n      }\n      return Type.Interval;\n    case Type.Map:\n      return Type.Map;\n    case Type.List:\n      return Type.List;\n    case Type.Struct:\n      return Type.Struct;\n    case Type.Union:\n      switch (type.mode) {\n        case UnionMode.Dense:\n          return Type.DenseUnion;\n        case UnionMode.Sparse:\n          return Type.SparseUnion;\n      }\n      return Type.Union;\n    case Type.FixedSizeBinary:\n      return Type.FixedSizeBinary;\n    case Type.FixedSizeList:\n      return Type.FixedSizeList;\n    case Type.Dictionary:\n      return Type.Dictionary;\n  }\n  throw new Error(\"Unrecognized type '\".concat(Type[type.typeId], \"'\"));\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;","map":{"version":3,"mappings":"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","names":["Data","Vector","Type","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","DataType","Visitor","nodes","args","map","node","i","visit","x","getVisitFn","apply","throwIfNotFound","_node","visitor","fn","dtype","NONE","inferDType","type","Null","visitNull","Bool","visitBool","Int","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","Utf8","visitUtf8","Binary","visitBinary","FixedSizeBinary","visitFixedSizeBinary","Date","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","Timestamp","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","Time","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","Decimal","visitDecimal","List","visitList","Struct","visitStruct","Union","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","visitDictionary","Interval","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","FixedSizeList","visitFixedSizeList","Map","visitMap","Error","typeId","bitWidth","isSigned","precision","HALF","SINGLE","DOUBLE","unit","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","DAY","DAY_TIME","YEAR_MONTH","mode","Dense","Sparse","prototype"],"sources":["visitor.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n"]},"metadata":{},"sourceType":"module"}