{"ast":null,"code":"import _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { uint16ToFloat64 } from '../util/math';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\n/** @ignore */\nexport var GetVisitor = /*#__PURE__*/function (_Visitor) {\n  _inherits(GetVisitor, _Visitor);\n  var _super = _createSuper(GetVisitor);\n  function GetVisitor() {\n    _classCallCheck(this, GetVisitor);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(GetVisitor);\n}(Visitor);\n/** @ignore */\nvar epochDaysToMs = function epochDaysToMs(data, index) {\n  return 86400000 * data[index];\n};\n/** @ignore */\nvar epochMillisecondsLongToMs = function epochMillisecondsLongToMs(data, index) {\n  return 4294967296 * data[index + 1] + (data[index] >>> 0);\n};\n/** @ignore */\nvar epochMicrosecondsLongToMs = function epochMicrosecondsLongToMs(data, index) {\n  return 4294967296 * (data[index + 1] / 1000) + (data[index] >>> 0) / 1000;\n};\n/** @ignore */\nvar epochNanosecondsLongToMs = function epochNanosecondsLongToMs(data, index) {\n  return 4294967296 * (data[index + 1] / 1000000) + (data[index] >>> 0) / 1000000;\n};\n/** @ignore */\nvar epochMillisecondsToDate = function epochMillisecondsToDate(epochMs) {\n  return new Date(epochMs);\n};\n/** @ignore */\nvar epochDaysToDate = function epochDaysToDate(data, index) {\n  return epochMillisecondsToDate(epochDaysToMs(data, index));\n};\n/** @ignore */\nvar epochMillisecondsLongToDate = function epochMillisecondsLongToDate(data, index) {\n  return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n};\n/** @ignore */\nvar getNull = function getNull(_vector, _index) {\n  return null;\n};\n/** @ignore */\nvar getVariableWidthBytes = function getVariableWidthBytes(values, valueOffsets, index) {\n  var x = valueOffsets[index],\n    y = valueOffsets[index + 1];\n  return x != null && y != null ? values.subarray(x, y) : null;\n};\n/** @ignore */\nvar getBool = function getBool(_ref, index) {\n  var offset = _ref.offset,\n    values = _ref.values;\n  var idx = offset + index;\n  var byte = values[idx >> 3];\n  return (byte & 1 << idx % 8) !== 0;\n};\n/** @ignore */\nvar getDateDay = function getDateDay(_ref2, index) {\n  var values = _ref2.values;\n  return epochDaysToDate(values, index);\n};\n/** @ignore */\nvar getDateMillisecond = function getDateMillisecond(_ref3, index) {\n  var values = _ref3.values;\n  return epochMillisecondsLongToDate(values, index * 2);\n};\n/** @ignore */\nvar getNumeric = function getNumeric(_ref4, index) {\n  var stride = _ref4.stride,\n    values = _ref4.values;\n  return values[stride * index];\n};\n/** @ignore */\nvar getFloat16 = function getFloat16(_ref5, index) {\n  var stride = _ref5.stride,\n    values = _ref5.values;\n  return uint16ToFloat64(values[stride * index]);\n};\n/** @ignore */\nvar getBigInts = function getBigInts(_ref6, index) {\n  var stride = _ref6.stride,\n    values = _ref6.values,\n    type = _ref6.type;\n  return BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n};\n/** @ignore */\nvar getFixedSizeBinary = function getFixedSizeBinary(_ref7, index) {\n  var stride = _ref7.stride,\n    values = _ref7.values;\n  return values.subarray(stride * index, stride * (index + 1));\n};\n/** @ignore */\nvar getBinary = function getBinary(_ref8, index) {\n  var values = _ref8.values,\n    valueOffsets = _ref8.valueOffsets;\n  return getVariableWidthBytes(values, valueOffsets, index);\n};\n/** @ignore */\nvar getUtf8 = function getUtf8(_ref9, index) {\n  var values = _ref9.values,\n    valueOffsets = _ref9.valueOffsets;\n  var bytes = getVariableWidthBytes(values, valueOffsets, index);\n  return bytes !== null ? decodeUtf8(bytes) : null;\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getInt = function getInt(vector, index) {\n  return vector.type.bitWidth < 64 ? getNumeric(vector, index) : getBigInts(vector, index);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getFloat = function getFloat(vector, index) {\n  return vector.type.precision !== Precision.HALF ? getNumeric(vector, index) : getFloat16(vector, index);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getDate = function getDate(vector, index) {\n  return vector.type.unit === DateUnit.DAY ? getDateDay(vector, index) : getDateMillisecond(vector, index);\n};\n/** @ignore */\nvar getTimestampSecond = function getTimestampSecond(_ref10, index) {\n  var values = _ref10.values;\n  return 1000 * epochMillisecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nvar getTimestampMillisecond = function getTimestampMillisecond(_ref11, index) {\n  var values = _ref11.values;\n  return epochMillisecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nvar getTimestampMicrosecond = function getTimestampMicrosecond(_ref12, index) {\n  var values = _ref12.values;\n  return epochMicrosecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nvar getTimestampNanosecond = function getTimestampNanosecond(_ref13, index) {\n  var values = _ref13.values;\n  return epochNanosecondsLongToMs(values, index * 2);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getTimestamp = function getTimestamp(vector, index) {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimestampSecond(vector, index);\n    case TimeUnit.MILLISECOND:\n      return getTimestampMillisecond(vector, index);\n    case TimeUnit.MICROSECOND:\n      return getTimestampMicrosecond(vector, index);\n    case TimeUnit.NANOSECOND:\n      return getTimestampNanosecond(vector, index);\n  }\n};\n/** @ignore */\nvar getTimeSecond = function getTimeSecond(_ref14, index) {\n  var values = _ref14.values,\n    stride = _ref14.stride;\n  return values[stride * index];\n};\n/** @ignore */\nvar getTimeMillisecond = function getTimeMillisecond(_ref15, index) {\n  var values = _ref15.values,\n    stride = _ref15.stride;\n  return values[stride * index];\n};\n/** @ignore */\nvar getTimeMicrosecond = function getTimeMicrosecond(_ref16, index) {\n  var values = _ref16.values;\n  return BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n};\n/** @ignore */\nvar getTimeNanosecond = function getTimeNanosecond(_ref17, index) {\n  var values = _ref17.values;\n  return BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getTime = function getTime(vector, index) {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimeSecond(vector, index);\n    case TimeUnit.MILLISECOND:\n      return getTimeMillisecond(vector, index);\n    case TimeUnit.MICROSECOND:\n      return getTimeMicrosecond(vector, index);\n    case TimeUnit.NANOSECOND:\n      return getTimeNanosecond(vector, index);\n  }\n};\n/** @ignore */\nvar getDecimal = function getDecimal(_ref18, index) {\n  var values = _ref18.values;\n  return BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n};\n/** @ignore */\nvar getList = function getList(vector, index) {\n  var child = vector.getChildAt(0),\n    valueOffsets = vector.valueOffsets,\n    stride = vector.stride;\n  return child.slice(valueOffsets[index * stride], valueOffsets[index * stride + 1]);\n};\n/** @ignore */\nvar getMap = function getMap(vector, index) {\n  return vector.bind(index);\n};\n/** @ignore */\nvar getStruct = function getStruct(vector, index) {\n  return vector.bind(index);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getUnion = function getUnion(vector, index) {\n  return vector.type.mode === UnionMode.Dense ? getDenseUnion(vector, index) : getSparseUnion(vector, index);\n};\n/** @ignore */\nvar getDenseUnion = function getDenseUnion(vector, index) {\n  var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  var child = vector.getChildAt(childIndex);\n  return child ? child.get(vector.valueOffsets[index]) : null;\n};\n/** @ignore */\nvar getSparseUnion = function getSparseUnion(vector, index) {\n  var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  var child = vector.getChildAt(childIndex);\n  return child ? child.get(index) : null;\n};\n/** @ignore */\nvar getDictionary = function getDictionary(vector, index) {\n  return vector.getValue(vector.getKey(index));\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getInterval = function getInterval(vector, index) {\n  return vector.type.unit === IntervalUnit.DAY_TIME ? getIntervalDayTime(vector, index) : getIntervalYearMonth(vector, index);\n};\n/** @ignore */\nvar getIntervalDayTime = function getIntervalDayTime(_ref19, index) {\n  var values = _ref19.values;\n  return values.subarray(2 * index, 2 * (index + 1));\n};\n/** @ignore */\nvar getIntervalYearMonth = function getIntervalYearMonth(_ref20, index) {\n  var values = _ref20.values;\n  var interval = values[index];\n  var int32s = new Int32Array(2);\n  int32s[0] = interval / 12 | 0; /* years */\n  int32s[1] = interval % 12 | 0; /* months */\n  return int32s;\n};\n/** @ignore */\nvar getFixedSizeList = function getFixedSizeList(vector, index) {\n  var child = vector.getChildAt(0),\n    stride = vector.stride;\n  return child.slice(index * stride, (index + 1) * stride);\n};\nGetVisitor.prototype.visitNull = getNull;\nGetVisitor.prototype.visitBool = getBool;\nGetVisitor.prototype.visitInt = getInt;\nGetVisitor.prototype.visitInt8 = getNumeric;\nGetVisitor.prototype.visitInt16 = getNumeric;\nGetVisitor.prototype.visitInt32 = getNumeric;\nGetVisitor.prototype.visitInt64 = getBigInts;\nGetVisitor.prototype.visitUint8 = getNumeric;\nGetVisitor.prototype.visitUint16 = getNumeric;\nGetVisitor.prototype.visitUint32 = getNumeric;\nGetVisitor.prototype.visitUint64 = getBigInts;\nGetVisitor.prototype.visitFloat = getFloat;\nGetVisitor.prototype.visitFloat16 = getFloat16;\nGetVisitor.prototype.visitFloat32 = getNumeric;\nGetVisitor.prototype.visitFloat64 = getNumeric;\nGetVisitor.prototype.visitUtf8 = getUtf8;\nGetVisitor.prototype.visitBinary = getBinary;\nGetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;\nGetVisitor.prototype.visitDate = getDate;\nGetVisitor.prototype.visitDateDay = getDateDay;\nGetVisitor.prototype.visitDateMillisecond = getDateMillisecond;\nGetVisitor.prototype.visitTimestamp = getTimestamp;\nGetVisitor.prototype.visitTimestampSecond = getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;\nGetVisitor.prototype.visitTime = getTime;\nGetVisitor.prototype.visitTimeSecond = getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;\nGetVisitor.prototype.visitDecimal = getDecimal;\nGetVisitor.prototype.visitList = getList;\nGetVisitor.prototype.visitStruct = getStruct;\nGetVisitor.prototype.visitUnion = getUnion;\nGetVisitor.prototype.visitDenseUnion = getDenseUnion;\nGetVisitor.prototype.visitSparseUnion = getSparseUnion;\nGetVisitor.prototype.visitDictionary = getDictionary;\nGetVisitor.prototype.visitInterval = getInterval;\nGetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList = getFixedSizeList;\nGetVisitor.prototype.visitMap = getMap;\n/** @ignore */\nexport var instance = new GetVisitor();","map":{"version":3,"mappings":"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","names":["BN","Visitor","decodeUtf8","uint16ToFloat64","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","GetVisitor","epochDaysToMs","data","index","epochMillisecondsLongToMs","epochMicrosecondsLongToMs","epochNanosecondsLongToMs","epochMillisecondsToDate","epochMs","Date","epochDaysToDate","epochMillisecondsLongToDate","getNull","_vector","_index","getVariableWidthBytes","values","valueOffsets","x","y","subarray","getBool","offset","idx","byte","getDateDay","getDateMillisecond","getNumeric","stride","getFloat16","getBigInts","type","new","isSigned","getFixedSizeBinary","getBinary","getUtf8","bytes","getInt","vector","bitWidth","getFloat","precision","HALF","getDate","unit","DAY","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","getTimestampNanosecond","getTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","signed","getTimeNanosecond","getTime","getDecimal","decimal","getList","getChildAt","child","slice","getMap","bind","getStruct","getUnion","mode","Dense","getDenseUnion","getSparseUnion","childIndex","typeIdToChildIndex","typeIds","get","getDictionary","getValue","getKey","getInterval","DAY_TIME","getIntervalDayTime","getIntervalYearMonth","interval","int32s","Int32Array","getFixedSizeList","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap","instance"],"sources":["visitor/get.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n"]},"metadata":{},"sourceType":"module"}