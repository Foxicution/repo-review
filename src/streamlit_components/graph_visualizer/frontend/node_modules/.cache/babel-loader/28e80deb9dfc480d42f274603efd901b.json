{"ast":null,"code":"import _slicedToArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\nexport var BinaryBuilder = /*#__PURE__*/function (_VariableWidthBuilder) {\n  _inherits(BinaryBuilder, _VariableWidthBuilder);\n  var _super = _createSuper(BinaryBuilder);\n  function BinaryBuilder(opts) {\n    var _this;\n    _classCallCheck(this, BinaryBuilder);\n    _this = _super.call(this, opts);\n    _this._values = new BufferBuilder(new Uint8Array(0));\n    return _this;\n  }\n  _createClass(BinaryBuilder, [{\n    key: \"byteLength\",\n    get: function get() {\n      var size = this._pendingLength + this.length * 4;\n      this._offsets && (size += this._offsets.byteLength);\n      this._values && (size += this._values.byteLength);\n      this._nulls && (size += this._nulls.byteLength);\n      return size;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      return _get(_getPrototypeOf(BinaryBuilder.prototype), \"setValue\", this).call(this, index, toUint8Array(value));\n    }\n  }, {\n    key: \"_flushPending\",\n    value: function _flushPending(pending, pendingLength) {\n      var offsets = this._offsets;\n      var data = this._values.reserve(pendingLength).buffer;\n      var index = 0,\n        length = 0,\n        offset = 0,\n        value;\n      var _iterator = _createForOfIteratorHelper(pending),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2);\n          index = _step$value[0];\n          value = _step$value[1];\n          if (value === undefined) {\n            offsets.set(index, 0);\n          } else {\n            length = value.length;\n            data.set(value, offset);\n            offsets.set(index, length);\n            offset += length;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n  return BinaryBuilder;\n}(VariableWidthBuilder);","map":{"version":3,"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,aAAa,QAAQ,UAAU;AACxC,SAASC,oBAAoB,QAAwB,YAAY;AAEjE;AACA,WAAaC,aAA2B;EAAA;EAAA;EACpC,uBAAYC,IAAmC;IAAA;IAAA;IAC3C,0BAAMA,IAAI;IACV,MAAKC,OAAO,GAAG,IAAIJ,aAAa,CAAC,IAAIK,UAAU,CAAC,CAAC,CAAC,CAAC;IAAC;EACxD;EAAC;IAAA;IAAA,KACD,eAAqB;MACjB,IAAIC,IAAI,GAAG,IAAI,CAACC,cAAc,GAAI,IAAI,CAACC,MAAM,GAAG,CAAE;MAClD,IAAI,CAACC,QAAQ,KAAKH,IAAI,IAAI,IAAI,CAACG,QAAQ,CAACC,UAAU,CAAC;MACnD,IAAI,CAACN,OAAO,KAAKE,IAAI,IAAI,IAAI,CAACF,OAAO,CAACM,UAAU,CAAC;MACjD,IAAI,CAACC,MAAM,KAAKL,IAAI,IAAI,IAAI,CAACK,MAAM,CAACD,UAAU,CAAC;MAC/C,OAAOJ,IAAI;IACf;EAAC;IAAA;IAAA,OACM,kBAASM,KAAa,EAAEC,KAAiB;MAC5C,mFAAsBD,KAAK,EAAEb,YAAY,CAACc,KAAK,CAAC;IACpD;EAAC;IAAA;IAAA,OACS,uBAAcC,OAA4C,EAAEC,aAAqB;MACvF,IAAMC,OAAO,GAAG,IAAI,CAACP,QAAQ;MAC7B,IAAMQ,IAAI,GAAG,IAAI,CAACb,OAAO,CAACc,OAAO,CAACH,aAAa,CAAC,CAACI,MAAM;MACvD,IAAIP,KAAK,GAAG,CAAC;QAAEJ,MAAM,GAAG,CAAC;QAAEY,MAAM,GAAG,CAAC;QAAEP,KAA6B;MAAC,2CAC9CC,OAAO;QAAA;MAAA;QAA9B,oDAAgC;UAAA;UAA1BF,KAAK;UAAEC,KAAK;UACd,IAAIA,KAAK,KAAKQ,SAAS,EAAE;YACrBL,OAAO,CAACM,GAAG,CAACV,KAAK,EAAE,CAAC,CAAC;WACxB,MAAM;YACHJ,MAAM,GAAGK,KAAK,CAACL,MAAM;YACrBS,IAAI,CAACK,GAAG,CAACT,KAAK,EAAEO,MAAM,CAAC;YACvBJ,OAAO,CAACM,GAAG,CAACV,KAAK,EAAEJ,MAAM,CAAC;YAC1BY,MAAM,IAAIZ,MAAM;;;MAEvB;QAAA;MAAA;QAAA;MAAA;IACL;EAAC;EAAA;AAAA,EA7B2CP,oBAAmC","names":["toUint8Array","BufferBuilder","VariableWidthBuilder","BinaryBuilder","opts","_values","Uint8Array","size","_pendingLength","length","_offsets","byteLength","_nulls","index","value","pending","pendingLength","offsets","data","reserve","buffer","offset","undefined","set"],"sources":["builder/binary.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}