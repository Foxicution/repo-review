{"ast":null,"code":"import _toConsumableArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\n/** @ignore */\nexport var SetVisitor = /*#__PURE__*/function (_Visitor) {\n  _inherits(SetVisitor, _Visitor);\n  var _super = _createSuper(SetVisitor);\n  function SetVisitor() {\n    _classCallCheck(this, SetVisitor);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(SetVisitor);\n}(Visitor);\n/** @ignore */\nvar setEpochMsToDays = function setEpochMsToDays(data, index, epochMs) {\n  data[index] = epochMs / 86400000 | 0;\n};\n/** @ignore */\nvar setEpochMsToMillisecondsLong = function setEpochMsToMillisecondsLong(data, index, epochMs) {\n  data[index] = epochMs % 4294967296 | 0;\n  data[index + 1] = epochMs / 4294967296 | 0;\n};\n/** @ignore */\nvar setEpochMsToMicrosecondsLong = function setEpochMsToMicrosecondsLong(data, index, epochMs) {\n  data[index] = epochMs * 1000 % 4294967296 | 0;\n  data[index + 1] = epochMs * 1000 / 4294967296 | 0;\n};\n/** @ignore */\nvar setEpochMsToNanosecondsLong = function setEpochMsToNanosecondsLong(data, index, epochMs) {\n  data[index] = epochMs * 1000000 % 4294967296 | 0;\n  data[index + 1] = epochMs * 1000000 / 4294967296 | 0;\n};\n/** @ignore */\nvar setVariableWidthBytes = function setVariableWidthBytes(values, valueOffsets, index, value) {\n  var x = valueOffsets[index],\n    y = valueOffsets[index + 1];\n  if (x != null && y != null) {\n    values.set(value.subarray(0, y - x), x);\n  }\n};\n/** @ignore */\nvar setBool = function setBool(_ref, index, val) {\n  var offset = _ref.offset,\n    values = _ref.values;\n  var idx = offset + index;\n  val ? values[idx >> 3] |= 1 << idx % 8 // true\n  : values[idx >> 3] &= ~(1 << idx % 8); // false\n};\n/** @ignore */\nvar setDateDay = function setDateDay(_ref2, index, value) {\n  var values = _ref2.values;\n  setEpochMsToDays(values, index, value.valueOf());\n};\n/** @ignore */\nvar setDateMillisecond = function setDateMillisecond(_ref3, index, value) {\n  var values = _ref3.values;\n  setEpochMsToMillisecondsLong(values, index * 2, value.valueOf());\n};\n/** @ignore */\nvar setNumeric = function setNumeric(_ref4, index, value) {\n  var stride = _ref4.stride,\n    values = _ref4.values;\n  values[stride * index] = value;\n};\n/** @ignore */\nvar setFloat16 = function setFloat16(_ref5, index, value) {\n  var stride = _ref5.stride,\n    values = _ref5.values;\n  values[stride * index] = float64ToUint16(value);\n};\n/** @ignore */\nvar setNumericX2 = function setNumericX2(vector, index, value) {\n  switch (typeof value) {\n    case 'bigint':\n      vector.values64[index] = value;\n      break;\n    case 'number':\n      vector.values[index * vector.stride] = value;\n      break;\n    default:\n      var val = value;\n      var stride = vector.stride,\n        ArrayType = vector.ArrayType;\n      var long = toArrayBufferView(ArrayType, val);\n      vector.values.set(long.subarray(0, stride), stride * index);\n  }\n};\n/** @ignore */\nvar setFixedSizeBinary = function setFixedSizeBinary(_ref6, index, value) {\n  var stride = _ref6.stride,\n    values = _ref6.values;\n  values.set(value.subarray(0, stride), stride * index);\n};\n/** @ignore */\nvar setBinary = function setBinary(_ref7, index, value) {\n  var values = _ref7.values,\n    valueOffsets = _ref7.valueOffsets;\n  return setVariableWidthBytes(values, valueOffsets, index, value);\n};\n/** @ignore */\nvar setUtf8 = function setUtf8(_ref8, index, value) {\n  var values = _ref8.values,\n    valueOffsets = _ref8.valueOffsets;\n  setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n/* istanbul ignore next */\n/** @ignore */\nvar setInt = function setInt(vector, index, value) {\n  vector.type.bitWidth < 64 ? setNumeric(vector, index, value) : setNumericX2(vector, index, value);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar setFloat = function setFloat(vector, index, value) {\n  vector.type.precision !== Precision.HALF ? setNumeric(vector, index, value) : setFloat16(vector, index, value);\n};\n/* istanbul ignore next */\nvar setDate = function setDate(vector, index, value) {\n  vector.type.unit === DateUnit.DAY ? setDateDay(vector, index, value) : setDateMillisecond(vector, index, value);\n};\n/** @ignore */\nvar setTimestampSecond = function setTimestampSecond(_ref9, index, value) {\n  var values = _ref9.values;\n  return setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n};\n/** @ignore */\nvar setTimestampMillisecond = function setTimestampMillisecond(_ref10, index, value) {\n  var values = _ref10.values;\n  return setEpochMsToMillisecondsLong(values, index * 2, value);\n};\n/** @ignore */\nvar setTimestampMicrosecond = function setTimestampMicrosecond(_ref11, index, value) {\n  var values = _ref11.values;\n  return setEpochMsToMicrosecondsLong(values, index * 2, value);\n};\n/** @ignore */\nvar setTimestampNanosecond = function setTimestampNanosecond(_ref12, index, value) {\n  var values = _ref12.values;\n  return setEpochMsToNanosecondsLong(values, index * 2, value);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar setTimestamp = function setTimestamp(vector, index, value) {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimestampSecond(vector, index, value);\n    case TimeUnit.MILLISECOND:\n      return setTimestampMillisecond(vector, index, value);\n    case TimeUnit.MICROSECOND:\n      return setTimestampMicrosecond(vector, index, value);\n    case TimeUnit.NANOSECOND:\n      return setTimestampNanosecond(vector, index, value);\n  }\n};\n/** @ignore */\nvar setTimeSecond = function setTimeSecond(_ref13, index, value) {\n  var values = _ref13.values,\n    stride = _ref13.stride;\n  values[stride * index] = value;\n};\n/** @ignore */\nvar setTimeMillisecond = function setTimeMillisecond(_ref14, index, value) {\n  var values = _ref14.values,\n    stride = _ref14.stride;\n  values[stride * index] = value;\n};\n/** @ignore */\nvar setTimeMicrosecond = function setTimeMicrosecond(_ref15, index, value) {\n  var values = _ref15.values;\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/** @ignore */\nvar setTimeNanosecond = function setTimeNanosecond(_ref16, index, value) {\n  var values = _ref16.values;\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar setTime = function setTime(vector, index, value) {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimeSecond(vector, index, value);\n    case TimeUnit.MILLISECOND:\n      return setTimeMillisecond(vector, index, value);\n    case TimeUnit.MICROSECOND:\n      return setTimeMicrosecond(vector, index, value);\n    case TimeUnit.NANOSECOND:\n      return setTimeNanosecond(vector, index, value);\n  }\n};\n/** @ignore */\nvar setDecimal = function setDecimal(_ref17, index, value) {\n  var values = _ref17.values;\n  values.set(value.subarray(0, 4), 4 * index);\n};\n/** @ignore */\nvar setList = function setList(vector, index, value) {\n  var values = vector.getChildAt(0),\n    valueOffsets = vector.valueOffsets;\n  for (var idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n    values.set(itr++, value.get(++idx));\n  }\n};\n/** @ignore */\nvar setMap = function setMap(vector, index, value) {\n  var values = vector.getChildAt(0),\n    valueOffsets = vector.valueOffsets;\n  var entries = value instanceof Map ? _toConsumableArray(value) : Object.entries(value);\n  for (var idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n    values.set(itr++, entries[++idx]);\n  }\n};\n/** @ignore */\nvar _setStructArrayValue = function _setStructArrayValue(o, v) {\n  return function (c, _, i) {\n    return c && c.set(o, v[i]);\n  };\n};\n/** @ignore */\nvar _setStructVectorValue = function _setStructVectorValue(o, v) {\n  return function (c, _, i) {\n    return c && c.set(o, v.get(i));\n  };\n};\n/** @ignore */\nvar _setStructMapValue = function _setStructMapValue(o, v) {\n  return function (c, f, _) {\n    return c && c.set(o, v.get(f.name));\n  };\n};\n/** @ignore */\nvar _setStructObjectValue = function _setStructObjectValue(o, v) {\n  return function (c, f, _) {\n    return c && c.set(o, v[f.name]);\n  };\n};\n/** @ignore */\nvar setStruct = function setStruct(vector, index, value) {\n  var setValue = value instanceof Map ? _setStructMapValue(index, value) : value instanceof Vector ? _setStructVectorValue(index, value) : Array.isArray(value) ? _setStructArrayValue(index, value) : _setStructObjectValue(index, value);\n  vector.type.children.forEach(function (f, i) {\n    return setValue(vector.getChildAt(i), f, i);\n  });\n};\n/* istanbul ignore next */\n/** @ignore */\nvar setUnion = function setUnion(vector, index, value) {\n  vector.type.mode === UnionMode.Dense ? setDenseUnion(vector, index, value) : setSparseUnion(vector, index, value);\n};\n/** @ignore */\nvar setDenseUnion = function setDenseUnion(vector, index, value) {\n  var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  var child = vector.getChildAt(childIndex);\n  child && child.set(vector.valueOffsets[index], value);\n};\n/** @ignore */\nvar setSparseUnion = function setSparseUnion(vector, index, value) {\n  var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  var child = vector.getChildAt(childIndex);\n  child && child.set(index, value);\n};\n/** @ignore */\nvar setDictionary = function setDictionary(vector, index, value) {\n  var key = vector.getKey(index);\n  if (key !== null) {\n    vector.setValue(key, value);\n  }\n};\n/* istanbul ignore next */\n/** @ignore */\nvar setIntervalValue = function setIntervalValue(vector, index, value) {\n  vector.type.unit === IntervalUnit.DAY_TIME ? setIntervalDayTime(vector, index, value) : setIntervalYearMonth(vector, index, value);\n};\n/** @ignore */\nvar setIntervalDayTime = function setIntervalDayTime(_ref18, index, value) {\n  var values = _ref18.values;\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/** @ignore */\nvar setIntervalYearMonth = function setIntervalYearMonth(_ref19, index, value) {\n  var values = _ref19.values;\n  values[index] = value[0] * 12 + value[1] % 12;\n};\n/** @ignore */\nvar setFixedSizeList = function setFixedSizeList(vector, index, value) {\n  var child = vector.getChildAt(0),\n    stride = vector.stride;\n  for (var idx = -1, offset = index * stride; ++idx < stride;) {\n    child.set(offset + idx, value.get(idx));\n  }\n};\nSetVisitor.prototype.visitBool = setBool;\nSetVisitor.prototype.visitInt = setInt;\nSetVisitor.prototype.visitInt8 = setNumeric;\nSetVisitor.prototype.visitInt16 = setNumeric;\nSetVisitor.prototype.visitInt32 = setNumeric;\nSetVisitor.prototype.visitInt64 = setNumericX2;\nSetVisitor.prototype.visitUint8 = setNumeric;\nSetVisitor.prototype.visitUint16 = setNumeric;\nSetVisitor.prototype.visitUint32 = setNumeric;\nSetVisitor.prototype.visitUint64 = setNumericX2;\nSetVisitor.prototype.visitFloat = setFloat;\nSetVisitor.prototype.visitFloat16 = setFloat16;\nSetVisitor.prototype.visitFloat32 = setNumeric;\nSetVisitor.prototype.visitFloat64 = setNumeric;\nSetVisitor.prototype.visitUtf8 = setUtf8;\nSetVisitor.prototype.visitBinary = setBinary;\nSetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;\nSetVisitor.prototype.visitDate = setDate;\nSetVisitor.prototype.visitDateDay = setDateDay;\nSetVisitor.prototype.visitDateMillisecond = setDateMillisecond;\nSetVisitor.prototype.visitTimestamp = setTimestamp;\nSetVisitor.prototype.visitTimestampSecond = setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;\nSetVisitor.prototype.visitTime = setTime;\nSetVisitor.prototype.visitTimeSecond = setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;\nSetVisitor.prototype.visitDecimal = setDecimal;\nSetVisitor.prototype.visitList = setList;\nSetVisitor.prototype.visitStruct = setStruct;\nSetVisitor.prototype.visitUnion = setUnion;\nSetVisitor.prototype.visitDenseUnion = setDenseUnion;\nSetVisitor.prototype.visitSparseUnion = setSparseUnion;\nSetVisitor.prototype.visitDictionary = setDictionary;\nSetVisitor.prototype.visitInterval = setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList = setFixedSizeList;\nSetVisitor.prototype.visitMap = setMap;\n/** @ignore */\nexport var instance = new SetVisitor();","map":{"version":3,"mappings":"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","names":["Vector","Visitor","encodeUtf8","float64ToUint16","toArrayBufferView","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","SetVisitor","setEpochMsToDays","data","index","epochMs","setEpochMsToMillisecondsLong","setEpochMsToMicrosecondsLong","setEpochMsToNanosecondsLong","setVariableWidthBytes","values","valueOffsets","value","x","y","set","subarray","setBool","val","offset","idx","setDateDay","valueOf","setDateMillisecond","setNumeric","stride","setFloat16","setNumericX2","vector","values64","ArrayType","long","setFixedSizeBinary","setBinary","setUtf8","setInt","type","bitWidth","setFloat","precision","HALF","setDate","unit","DAY","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setTimestampNanosecond","setTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setTime","setDecimal","setList","getChildAt","itr","end","get","setMap","entries","Map","Object","_setStructArrayValue","o","v","c","_","i","_setStructVectorValue","_setStructMapValue","f","name","_setStructObjectValue","setStruct","setValue","Array","isArray","children","forEach","setUnion","mode","Dense","setDenseUnion","setSparseUnion","childIndex","typeIdToChildIndex","typeIds","child","setDictionary","key","getKey","setIntervalValue","DAY_TIME","setIntervalDayTime","setIntervalYearMonth","setFixedSizeList","prototype","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap","instance"],"sources":["visitor/set.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n"]},"metadata":{},"sourceType":"module"}