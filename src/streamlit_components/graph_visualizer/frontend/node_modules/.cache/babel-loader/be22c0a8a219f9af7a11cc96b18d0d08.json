{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\n/** @ignore */\nexport class VectorLoader extends Visitor {\n  constructor(bytes, nodes, buffers, dictionaries) {\n    super();\n    this.nodesIndex = -1;\n    this.buffersIndex = -1;\n    this.bytes = bytes;\n    this.nodes = nodes;\n    this.buffers = buffers;\n    this.dictionaries = dictionaries;\n  }\n  visit(node) {\n    return super.visit(node instanceof Field ? node.type : node);\n  }\n  visitNull(type) {\n    let {\n      length\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Null(type, 0, length);\n  }\n  visitBool(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitInt(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitFloat(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitUtf8(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n  }\n  visitBinary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n  }\n  visitFixedSizeBinary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitDate(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitTimestamp(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitTime(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitDecimal(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitList(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n  }\n  visitStruct(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));\n  }\n  visitUnion(type) {\n    return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);\n  }\n  visitDenseUnion(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children));\n  }\n  visitSparseUnion(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));\n  }\n  visitDictionary(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));\n  }\n  visitInterval(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n  }\n  visitFixedSizeList(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));\n  }\n  visitMap(type) {\n    let {\n      length,\n      nullCount\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode();\n    return Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n  }\n  nextFieldNode() {\n    return this.nodes[++this.nodesIndex];\n  }\n  nextBufferRange() {\n    return this.buffers[++this.buffersIndex];\n  }\n  readNullBitmap(type, nullCount) {\n    let buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n    return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n  }\n  readOffsets(type, buffer) {\n    return this.readData(type, buffer);\n  }\n  readTypeIds(type, buffer) {\n    return this.readData(type, buffer);\n  }\n  readData(_type) {\n    let {\n      length,\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return this.bytes.subarray(offset, offset + length);\n  }\n  readDictionary(type) {\n    return this.dictionaries.get(type.id);\n  }\n}\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n  constructor(sources, nodes, buffers, dictionaries) {\n    super(new Uint8Array(0), nodes, buffers, dictionaries);\n    this.sources = sources;\n  }\n  readNullBitmap(_type, nullCount) {\n    let {\n      offset\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n    return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n  }\n  readOffsets(_type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n  }\n  readTypeIds(type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n  }\n  readData(type) {\n    let {\n      offset\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange();\n    const {\n      sources\n    } = this;\n    if (DataType.isTimestamp(type)) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n      return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n    } else if (DataType.isDecimal(type)) {\n      return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n    } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n      return binaryDataFromJSON(sources[offset]);\n    } else if (DataType.isBool(type)) {\n      return packBools(sources[offset]);\n    } else if (DataType.isUtf8(type)) {\n      return encodeUtf8(sources[offset].join(''));\n    }\n    return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map(x => +x)));\n  }\n}\n/** @ignore */\nfunction binaryDataFromJSON(values) {\n  // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n  // There are definitely more efficient ways to do this... but it gets the\n  // job done.\n  const joined = values.join('');\n  const data = new Uint8Array(joined.length / 2);\n  for (let i = 0; i < joined.length; i += 2) {\n    data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n  }\n  return data;\n}","map":{"version":3,"mappings":"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","names":["Data","Field","DataType","Visitor","packBools","encodeUtf8","Int64","Int128","UnionMode","DateUnit","toArrayBufferView","VectorLoader","constructor","bytes","nodes","buffers","dictionaries","visit","node","type","visitNull","length","nextFieldNode","Null","visitBool","nullCount","Bool","readNullBitmap","readData","visitInt","Int","visitFloat","Float","visitUtf8","Utf8","readOffsets","visitBinary","Binary","visitFixedSizeBinary","FixedSizeBinary","visitDate","Date","visitTimestamp","Timestamp","visitTime","Time","visitDecimal","Decimal","visitList","List","children","visitStruct","Struct","visitMany","visitUnion","mode","Sparse","visitSparseUnion","visitDenseUnion","Union","readTypeIds","visitDictionary","Dictionary","indices","readDictionary","visitInterval","Interval","visitFixedSizeList","FixedSizeList","visitMap","Map","nodesIndex","nextBufferRange","buffersIndex","buffer","Uint8Array","_type","offset","subarray","get","id","JSONVectorLoader","sources","Int32Array","ArrayType","isTimestamp","convertArray","isInt","isTime","bitWidth","isDate","unit","MILLISECOND","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","join","map","x","values","joined","data","i","parseInt","substr"],"sources":["visitor/vectorloader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n"]},"metadata":{},"sourceType":"module"}