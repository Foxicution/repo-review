{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType } from './type';\nexport class Visitor {\n  visitMany(nodes) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return nodes.map((node, i) => this.visit(node, ...args.map(x => x[i])));\n  }\n  visit() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return this.getVisitFn(args[0], false).apply(this, args);\n  }\n  getVisitFn(node) {\n    let throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return getVisitFn(this, node, throwIfNotFound);\n  }\n  visitNull(_node) {\n    return null;\n  }\n  visitBool(_node) {\n    return null;\n  }\n  visitInt(_node) {\n    return null;\n  }\n  visitFloat(_node) {\n    return null;\n  }\n  visitUtf8(_node) {\n    return null;\n  }\n  visitBinary(_node) {\n    return null;\n  }\n  visitFixedSizeBinary(_node) {\n    return null;\n  }\n  visitDate(_node) {\n    return null;\n  }\n  visitTimestamp(_node) {\n    return null;\n  }\n  visitTime(_node) {\n    return null;\n  }\n  visitDecimal(_node) {\n    return null;\n  }\n  visitList(_node) {\n    return null;\n  }\n  visitStruct(_node) {\n    return null;\n  }\n  visitUnion(_node) {\n    return null;\n  }\n  visitDictionary(_node) {\n    return null;\n  }\n  visitInterval(_node) {\n    return null;\n  }\n  visitFixedSizeList(_node) {\n    return null;\n  }\n  visitMap(_node) {\n    return null;\n  }\n}\n/** @ignore */\nfunction getVisitFn(visitor, node) {\n  let throwIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let fn = null;\n  let dtype = Type.NONE;\n  // tslint:disable\n  if (node instanceof Data) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof Vector) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof DataType) {\n    dtype = inferDType(node);\n  } else if (typeof (dtype = node) !== 'number') {\n    dtype = Type[node];\n  }\n  switch (dtype) {\n    case Type.Null:\n      fn = visitor.visitNull;\n      break;\n    case Type.Bool:\n      fn = visitor.visitBool;\n      break;\n    case Type.Int:\n      fn = visitor.visitInt;\n      break;\n    case Type.Int8:\n      fn = visitor.visitInt8 || visitor.visitInt;\n      break;\n    case Type.Int16:\n      fn = visitor.visitInt16 || visitor.visitInt;\n      break;\n    case Type.Int32:\n      fn = visitor.visitInt32 || visitor.visitInt;\n      break;\n    case Type.Int64:\n      fn = visitor.visitInt64 || visitor.visitInt;\n      break;\n    case Type.Uint8:\n      fn = visitor.visitUint8 || visitor.visitInt;\n      break;\n    case Type.Uint16:\n      fn = visitor.visitUint16 || visitor.visitInt;\n      break;\n    case Type.Uint32:\n      fn = visitor.visitUint32 || visitor.visitInt;\n      break;\n    case Type.Uint64:\n      fn = visitor.visitUint64 || visitor.visitInt;\n      break;\n    case Type.Float:\n      fn = visitor.visitFloat;\n      break;\n    case Type.Float16:\n      fn = visitor.visitFloat16 || visitor.visitFloat;\n      break;\n    case Type.Float32:\n      fn = visitor.visitFloat32 || visitor.visitFloat;\n      break;\n    case Type.Float64:\n      fn = visitor.visitFloat64 || visitor.visitFloat;\n      break;\n    case Type.Utf8:\n      fn = visitor.visitUtf8;\n      break;\n    case Type.Binary:\n      fn = visitor.visitBinary;\n      break;\n    case Type.FixedSizeBinary:\n      fn = visitor.visitFixedSizeBinary;\n      break;\n    case Type.Date:\n      fn = visitor.visitDate;\n      break;\n    case Type.DateDay:\n      fn = visitor.visitDateDay || visitor.visitDate;\n      break;\n    case Type.DateMillisecond:\n      fn = visitor.visitDateMillisecond || visitor.visitDate;\n      break;\n    case Type.Timestamp:\n      fn = visitor.visitTimestamp;\n      break;\n    case Type.TimestampSecond:\n      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMillisecond:\n      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMicrosecond:\n      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampNanosecond:\n      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n      break;\n    case Type.Time:\n      fn = visitor.visitTime;\n      break;\n    case Type.TimeSecond:\n      fn = visitor.visitTimeSecond || visitor.visitTime;\n      break;\n    case Type.TimeMillisecond:\n      fn = visitor.visitTimeMillisecond || visitor.visitTime;\n      break;\n    case Type.TimeMicrosecond:\n      fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n      break;\n    case Type.TimeNanosecond:\n      fn = visitor.visitTimeNanosecond || visitor.visitTime;\n      break;\n    case Type.Decimal:\n      fn = visitor.visitDecimal;\n      break;\n    case Type.List:\n      fn = visitor.visitList;\n      break;\n    case Type.Struct:\n      fn = visitor.visitStruct;\n      break;\n    case Type.Union:\n      fn = visitor.visitUnion;\n      break;\n    case Type.DenseUnion:\n      fn = visitor.visitDenseUnion || visitor.visitUnion;\n      break;\n    case Type.SparseUnion:\n      fn = visitor.visitSparseUnion || visitor.visitUnion;\n      break;\n    case Type.Dictionary:\n      fn = visitor.visitDictionary;\n      break;\n    case Type.Interval:\n      fn = visitor.visitInterval;\n      break;\n    case Type.IntervalDayTime:\n      fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n      break;\n    case Type.IntervalYearMonth:\n      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n      break;\n    case Type.FixedSizeList:\n      fn = visitor.visitFixedSizeList;\n      break;\n    case Type.Map:\n      fn = visitor.visitMap;\n      break;\n  }\n  if (typeof fn === 'function') return fn;\n  if (!throwIfNotFound) return () => null;\n  throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n/** @ignore */\nfunction inferDType(type) {\n  switch (type.typeId) {\n    case Type.Null:\n      return Type.Null;\n    case Type.Int:\n      const {\n        bitWidth,\n        isSigned\n      } = type;\n      switch (bitWidth) {\n        case 8:\n          return isSigned ? Type.Int8 : Type.Uint8;\n        case 16:\n          return isSigned ? Type.Int16 : Type.Uint16;\n        case 32:\n          return isSigned ? Type.Int32 : Type.Uint32;\n        case 64:\n          return isSigned ? Type.Int64 : Type.Uint64;\n      }\n      return Type.Int;\n    case Type.Float:\n      switch (type.precision) {\n        case Precision.HALF:\n          return Type.Float16;\n        case Precision.SINGLE:\n          return Type.Float32;\n        case Precision.DOUBLE:\n          return Type.Float64;\n      }\n      return Type.Float;\n    case Type.Binary:\n      return Type.Binary;\n    case Type.Utf8:\n      return Type.Utf8;\n    case Type.Bool:\n      return Type.Bool;\n    case Type.Decimal:\n      return Type.Decimal;\n    case Type.Time:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimeSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimeMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimeMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimeNanosecond;\n      }\n      return Type.Time;\n    case Type.Timestamp:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimestampSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimestampMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimestampMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimestampNanosecond;\n      }\n      return Type.Timestamp;\n    case Type.Date:\n      switch (type.unit) {\n        case DateUnit.DAY:\n          return Type.DateDay;\n        case DateUnit.MILLISECOND:\n          return Type.DateMillisecond;\n      }\n      return Type.Date;\n    case Type.Interval:\n      switch (type.unit) {\n        case IntervalUnit.DAY_TIME:\n          return Type.IntervalDayTime;\n        case IntervalUnit.YEAR_MONTH:\n          return Type.IntervalYearMonth;\n      }\n      return Type.Interval;\n    case Type.Map:\n      return Type.Map;\n    case Type.List:\n      return Type.List;\n    case Type.Struct:\n      return Type.Struct;\n    case Type.Union:\n      switch (type.mode) {\n        case UnionMode.Dense:\n          return Type.DenseUnion;\n        case UnionMode.Sparse:\n          return Type.SparseUnion;\n      }\n      return Type.Union;\n    case Type.FixedSizeBinary:\n      return Type.FixedSizeBinary;\n    case Type.FixedSizeList:\n      return Type.FixedSizeList;\n    case Type.Dictionary:\n      return Type.Dictionary;\n  }\n  throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;","map":{"version":3,"mappings":"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","names":["Data","Vector","Type","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","DataType","Visitor","visitMany","nodes","args","map","node","i","visit","x","getVisitFn","apply","throwIfNotFound","visitNull","_node","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitFixedSizeList","visitMap","visitor","fn","dtype","NONE","inferDType","type","Null","Bool","Int","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","Utf8","Binary","FixedSizeBinary","Date","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","Timestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","Time","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","Decimal","List","Struct","Union","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","Interval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","FixedSizeList","Map","Error","typeId","bitWidth","isSigned","precision","HALF","SINGLE","DOUBLE","unit","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","DAY","DAY_TIME","YEAR_MONTH","mode","Dense","Sparse","prototype"],"sources":["visitor.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n"]},"metadata":{},"sourceType":"module"}