{"ast":null,"code":"var _jsxFileName = \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\n//import Graph from \"react-graph-vis\"\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }\n      }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        style: style,\n        onClick: this.onClicked,\n        disabled: this.props.disabled,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, \"Click Me!\"));\n    };\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n}\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\nclass GraphComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.render = () => {\n      const App = () => {\n        const createNode = (x, y) => {\n          const color = randomColor();\n          setState(_ref => {\n            let {\n              graph: {\n                nodes,\n                edges\n              },\n              counter,\n              ...rest\n            } = _ref;\n            const id = counter + 1;\n            const from = Math.floor(Math.random() * (counter - 1)) + 1;\n            return {\n              graph: {\n                nodes: [...nodes, {\n                  id,\n                  label: `Node ${id}`,\n                  color,\n                  x,\n                  y\n                }],\n                edges: [...edges, {\n                  from,\n                  to: id\n                }]\n              },\n              counter: id,\n              ...rest\n            };\n          });\n        };\n        const [state, setState] = useState({\n          counter: 5,\n          graph: {\n            nodes: [{\n              id: 1,\n              label: \"Node 1\",\n              color: \"#e04141\"\n            }, {\n              id: 2,\n              label: \"Node 2\",\n              color: \"#e09c41\"\n            }, {\n              id: 3,\n              label: \"Node 3\",\n              color: \"#e0df41\"\n            }, {\n              id: 4,\n              label: \"Node 4\",\n              color: \"#7be041\"\n            }, {\n              id: 5,\n              label: \"Node 5\",\n              color: \"#41e0c9\"\n            }],\n            edges: [{\n              from: 1,\n              to: 2\n            }, {\n              from: 1,\n              to: 3\n            }, {\n              from: 2,\n              to: 4\n            }, {\n              from: 2,\n              to: 5\n            }]\n          },\n          events: {\n            select: _ref2 => {\n              let {\n                nodes,\n                edges\n              } = _ref2;\n              console.log(\"Selected nodes:\");\n              console.log(nodes);\n              console.log(\"Selected edges:\");\n              console.log(edges);\n              alert(\"Selected node: \" + nodes);\n            },\n            doubleClick: _ref3 => {\n              let {\n                pointer: {\n                  canvas\n                }\n              } = _ref3;\n              createNode(canvas.x, canvas.y);\n            }\n          }\n        });\n        const {\n          graph,\n          events\n        } = state;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 7\n          }\n        }, \"React graph vis\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          href: \"https://github.com/crubier/react-graph-vis\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 9\n          }\n        }, \"Github\"), \" -\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n          href: \"https://www.npmjs.com/package/react-graph-vis\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 9\n          }\n        }, \"NPM\")), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          href: \"https://github.com/crubier/react-graph-vis/tree/master/example/src/index.js\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 10\n          }\n        }, \"Source of this page\")), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 7\n          }\n        }, \"A React component to display beautiful network graphs using vis.js\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 7\n          }\n        }, \"Make sure to visit \", /*#__PURE__*/React.createElement(\"a\", {\n          href: \"http://visjs.org\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }\n        }, \"visjs.org\"), \" for more info.\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 7\n          }\n        }, \"This package allows to render network graphs using vis.js.\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 7\n          }\n        }, \"Rendered graphs are scrollable, zoomable, retina ready, dynamic\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 7\n          }\n        }, \"In this example, we manage state with react: on double click we create a new node, and on select we display an alert.\"), /*#__PURE__*/React.createElement(Graph, {\n          graph: graph,\n          options: options,\n          events: events,\n          style: {\n            height: \"640px\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 7\n          }\n        }));\n      };\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(GraphComponent);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","MyComponent","state","numClicks","isFocused","render","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onClicked","disabled","_onFocus","_onBlur","setState","prevState","setComponentValue","randomColor","red","Math","floor","random","toString","padStart","green","blue","GraphComponent","App","createNode","x","y","color","graph","nodes","edges","counter","rest","id","from","label","to","useState","events","select","console","log","alert","doubleClick","pointer","canvas","options","height"],"sources":["/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n//import Graph from \"react-graph-vis\"\n\n\ndeclare module \"react-graph-vis\" {\n    import { Network, NetworkEvents, Options, Node, Edge, DataSet, Data } from \"vis\";\n    import { Component } from \"react\";\n\n    export { Network, NetworkEvents, Options, Node, Edge, DataSet, Data } from \"vis\";\n\n    export type GraphEvents = {\n        [event in NetworkEvents]?: (params?: any) => void;\n    };\n\n    export interface NetworkGraphProps {\n        graph: Data;\n        options?: Options;\n        events?: GraphEvents;\n        getNetwork?: (network: Network) => void;\n        identifier?: string;\n        style?: React.CSSProperties;\n        getNodes?: (nodes: DataSet<Node>) => void;\n        getEdges?: (edges: DataSet<Edge>) => void;\n    }\n\n    export interface NetworkGraphState {\n        identifier: string;\n    }\n\n    export default class NetworkGraph extends Component<\n        NetworkGraphProps,\n        NetworkGraphState\n        > {\n        render();\n    }\n}\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        Hello, {name}! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Click Me!\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nfunction randomColor() {\n  const red = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const green = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  const blue = Math.floor(Math.random() * 256).toString(16).padStart(2, '0');\n  return `#${red}${green}${blue}`;\n}\n\nclass GraphComponent extends StreamlitComponentBase<State> {\n\n  public render = (): ReactNode => {\n\nconst App = () => {\n  const createNode = (x, y) => {\n    const color = randomColor();\n    setState(({ graph: { nodes, edges }, counter, ...rest }) => {\n      const id = counter + 1;\n      const from = Math.floor(Math.random() * (counter - 1)) + 1;\n      return {\n        graph: {\n          nodes: [\n            ...nodes,\n            { id, label: `Node ${id}`, color, x, y }\n          ],\n          edges: [\n            ...edges,\n            { from, to: id }\n          ]\n        },\n        counter: id,\n        ...rest\n      }\n    });\n  }\n  const [state, setState] = useState({\n    counter: 5,\n    graph: {\n      nodes: [\n        { id: 1, label: \"Node 1\", color: \"#e04141\" },\n        { id: 2, label: \"Node 2\", color: \"#e09c41\" },\n        { id: 3, label: \"Node 3\", color: \"#e0df41\" },\n        { id: 4, label: \"Node 4\", color: \"#7be041\" },\n        { id: 5, label: \"Node 5\", color: \"#41e0c9\" }\n      ],\n      edges: [\n        { from: 1, to: 2 },\n        { from: 1, to: 3 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 }\n      ]\n    },\n    events: {\n      select: ({ nodes, edges }) => {\n        console.log(\"Selected nodes:\");\n        console.log(nodes);\n        console.log(\"Selected edges:\");\n        console.log(edges);\n        alert(\"Selected node: \" + nodes);\n      },\n      doubleClick: ({ pointer: { canvas } }) => {\n        createNode(canvas.x, canvas.y);\n      }\n    }\n  })\n  const { graph, events } = state;\n  return (\n    <div>\n      <h1>React graph vis</h1>\n      <p>\n        <a href=\"https://github.com/crubier/react-graph-vis\">Github</a> -{\" \"}\n        <a href=\"https://www.npmjs.com/package/react-graph-vis\">NPM</a>\n      </p>\n      <p><a href=\"https://github.com/crubier/react-graph-vis/tree/master/example/src/index.js\">Source of this page</a></p>\n      <p>A React component to display beautiful network graphs using vis.js</p>\n      <p>Make sure to visit <a href=\"http://visjs.org\">visjs.org</a> for more info.</p>\n      <p>This package allows to render network graphs using vis.js.</p>\n      <p>Rendered graphs are scrollable, zoomable, retina ready, dynamic</p>\n      <p>In this example, we manage state with react: on double click we create a new node, and on select we display an alert.</p>\n      <Graph graph={graph} options={options} events={events} style={{ height: \"640px\" }} />\n    </div>\n  );\n\n}\n}\n}\n\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(GraphComponent)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}