{"ast":null,"code":"import _toConsumableArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _inherits from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _asyncToGenerator from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ITERATOR_DONE } from '../io/interfaces';\n/** @ignore */\nvar invalidMessageType = function invalidMessageType(type) {\n  return \"Expected \".concat(MessageHeader[type], \" Message in stream, but was null or length 0.\");\n};\n/** @ignore */\nvar nullMessage = function nullMessage(type) {\n  return \"Header pointer of flatbuffer-encoded \".concat(MessageHeader[type], \" Message is null or length 0.\");\n};\n/** @ignore */\nvar invalidMessageMetadata = function invalidMessageMetadata(expected, actual) {\n  return \"Expected to read \".concat(expected, \" metadata bytes, but only read \").concat(actual, \".\");\n};\n/** @ignore */\nvar invalidMessageBodyLength = function invalidMessageBodyLength(expected, actual) {\n  return \"Expected to read \".concat(expected, \" bytes for message body, but only read \").concat(actual, \".\");\n};\n/** @ignore */\nexport var MessageReader = /*#__PURE__*/function (_Symbol$iterator) {\n  function MessageReader(source) {\n    _classCallCheck(this, MessageReader);\n    this.source = source instanceof ByteStream ? source : new ByteStream(source);\n  }\n  _createClass(MessageReader, [{\n    key: _Symbol$iterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var r;\n      if ((r = this.readMetadataLength()).done) {\n        return ITERATOR_DONE;\n      }\n      // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n      // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n      // pre-v0.15 message, where the first 4 bytes are the metadata length.\n      if (r.value === -1 && (r = this.readMetadataLength()).done) {\n        return ITERATOR_DONE;\n      }\n      if ((r = this.readMetadata(r.value)).done) {\n        return ITERATOR_DONE;\n      }\n      return r;\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      return this.source.throw(value);\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      return this.source.return(value);\n    }\n  }, {\n    key: \"readMessage\",\n    value: function readMessage(type) {\n      var r;\n      if ((r = this.next()).done) {\n        return null;\n      }\n      if (type != null && r.value.headerType !== type) {\n        throw new Error(invalidMessageType(type));\n      }\n      return r.value;\n    }\n  }, {\n    key: \"readMessageBody\",\n    value: function readMessageBody(bodyLength) {\n      if (bodyLength <= 0) {\n        return new Uint8Array(0);\n      }\n      var buf = toUint8Array(this.source.read(bodyLength));\n      if (buf.byteLength < bodyLength) {\n        throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n      }\n      // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n      // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n      return (/* 1. */buf.byteOffset % 8 === 0 && /* 2. */buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice()\n      );\n    }\n  }, {\n    key: \"readSchema\",\n    value: function readSchema() {\n      var throwIfNull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var type = MessageHeader.Schema;\n      var message = this.readMessage(type);\n      var schema = message && message.header();\n      if (throwIfNull && !schema) {\n        throw new Error(nullMessage(type));\n      }\n      return schema;\n    }\n  }, {\n    key: \"readMetadataLength\",\n    value: function readMetadataLength() {\n      var buf = this.source.read(PADDING);\n      var bb = buf && new ByteBuffer(buf);\n      var len = bb && bb.readInt32(0) || 0;\n      return {\n        done: len === 0,\n        value: len\n      };\n    }\n  }, {\n    key: \"readMetadata\",\n    value: function readMetadata(metadataLength) {\n      var buf = this.source.read(metadataLength);\n      if (!buf) {\n        return ITERATOR_DONE;\n      }\n      if (buf.byteLength < metadataLength) {\n        throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n      }\n      return {\n        done: false,\n        value: Message.decode(buf)\n      };\n    }\n  }]);\n  return MessageReader;\n}(Symbol.iterator);\n/** @ignore */\nexport var AsyncMessageReader = /*#__PURE__*/function (_Symbol$asyncIterator) {\n  function AsyncMessageReader(source, byteLength) {\n    _classCallCheck(this, AsyncMessageReader);\n    this.source = source instanceof AsyncByteStream ? source : isFileHandle(source) ? new AsyncRandomAccessFile(source, byteLength) : new AsyncByteStream(source);\n  }\n  _createClass(AsyncMessageReader, [{\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var r;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.readMetadataLength();\n              case 2:\n                if (!(r = _context.sent).done) {\n                  _context.next = 4;\n                  break;\n                }\n                return _context.abrupt(\"return\", ITERATOR_DONE);\n              case 4:\n                _context.t0 = r.value === -1;\n                if (!_context.t0) {\n                  _context.next = 9;\n                  break;\n                }\n                _context.next = 8;\n                return this.readMetadataLength();\n              case 8:\n                _context.t0 = (r = _context.sent).done;\n              case 9:\n                if (!_context.t0) {\n                  _context.next = 11;\n                  break;\n                }\n                return _context.abrupt(\"return\", ITERATOR_DONE);\n              case 11:\n                _context.next = 13;\n                return this.readMetadata(r.value);\n              case 13:\n                if (!(r = _context.sent).done) {\n                  _context.next = 15;\n                  break;\n                }\n                return _context.abrupt(\"return\", ITERATOR_DONE);\n              case 15:\n                return _context.abrupt(\"return\", r);\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function next() {\n        return _next.apply(this, arguments);\n      }\n      return next;\n    }()\n  }, {\n    key: \"throw\",\n    value: function () {\n      var _throw2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(value) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.source.throw(value);\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function _throw(_x) {\n        return _throw2.apply(this, arguments);\n      }\n      return _throw;\n    }()\n  }, {\n    key: \"return\",\n    value: function () {\n      var _return2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(value) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.source.return(value);\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function _return(_x2) {\n        return _return2.apply(this, arguments);\n      }\n      return _return;\n    }()\n  }, {\n    key: \"readMessage\",\n    value: function () {\n      var _readMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(type) {\n        var r;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.next();\n              case 2:\n                if (!(r = _context4.sent).done) {\n                  _context4.next = 4;\n                  break;\n                }\n                return _context4.abrupt(\"return\", null);\n              case 4:\n                if (!(type != null && r.value.headerType !== type)) {\n                  _context4.next = 6;\n                  break;\n                }\n                throw new Error(invalidMessageType(type));\n              case 6:\n                return _context4.abrupt(\"return\", r.value);\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function readMessage(_x3) {\n        return _readMessage.apply(this, arguments);\n      }\n      return readMessage;\n    }()\n  }, {\n    key: \"readMessageBody\",\n    value: function () {\n      var _readMessageBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(bodyLength) {\n        var buf;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(bodyLength <= 0)) {\n                  _context5.next = 2;\n                  break;\n                }\n                return _context5.abrupt(\"return\", new Uint8Array(0));\n              case 2:\n                _context5.t0 = toUint8Array;\n                _context5.next = 5;\n                return this.source.read(bodyLength);\n              case 5:\n                _context5.t1 = _context5.sent;\n                buf = (0, _context5.t0)(_context5.t1);\n                if (!(buf.byteLength < bodyLength)) {\n                  _context5.next = 9;\n                  break;\n                }\n                throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n              case 9:\n                return _context5.abrupt(\"return\", /* 1. */buf.byteOffset % 8 === 0 && /* 2. */buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice());\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function readMessageBody(_x4) {\n        return _readMessageBody.apply(this, arguments);\n      }\n      return readMessageBody;\n    }()\n  }, {\n    key: \"readSchema\",\n    value: function () {\n      var _readSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var throwIfNull,\n          type,\n          message,\n          schema,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                throwIfNull = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : false;\n                type = MessageHeader.Schema;\n                _context6.next = 4;\n                return this.readMessage(type);\n              case 4:\n                message = _context6.sent;\n                schema = message && message.header();\n                if (!(throwIfNull && !schema)) {\n                  _context6.next = 8;\n                  break;\n                }\n                throw new Error(nullMessage(type));\n              case 8:\n                return _context6.abrupt(\"return\", schema);\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function readSchema() {\n        return _readSchema.apply(this, arguments);\n      }\n      return readSchema;\n    }()\n  }, {\n    key: \"readMetadataLength\",\n    value: function () {\n      var _readMetadataLength = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var buf, bb, len;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.source.read(PADDING);\n              case 2:\n                buf = _context7.sent;\n                bb = buf && new ByteBuffer(buf);\n                len = bb && bb.readInt32(0) || 0;\n                return _context7.abrupt(\"return\", {\n                  done: len === 0,\n                  value: len\n                });\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function readMetadataLength() {\n        return _readMetadataLength.apply(this, arguments);\n      }\n      return readMetadataLength;\n    }()\n  }, {\n    key: \"readMetadata\",\n    value: function () {\n      var _readMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(metadataLength) {\n        var buf;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.source.read(metadataLength);\n              case 2:\n                buf = _context8.sent;\n                if (buf) {\n                  _context8.next = 5;\n                  break;\n                }\n                return _context8.abrupt(\"return\", ITERATOR_DONE);\n              case 5:\n                if (!(buf.byteLength < metadataLength)) {\n                  _context8.next = 7;\n                  break;\n                }\n                throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n              case 7:\n                return _context8.abrupt(\"return\", {\n                  done: false,\n                  value: Message.decode(buf)\n                });\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function readMetadata(_x5) {\n        return _readMetadata.apply(this, arguments);\n      }\n      return readMetadata;\n    }()\n  }]);\n  return AsyncMessageReader;\n}(Symbol.asyncIterator);\n/** @ignore */\nexport var JSONMessageReader = /*#__PURE__*/function (_MessageReader) {\n  _inherits(JSONMessageReader, _MessageReader);\n  var _super = _createSuper(JSONMessageReader);\n  function JSONMessageReader(source) {\n    var _this;\n    _classCallCheck(this, JSONMessageReader);\n    _this = _super.call(this, new Uint8Array(0));\n    _this._schema = false;\n    _this._body = [];\n    _this._batchIndex = 0;\n    _this._dictionaryIndex = 0;\n    _this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    return _this;\n  }\n  _createClass(JSONMessageReader, [{\n    key: \"next\",\n    value: function next() {\n      var _json = this._json;\n      if (!this._schema) {\n        this._schema = true;\n        var message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n        return {\n          done: false,\n          value: message\n        };\n      }\n      if (this._dictionaryIndex < _json.dictionaries.length) {\n        var batch = _json.dictionaries[this._dictionaryIndex++];\n        this._body = batch['data']['columns'];\n        var _message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n        return {\n          done: false,\n          value: _message\n        };\n      }\n      if (this._batchIndex < _json.batches.length) {\n        var _batch = _json.batches[this._batchIndex++];\n        this._body = _batch['columns'];\n        var _message2 = Message.fromJSON(_batch, MessageHeader.RecordBatch);\n        return {\n          done: false,\n          value: _message2\n        };\n      }\n      this._body = [];\n      return ITERATOR_DONE;\n    }\n  }, {\n    key: \"readMessageBody\",\n    value: function readMessageBody(_bodyLength) {\n      return flattenDataSources(this._body);\n      function flattenDataSources(xs) {\n        return (xs || []).reduce(function (buffers, column) {\n          return [].concat(_toConsumableArray(buffers), _toConsumableArray(column['VALIDITY'] && [column['VALIDITY']] || []), _toConsumableArray(column['TYPE'] && [column['TYPE']] || []), _toConsumableArray(column['OFFSET'] && [column['OFFSET']] || []), _toConsumableArray(column['DATA'] && [column['DATA']] || []), _toConsumableArray(flattenDataSources(column['children'])));\n        }, []);\n      }\n    }\n  }, {\n    key: \"readMessage\",\n    value: function readMessage(type) {\n      var r;\n      if ((r = this.next()).done) {\n        return null;\n      }\n      if (type != null && r.value.headerType !== type) {\n        throw new Error(invalidMessageType(type));\n      }\n      return r.value;\n    }\n  }, {\n    key: \"readSchema\",\n    value: function readSchema() {\n      var type = MessageHeader.Schema;\n      var message = this.readMessage(type);\n      var schema = message && message.header();\n      if (!message || !schema) {\n        throw new Error(nullMessage(type));\n      }\n      return schema;\n    }\n  }]);\n  return JSONMessageReader;\n}(MessageReader);\n/** @ignore */\nexport var PADDING = 4;\n/** @ignore */\nexport var MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport var MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (var i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n  MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n/** @ignore */\nexport function checkForMagicArrowString(buffer) {\n  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  for (var _i = -1, n = MAGIC.length; ++_i < n;) {\n    if (MAGIC[_i] !== buffer[index + _i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/** @ignore */\nexport var magicLength = MAGIC.length;\n/** @ignore */\nexport var magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport var magicX2AndPadding = magicLength * 2 + PADDING;","map":{"version":3,"mappings":"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","names":["MessageHeader","flatbuffers","ByteBuffer","Message","isFileHandle","AsyncRandomAccessFile","toUint8Array","ByteStream","AsyncByteStream","ArrowJSON","ITERATOR_DONE","invalidMessageType","type","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","MessageReader","source","r","readMetadataLength","done","value","readMetadata","throw","return","next","headerType","Error","bodyLength","Uint8Array","buf","read","byteLength","byteOffset","buffer","slice","throwIfNull","Schema","message","readMessage","schema","header","PADDING","bb","len","readInt32","metadataLength","decode","Symbol","iterator","AsyncMessageReader","asyncIterator","JSONMessageReader","_json","_schema","fromJSON","_dictionaryIndex","dictionaries","length","batch","_body","DictionaryBatch","_batchIndex","batches","RecordBatch","_bodyLength","flattenDataSources","xs","reduce","buffers","column","MAGIC_STR","MAGIC","i","charCodeAt","checkForMagicArrowString","index","n","magicLength","magicAndPadding","magicX2AndPadding"],"sources":["ipc/message.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n"]},"metadata":{},"sourceType":"module"}