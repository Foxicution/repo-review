{"ast":null,"code":"import _construct from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _slicedToArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { StructVector } from './vector/index';\nexport var RecordBatch = /*#__PURE__*/function (_StructVector) {\n  _inherits(RecordBatch, _StructVector);\n  var _super = _createSuper(RecordBatch);\n  function RecordBatch() {\n    var _this;\n    _classCallCheck(this, RecordBatch);\n    var data;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var schema = args[0];\n    var children;\n    if (args[1] instanceof Data) {\n      data = args[1];\n      children = args[2];\n    } else {\n      var fields = schema.fields;\n      var length = args[1],\n        childData = args[2];\n      data = Data.Struct(new Struct(fields), 0, length, 0, null, childData);\n    }\n    _this = _super.call(this, data, children);\n    _this._schema = schema;\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(RecordBatch, [{\n    key: \"clone\",\n    value: function clone(data) {\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._children;\n      return new RecordBatch(this._schema, data, children);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len2 = arguments.length, others = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        others[_key2] = arguments[_key2];\n      }\n      var schema = this._schema,\n        chunks = Chunked.flatten.apply(Chunked, [this].concat(others));\n      return new Table(schema, chunks.map(function (_ref) {\n        var data = _ref.data;\n        return new RecordBatch(schema, data);\n      }));\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this._schema;\n    }\n  }, {\n    key: \"numCols\",\n    get: function get() {\n      return this._schema.fields.length;\n    }\n  }, {\n    key: \"dictionaries\",\n    get: function get() {\n      return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      var nameToIndex = this._schema.fields.reduce(function (m, f, i) {\n        return m.set(f.name, i);\n      }, new Map());\n      for (var _len3 = arguments.length, columnNames = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        columnNames[_key3] = arguments[_key3];\n      }\n      return this.selectAt.apply(this, _toConsumableArray(columnNames.map(function (columnName) {\n        return nameToIndex.get(columnName);\n      }).filter(function (x) {\n        return x > -1;\n      })));\n    }\n  }, {\n    key: \"selectAt\",\n    value: function selectAt() {\n      var _this$_schema,\n        _this2 = this;\n      for (var _len4 = arguments.length, columnIndices = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        columnIndices[_key4] = arguments[_key4];\n      }\n      var schema = (_this$_schema = this._schema).selectAt.apply(_this$_schema, columnIndices);\n      var childData = columnIndices.map(function (i) {\n        return _this2.data.childData[i];\n      }).filter(Boolean);\n      return new RecordBatch(schema, this.length, childData);\n    }\n  }], [{\n    key: \"from\",\n    value: function from(options) {\n      if (isIterable(options['values'])) {\n        return Table.from(options);\n      }\n      return Table.from(options);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"new\",\n    value: function _new() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      var _selectFieldArgs = selectFieldArgs(args),\n        _selectFieldArgs2 = _slicedToArray(_selectFieldArgs, 2),\n        fs = _selectFieldArgs2[0],\n        xs = _selectFieldArgs2[1];\n      var vs = xs.filter(function (x) {\n        return x instanceof Vector;\n      });\n      return _construct(RecordBatch, _toConsumableArray(ensureSameLengthData(new Schema(fs), vs.map(function (x) {\n        return x.data;\n      }))));\n    }\n  }]);\n  return RecordBatch;\n}(StructVector);\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport var _InternalEmptyPlaceholderRecordBatch = /*#__PURE__*/function (_RecordBatch) {\n  _inherits(_InternalEmptyPlaceholderRecordBatch, _RecordBatch);\n  var _super2 = _createSuper(_InternalEmptyPlaceholderRecordBatch);\n  function _InternalEmptyPlaceholderRecordBatch(schema) {\n    _classCallCheck(this, _InternalEmptyPlaceholderRecordBatch);\n    return _super2.call(this, schema, 0, schema.fields.map(function (f) {\n      return Data.new(f.type, 0, 0, 0);\n    }));\n  }\n  return _createClass(_InternalEmptyPlaceholderRecordBatch);\n}(RecordBatch);\n/** @ignore */\nvar DictionaryCollector = /*#__PURE__*/function (_Visitor) {\n  _inherits(DictionaryCollector, _Visitor);\n  var _super3 = _createSuper(DictionaryCollector);\n  function DictionaryCollector() {\n    var _this3;\n    _classCallCheck(this, DictionaryCollector);\n    _this3 = _super3.apply(this, arguments);\n    _this3.dictionaries = new Map();\n    return _this3;\n  }\n  _createClass(DictionaryCollector, [{\n    key: \"visit\",\n    value: function visit(data, type) {\n      var _this4 = this;\n      if (DataType.isDictionary(type)) {\n        return this.visitDictionary(data, type);\n      } else {\n        data.childData.forEach(function (child, i) {\n          return _this4.visit(child, type.children[i].type);\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"visitDictionary\",\n    value: function visitDictionary(data, type) {\n      var dictionary = data.dictionary;\n      if (dictionary && dictionary.length > 0) {\n        this.dictionaries.set(type.id, dictionary);\n      }\n      return this;\n    }\n  }], [{\n    key: \"collect\",\n    value: function collect(batch) {\n      return new DictionaryCollector().visit(batch.data, new Struct(batch.schema.fields)).dictionaries;\n    }\n  }]);\n  return DictionaryCollector;\n}(Visitor);","map":{"version":3,"mappings":"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","names":["Data","Table","Vector","Visitor","Schema","isIterable","Chunked","selectFieldArgs","DataType","Struct","ensureSameLengthData","StructVector","RecordBatch","data","args","schema","children","fields","length","childData","_schema","_children","others","chunks","flatten","map","_dictionaries","DictionaryCollector","collect","nameToIndex","reduce","m","f","i","set","name","Map","columnNames","selectAt","columnName","get","filter","x","columnIndices","Boolean","options","from","fs","xs","vs","_InternalEmptyPlaceholderRecordBatch","new","type","isDictionary","visitDictionary","forEach","child","visit","dictionary","dictionaries","id","batch"],"sources":["recordbatch.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}