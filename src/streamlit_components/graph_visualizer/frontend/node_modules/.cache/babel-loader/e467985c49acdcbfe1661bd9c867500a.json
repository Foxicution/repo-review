{"ast":null,"code":"var _jsxFileName = \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useState } from \"react\";\nimport Graph from 'react-graph-vis';\nclass StreamlitVisGraph extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.render = () => {\n      const options = {\n        layout: {\n          hierarchical: false\n        },\n        edges: {\n          color: \"#000000\"\n        }\n      };\n      const [state, setState] = useState({\n        counter: 5,\n        graph: {\n          nodes: [{\n            id: 1,\n            label: \"Node 1\",\n            color: \"#e04141\"\n          }, {\n            id: 2,\n            label: \"Node 2\",\n            color: \"#e09c41\"\n          }, {\n            id: 3,\n            label: \"Node 3\",\n            color: \"#e0df41\"\n          }, {\n            id: 4,\n            label: \"Node 4\",\n            color: \"#7be041\"\n          }, {\n            id: 5,\n            label: \"Node 5\",\n            color: \"#41e0c9\"\n          }],\n          edges: [{\n            from: 1,\n            to: 2\n          }, {\n            from: 1,\n            to: 3\n          }, {\n            from: 2,\n            to: 4\n          }, {\n            from: 2,\n            to: 5\n          }]\n        },\n        events: {\n          select: _ref => {\n            let {\n              nodes,\n              edges\n            } = _ref;\n            console.log(\"Selected nodes:\");\n            console.log(nodes);\n            console.log(\"Selected edges:\");\n            console.log(edges);\n            alert(\"Selected node: \" + nodes);\n          }\n          // doubleClick: ({ pointer: { canvas } }) => {\n          //   createNode(canvas.x, canvas.y);\n          // }\n        }\n      });\n\n      const {\n        graph,\n        events\n      } = state;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }\n      }, \"React graph vis\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"https://github.com/crubier/react-graph-vis\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }\n      }, \"Github\"), \" -\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n        href: \"https://www.npmjs.com/package/react-graph-vis\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }\n      }, \"NPM\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"https://github.com/crubier/react-graph-vis/tree/master/example/src/index.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 12\n        }\n      }, \"Source of this page\")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }\n      }, \"A React component to display beautiful network graphs using vis.js\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 9\n        }\n      }, \"Make sure to visit \", /*#__PURE__*/React.createElement(\"a\", {\n        href: \"http://visjs.org\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 31\n        }\n      }, \"visjs.org\"), \" for more info.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }\n      }, \"This package allows to render network graphs using vis.js.\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }\n      }, \"Rendered graphs are scrollable, zoomable, retina ready, dynamic\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }\n      }, \"In this example, we manage state with react: on double click we create a new node, and on select we display an alert.\"), /*#__PURE__*/React.createElement(Graph, {\n        graph: graph,\n        options: options,\n        events: events,\n        style: {\n          height: \"640px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }\n      }));\n    };\n  }\n}\nexport default withStreamlitConnection(StreamlitVisGraph);","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","useState","Graph","StreamlitVisGraph","render","options","layout","hierarchical","edges","color","state","setState","counter","graph","nodes","id","label","from","to","events","select","console","log","alert","height"],"sources":["/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useState } from \"react\"\nimport { v4 as uuidv4 } from 'uuid'\nimport Graph from 'react-graph-vis';\n\n\ninterface State {\n  clicked: any\n}\n\nclass StreamlitVisGraph extends StreamlitComponentBase {\n\n  // public state = {clicked: 0}\n\n  // private graph = JSON.parse(this.props.args['data'])\n\n  // public render = (): ReactNode => {\n\n  //   function lookup_node_id(lookup_node: any, mynodes: any){\n  //     for (let node of mynodes){\n  //         if (node.id === lookup_node){\n  //             return node;\n  //         }\n  //   }}\n\n  //   const graph = this.graph\n  //   console.log(graph)\n  //   // var nodes = JSON.parse(this.props.args[\"nodes\"]);\n  //   // var edges = JSON.parse(this.props.args[\"edges\"]);\n  //   // var graph = {\n  //   //   \"nodes\": nodes,\n  //   //   \"edges\": edges\n  //   // }\n  //   // var graph = {\n  //   //   nodes: [\n  //   //     { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n  //   //     { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n  //   //     { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n  //   //     { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n  //   //     { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n  //   //   ],\n  //   //   edges: [\n  //   //     { from: 1, to: 2 },\n  //   //     { from: 1, to: 3 },\n  //   //     { from: 2, to: 4 },\n  //   //     { from: 2, to: 5 }\n  //   //   ]\n  //   // };\n    \n  //   var nodes = graph.nodes.slice();\n\n  //   // for (let i = 0; i < nodes.length; i++) {\n  //   //   if(nodes[i].title)\n  //   //     nodes[i].div = this.htmlTitle(nodes[i].title);\n  //   // }\n  \n  //   // const options = JSON.parse(this.props.args[\"config\"]);\n  //   const options = {\n  //     layout: {\n  //       hierarchical: false\n  //     },\n  //     edges: {\n  //       color: \"#000000\"\n  //     },\n  //     height: \"500px\"\n  //   };\n  \n\n  //   // const events = {\n\n  //   //   selectNode: (event:any) => {\n  //   //     console.log(event.nodes[0])\n  //   //     Streamlit.setComponentValue(event.nodes[0]);\n  //   //   },\n\n  //   //   doubleClick: (event:any) => {\n  //   //     console.log(event.nodes);\n  //   //     // let link = nodes;\n  //   //     let lookup_node = lookup_node_id(event.nodes[0], nodes);\n  //   //     Streamlit.setComponentValue(lookup_node)\n  //   //     // let link = lookup_node.div.innerHTML;\n  //   //     // if(link){\n  //   //     //   window.open(link);\n  //   //     // }\n  //   //   }\n  //   // };\n  //   return (\n  //     <span>\n    \n  //     <Graph\n  //     graph={graph}\n  //     options={options}\n  //     events={this.onSelect}\n  //     key={uuidv4()}\n  //     getNetwork={(network: any) => {\n  //       //  if you want access to vis.js network api you can set the state in a parent component using this property\n  //       //console.log(network);\n  //     }}/>\n  //     </span>\n  //   )\n  // }\n\n  // private onSelect = (event: any): void => Streamlit.setComponentValue(event.nodes[0])\n\n  // private htmlTitle = (html: string):any => {   \n  //   const container = document.createElement(\"div\");\n  //   container.innerHTML = html;\n  //   return container;\n  // }\n\n  public render = (): any => {\nconst options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\n    const [state, setState] = useState({\n      counter: 5,\n      graph: {\n        nodes: [\n          { id: 1, label: \"Node 1\", color: \"#e04141\" },\n          { id: 2, label: \"Node 2\", color: \"#e09c41\" },\n          { id: 3, label: \"Node 3\", color: \"#e0df41\" },\n          { id: 4, label: \"Node 4\", color: \"#7be041\" },\n          { id: 5, label: \"Node 5\", color: \"#41e0c9\" }\n        ],\n        edges: [\n          { from: 1, to: 2 },\n          { from: 1, to: 3 },\n          { from: 2, to: 4 },\n          { from: 2, to: 5 }\n        ]\n      },\n      events: {\n        select: ({ nodes, edges }) => {\n          console.log(\"Selected nodes:\");\n          console.log(nodes);\n          console.log(\"Selected edges:\");\n          console.log(edges);\n          alert(\"Selected node: \" + nodes);\n        },\n        // doubleClick: ({ pointer: { canvas } }) => {\n        //   createNode(canvas.x, canvas.y);\n        // }\n      }\n    })\n    const { graph, events } = state;\n    return (\n      <div>\n        <h1>React graph vis</h1>\n        <p>\n          <a href=\"https://github.com/crubier/react-graph-vis\">Github</a> -{\" \"}\n          <a href=\"https://www.npmjs.com/package/react-graph-vis\">NPM</a>\n        </p>\n        <p><a href=\"https://github.com/crubier/react-graph-vis/tree/master/example/src/index.js\">Source of this page</a></p>\n        <p>A React component to display beautiful network graphs using vis.js</p>\n        <p>Make sure to visit <a href=\"http://visjs.org\">visjs.org</a> for more info.</p>\n        <p>This package allows to render network graphs using vis.js.</p>\n        <p>Rendered graphs are scrollable, zoomable, retina ready, dynamic</p>\n        <p>In this example, we manage state with react: on double click we create a new node, and on select we display an alert.</p>\n        <Graph graph={graph} options={options} events={events} style={{ height: \"640px\" }} />\n      </div>\n    );\n  }\n}\n\nexport default withStreamlitConnection(StreamlitVisGraph)"],"mappings":"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"},"metadata":{},"sourceType":"module"}