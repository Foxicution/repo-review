{"ast":null,"code":"var baseDifference = require('./_baseDifference'),\n  baseFlatten = require('./_baseFlatten'),\n  baseRest = require('./_baseRest'),\n  isArrayLikeObject = require('./isArrayLikeObject'),\n  last = require('./last');\n\n/**\n * This method is like `_.difference` except that it accepts `comparator`\n * which is invoked to compare elements of `array` to `values`. The order and\n * references of result values are determined by the first array. The comparator\n * is invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n *\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }]\n */\nvar differenceWith = baseRest(function (array, values) {\n  var comparator = last(values);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];\n});\nmodule.exports = differenceWith;","map":{"version":3,"names":["baseDifference","require","baseFlatten","baseRest","isArrayLikeObject","last","differenceWith","array","values","comparator","undefined","module","exports"],"sources":["/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/lodash/differenceWith.js"],"sourcesContent":["var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.difference` except that it accepts `comparator`\n * which is invoked to compare elements of `array` to `values`. The order and\n * references of result values are determined by the first array. The comparator\n * is invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n *\n * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n * // => [{ 'x': 2, 'y': 1 }]\n */\nvar differenceWith = baseRest(function(array, values) {\n  var comparator = last(values);\n  if (isArrayLikeObject(comparator)) {\n    comparator = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n    : [];\n});\n\nmodule.exports = differenceWith;\n"],"mappings":"AAAA,IAAIA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;EAC7CC,WAAW,GAAGD,OAAO,CAAC,gBAAgB,CAAC;EACvCE,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;EACjCG,iBAAiB,GAAGH,OAAO,CAAC,qBAAqB,CAAC;EAClDI,IAAI,GAAGJ,OAAO,CAAC,QAAQ,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,cAAc,GAAGH,QAAQ,CAAC,UAASI,KAAK,EAAEC,MAAM,EAAE;EACpD,IAAIC,UAAU,GAAGJ,IAAI,CAACG,MAAM,CAAC;EAC7B,IAAIJ,iBAAiB,CAACK,UAAU,CAAC,EAAE;IACjCA,UAAU,GAAGC,SAAS;EACxB;EACA,OAAON,iBAAiB,CAACG,KAAK,CAAC,GAC3BP,cAAc,CAACO,KAAK,EAAEL,WAAW,CAACM,MAAM,EAAE,CAAC,EAAEJ,iBAAiB,EAAE,IAAI,CAAC,EAAEM,SAAS,EAAED,UAAU,CAAC,GAC7F,EAAE;AACR,CAAC,CAAC;AAEFE,MAAM,CAACC,OAAO,GAAGN,cAAc"},"metadata":{},"sourceType":"script"}