{"ast":null,"code":"import _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _construct from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/construct\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toArrayBufferView } from './buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n/** @ignore */\nexport var isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n/** @ignore */\nfunction BigNum(x) {\n  for (var _len = arguments.length, xs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    xs[_key - 1] = arguments[_key];\n  }\n  if (xs.length === 0) {\n    return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n  }\n  return Object.setPrototypeOf(_construct(this['TypedArray'], [x].concat(xs)), this.constructor.prototype);\n}\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function () {\n  return \"\\\"\".concat(bignumToString(this), \"\\\"\");\n};\nBigNum.prototype.valueOf = function () {\n  return bignumToNumber(this);\n};\nBigNum.prototype.toString = function () {\n  return bignumToString(this);\n};\nBigNum.prototype[Symbol.toPrimitive] = function () {\n  var hint = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n  switch (hint) {\n    case 'number':\n      return bignumToNumber(this);\n    case 'string':\n      return bignumToString(this);\n    case 'default':\n      return bignumToBigInt(this);\n  }\n  return bignumToString(this);\n};\n/** @ignore */\nfunction SignedBigNum() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return BigNum.apply(this, args);\n}\n/** @ignore */\nfunction UnsignedBigNum() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return BigNum.apply(this, args);\n}\n/** @ignore */\nfunction DecimalBigNum() {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n  return BigNum.apply(this, args);\n}\nObject.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype, BigNum.prototype, {\n  'constructor': SignedBigNum,\n  'signed': true,\n  'TypedArray': Int32Array,\n  'BigIntArray': BigInt64Array\n});\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, {\n  'constructor': UnsignedBigNum,\n  'signed': false,\n  'TypedArray': Uint32Array,\n  'BigIntArray': BigUint64Array\n});\nObject.assign(DecimalBigNum.prototype, BigNum.prototype, {\n  'constructor': DecimalBigNum,\n  'signed': true,\n  'TypedArray': Uint32Array,\n  'BigIntArray': BigUint64Array\n});\n/** @ignore */\nfunction bignumToNumber(bn) {\n  var buffer = bn.buffer,\n    byteOffset = bn.byteOffset,\n    length = bn.length,\n    signed = bn['signed'];\n  var words = new Int32Array(buffer, byteOffset, length);\n  var number = 0,\n    i = 0,\n    n = words.length,\n    hi,\n    lo;\n  while (i < n) {\n    lo = words[i++];\n    hi = words[i++];\n    signed || (hi = hi >>> 0);\n    number += (lo >>> 0) + hi * Math.pow(i, 32);\n  }\n  return number;\n}\n/** @ignore */\nexport var bignumToString;\n/** @ignore */\nexport var bignumToBigInt;\nif (!BigIntAvailable) {\n  bignumToString = decimalToString;\n  bignumToBigInt = bignumToString;\n} else {\n  bignumToBigInt = function bignumToBigInt(a) {\n    return a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : decimalToString(a);\n  };\n  bignumToString = function bignumToString(a) {\n    return a.byteLength === 8 ? \"\".concat(new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]) : decimalToString(a);\n  };\n}\n/** @ignore */\nfunction decimalToString(a) {\n  var digits = '';\n  var base64 = new Uint32Array(2);\n  var base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n  var checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n  var i = -1,\n    n = base32.length - 1;\n  do {\n    for (base64[0] = base32[i = 0]; i < n;) {\n      base32[i++] = base64[1] = base64[0] / 10;\n      base64[0] = (base64[0] - base64[1] * 10 << 16) + base32[i];\n    }\n    base32[i] = base64[1] = base64[0] / 10;\n    base64[0] = base64[0] - base64[1] * 10;\n    digits = \"\".concat(base64[0]).concat(digits);\n  } while (checks[0] || checks[1] || checks[2] || checks[3]);\n  return digits ? digits : \"0\";\n}\n/** @ignore */\nexport var BN = /*#__PURE__*/function () {\n  function BN(num, isSigned) {\n    _classCallCheck(this, BN);\n    return BN.new(num, isSigned);\n  }\n  /** @nocollapse */\n  _createClass(BN, null, [{\n    key: \"new\",\n    value: function _new(num, isSigned) {\n      switch (isSigned) {\n        case true:\n          return new SignedBigNum(num);\n        case false:\n          return new UnsignedBigNum(num);\n      }\n      switch (num.constructor) {\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n        case BigInt64Array:\n          return new SignedBigNum(num);\n      }\n      if (num.byteLength === 16) {\n        return new DecimalBigNum(num);\n      }\n      return new UnsignedBigNum(num);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"signed\",\n    value: function signed(num) {\n      return new SignedBigNum(num);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"unsigned\",\n    value: function unsigned(num) {\n      return new UnsignedBigNum(num);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"decimal\",\n    value: function decimal(num) {\n      return new DecimalBigNum(num);\n    }\n  }]);\n  return BN;\n}();","map":{"version":3,"mappings":"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","names":["toArrayBufferView","BigIntAvailable","BigInt64Array","BigUint64Array","isArrowBigNumSymbol","Symbol","for","BigNum","x","xs","length","Object","setPrototypeOf","constructor","prototype","toJSON","bignumToString","valueOf","bignumToNumber","toString","toPrimitive","hint","bignumToBigInt","SignedBigNum","args","apply","UnsignedBigNum","DecimalBigNum","create","Int32Array","Uint32Array","assign","bn","buffer","byteOffset","signed","words","number","i","n","hi","lo","decimalToString","a","byteLength","digits","base64","base32","Uint16Array","checks","reverse","BN","num","isSigned","new","Int8Array","Int16Array"],"sources":["util/bn.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n"]},"metadata":{},"sourceType":"module"}