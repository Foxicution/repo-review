{"ast":null,"code":"import _slicedToArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32 } from '../../type';\n/**\n * @ignore\n * @private\n **/\nexport var Message = /*#__PURE__*/function () {\n  function Message(bodyLength, version, headerType, header) {\n    _classCallCheck(this, Message);\n    this._version = version;\n    this._headerType = headerType;\n    this.body = new Uint8Array(0);\n    header && (this._createHeader = function () {\n      return header;\n    });\n    this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n  /** @nocollapse */\n  _createClass(Message, [{\n    key: \"type\",\n    get: function get() {\n      return this.headerType;\n    }\n  }, {\n    key: \"version\",\n    get: function get() {\n      return this._version;\n    }\n  }, {\n    key: \"headerType\",\n    get: function get() {\n      return this._headerType;\n    }\n  }, {\n    key: \"bodyLength\",\n    get: function get() {\n      return this._bodyLength;\n    }\n  }, {\n    key: \"header\",\n    value: function header() {\n      return this._createHeader();\n    }\n  }, {\n    key: \"isSchema\",\n    value: function isSchema() {\n      return this.headerType === MessageHeader.Schema;\n    }\n  }, {\n    key: \"isRecordBatch\",\n    value: function isRecordBatch() {\n      return this.headerType === MessageHeader.RecordBatch;\n    }\n  }, {\n    key: \"isDictionaryBatch\",\n    value: function isDictionaryBatch() {\n      return this.headerType === MessageHeader.DictionaryBatch;\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(msg, headerType) {\n      var message = new Message(0, MetadataVersion.V4, headerType);\n      message._createHeader = messageHeaderFromJSON(msg, headerType);\n      return message;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"decode\",\n    value: function decode(buf) {\n      buf = new ByteBuffer(toUint8Array(buf));\n      var _message = _Message.getRootAsMessage(buf);\n      var bodyLength = _message.bodyLength();\n      var version = _message.version();\n      var headerType = _message.headerType();\n      var message = new Message(bodyLength, version, headerType);\n      message._createHeader = decodeMessageHeader(_message, headerType);\n      return message;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"encode\",\n    value: function encode(message) {\n      var b = new Builder(),\n        headerOffset = -1;\n      if (message.isSchema()) {\n        headerOffset = Schema.encode(b, message.header());\n      } else if (message.isRecordBatch()) {\n        headerOffset = RecordBatch.encode(b, message.header());\n      } else if (message.isDictionaryBatch()) {\n        headerOffset = DictionaryBatch.encode(b, message.header());\n      }\n      _Message.startMessage(b);\n      _Message.addVersion(b, MetadataVersion.V4);\n      _Message.addHeader(b, headerOffset);\n      _Message.addHeaderType(b, message.headerType);\n      _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n      _Message.finishMessageBuffer(b, _Message.endMessage(b));\n      return b.asUint8Array();\n    }\n    /** @nocollapse */\n  }, {\n    key: \"from\",\n    value: function from(header) {\n      var bodyLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (header instanceof Schema) {\n        return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n      }\n      if (header instanceof RecordBatch) {\n        return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n      }\n      if (header instanceof DictionaryBatch) {\n        return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n      }\n      throw new Error(\"Unrecognized Message header: \".concat(header));\n    }\n  }]);\n  return Message;\n}();\n/**\n * @ignore\n * @private\n **/\nexport var RecordBatch = /*#__PURE__*/function () {\n  function RecordBatch(length, nodes, buffers) {\n    _classCallCheck(this, RecordBatch);\n    this._nodes = nodes;\n    this._buffers = buffers;\n    this._length = typeof length === 'number' ? length : length.low;\n  }\n  _createClass(RecordBatch, [{\n    key: \"nodes\",\n    get: function get() {\n      return this._nodes;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: \"buffers\",\n    get: function get() {\n      return this._buffers;\n    }\n  }]);\n  return RecordBatch;\n}();\n/**\n * @ignore\n * @private\n **/\nexport var DictionaryBatch = /*#__PURE__*/function () {\n  function DictionaryBatch(data, id) {\n    var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    _classCallCheck(this, DictionaryBatch);\n    this._data = data;\n    this._isDelta = isDelta;\n    this._id = typeof id === 'number' ? id : id.low;\n  }\n  _createClass(DictionaryBatch, [{\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    }\n  }, {\n    key: \"isDelta\",\n    get: function get() {\n      return this._isDelta;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.data.length;\n    }\n  }, {\n    key: \"nodes\",\n    get: function get() {\n      return this.data.nodes;\n    }\n  }, {\n    key: \"buffers\",\n    get: function get() {\n      return this.data.buffers;\n    }\n  }]);\n  return DictionaryBatch;\n}();\n/**\n * @ignore\n * @private\n **/\nexport var BufferRegion = /*#__PURE__*/_createClass(function BufferRegion(offset, length) {\n  _classCallCheck(this, BufferRegion);\n  this.offset = typeof offset === 'number' ? offset : offset.low;\n  this.length = typeof length === 'number' ? length : length.low;\n});\n/**\n * @ignore\n * @private\n **/\nexport var FieldNode = /*#__PURE__*/_createClass(function FieldNode(length, nullCount) {\n  _classCallCheck(this, FieldNode);\n  this.length = typeof length === 'number' ? length : length.low;\n  this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n});\n/** @ignore */\nfunction messageHeaderFromJSON(message, type) {\n  return function () {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.fromJSON(message);\n      case MessageHeader.RecordBatch:\n        return RecordBatch.fromJSON(message);\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.fromJSON(message);\n    }\n    throw new Error(\"Unrecognized Message type: { name: \".concat(MessageHeader[type], \", type: \").concat(type, \" }\"));\n  };\n}\n/** @ignore */\nfunction decodeMessageHeader(message, type) {\n  return function () {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.decode(message.header(new _Schema()));\n      case MessageHeader.RecordBatch:\n        return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n    }\n    throw new Error(\"Unrecognized Message type: { name: \".concat(MessageHeader[type], \", type: \").concat(type, \" }\"));\n  };\n}\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\nfunction decodeSchema(_schema) {\n  var dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  var fields = decodeSchemaFields(_schema, dictionaries);\n  return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\nfunction decodeRecordBatch(batch) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\nfunction decodeDictionaryBatch(batch) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\nfunction decodeBufferRegion(b) {\n  return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\nfunction decodeFieldNode(f) {\n  return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\nfunction decodeFieldNodes(batch) {\n  var nodes = [];\n  for (var f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n    if (f = batch.nodes(i)) {\n      nodes[++j] = FieldNode.decode(f);\n    }\n  }\n  return nodes;\n}\n/** @ignore */\nfunction decodeBuffers(batch, version) {\n  var bufferRegions = [];\n  for (var b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n    if (b = batch.buffers(i)) {\n      // If this Arrow buffer was written before version 4,\n      // advance the buffer's bb_pos 8 bytes to skip past\n      // the now-removed page_id field\n      if (version < MetadataVersion.V4) {\n        b.bb_pos += 8 * (i + 1);\n      }\n      bufferRegions[++j] = BufferRegion.decode(b);\n    }\n  }\n  return bufferRegions;\n}\n/** @ignore */\nfunction decodeSchemaFields(schema, dictionaries) {\n  var fields = [];\n  for (var f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n    if (f = schema.fields(i)) {\n      fields[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return fields;\n}\n/** @ignore */\nfunction decodeFieldChildren(field, dictionaries) {\n  var children = [];\n  for (var f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n    if (f = field.children(i)) {\n      children[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return children;\n}\n/** @ignore */\nfunction decodeField(f, dictionaries) {\n  var id;\n  var field;\n  var type;\n  var keys;\n  var dictType;\n  var dictMeta;\n  // If no dictionary encoding\n  if (!dictionaries || !(dictMeta = f.dictionary())) {\n    type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n    field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n  }\n  // tslint:disable\n  // If dictionary encoded and the first time we've seen this dictionary id, decode\n  // the data type and child fields, then wrap in a Dictionary type and insert the\n  // data type into the dictionary types map.\n  else if (!dictionaries.has(id = dictMeta.id().low)) {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n    dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n  // data type and wrap in a new Dictionary type and field.\n  else {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  return field || null;\n}\n/** @ignore */\nfunction decodeCustomMetadata(parent) {\n  var data = new Map();\n  if (parent) {\n    for (var entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n      if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n        data.set(key, entry.value());\n      }\n    }\n  }\n  return data;\n}\n/** @ignore */\nfunction decodeIndexType(_type) {\n  return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\nfunction decodeFieldType(f, children) {\n  var typeId = f.typeType();\n  switch (typeId) {\n    case Type.NONE:\n      return new Null();\n    case Type.Null:\n      return new Null();\n    case Type.Binary:\n      return new Binary();\n    case Type.Utf8:\n      return new Utf8();\n    case Type.Bool:\n      return new Bool();\n    case Type.List:\n      return new List((children || [])[0]);\n    case Type.Struct_:\n      return new Struct(children || []);\n  }\n  switch (typeId) {\n    case Type.Int:\n      {\n        var t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());\n        return new Int(t.isSigned(), t.bitWidth());\n      }\n    case Type.FloatingPoint:\n      {\n        var _t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());\n        return new Float(_t.precision());\n      }\n    case Type.Decimal:\n      {\n        var _t2 = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());\n        return new Decimal(_t2.scale(), _t2.precision());\n      }\n    case Type.Date:\n      {\n        var _t3 = f.type(new Schema_.org.apache.arrow.flatbuf.Date());\n        return new Date_(_t3.unit());\n      }\n    case Type.Time:\n      {\n        var _t4 = f.type(new Schema_.org.apache.arrow.flatbuf.Time());\n        return new Time(_t4.unit(), _t4.bitWidth());\n      }\n    case Type.Timestamp:\n      {\n        var _t5 = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());\n        return new Timestamp(_t5.unit(), _t5.timezone());\n      }\n    case Type.Interval:\n      {\n        var _t6 = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());\n        return new Interval(_t6.unit());\n      }\n    case Type.Union:\n      {\n        var _t7 = f.type(new Schema_.org.apache.arrow.flatbuf.Union());\n        return new Union(_t7.mode(), _t7.typeIdsArray() || [], children || []);\n      }\n    case Type.FixedSizeBinary:\n      {\n        var _t8 = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());\n        return new FixedSizeBinary(_t8.byteWidth());\n      }\n    case Type.FixedSizeList:\n      {\n        var _t9 = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());\n        return new FixedSizeList(_t9.listSize(), (children || [])[0]);\n      }\n    case Type.Map:\n      {\n        var _t10 = f.type(new Schema_.org.apache.arrow.flatbuf.Map());\n        return new Map_((children || [])[0], _t10.keysSorted());\n      }\n  }\n  throw new Error(\"Unrecognized type: \\\"\".concat(Type[typeId], \"\\\" (\").concat(typeId, \")\"));\n}\n/** @ignore */\nfunction encodeSchema(b, schema) {\n  var fieldOffsets = schema.fields.map(function (f) {\n    return Field.encode(b, f);\n  });\n  _Schema.startFieldsVector(b, fieldOffsets.length);\n  var fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n  var metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : _Schema.createCustomMetadataVector(b, _toConsumableArray(schema.metadata).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      k = _ref2[0],\n      v = _ref2[1];\n    var key = b.createString(\"\".concat(k));\n    var val = b.createString(\"\".concat(v));\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  _Schema.startSchema(b);\n  _Schema.addFields(b, fieldsVectorOffset);\n  _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n  if (metadataOffset !== -1) {\n    _Schema.addCustomMetadata(b, metadataOffset);\n  }\n  return _Schema.endSchema(b);\n}\n/** @ignore */\nfunction encodeField(b, field) {\n  var nameOffset = -1;\n  var typeOffset = -1;\n  var dictionaryOffset = -1;\n  var type = field.type;\n  var typeId = field.typeId;\n  if (!DataType.isDictionary(type)) {\n    typeOffset = typeAssembler.visit(type, b);\n  } else {\n    typeId = type.dictionary.typeId;\n    dictionaryOffset = typeAssembler.visit(type, b);\n    typeOffset = typeAssembler.visit(type.dictionary, b);\n  }\n  var childOffsets = (type.children || []).map(function (f) {\n    return Field.encode(b, f);\n  });\n  var childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n  var metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : _Field.createCustomMetadataVector(b, _toConsumableArray(field.metadata).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      k = _ref4[0],\n      v = _ref4[1];\n    var key = b.createString(\"\".concat(k));\n    var val = b.createString(\"\".concat(v));\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  if (field.name) {\n    nameOffset = b.createString(field.name);\n  }\n  _Field.startField(b);\n  _Field.addType(b, typeOffset);\n  _Field.addTypeType(b, typeId);\n  _Field.addChildren(b, childrenVectorOffset);\n  _Field.addNullable(b, !!field.nullable);\n  if (nameOffset !== -1) {\n    _Field.addName(b, nameOffset);\n  }\n  if (dictionaryOffset !== -1) {\n    _Field.addDictionary(b, dictionaryOffset);\n  }\n  if (metadataOffset !== -1) {\n    _Field.addCustomMetadata(b, metadataOffset);\n  }\n  return _Field.endField(b);\n}\n/** @ignore */\nfunction encodeRecordBatch(b, recordBatch) {\n  var nodes = recordBatch.nodes || [];\n  var buffers = recordBatch.buffers || [];\n  _RecordBatch.startNodesVector(b, nodes.length);\n  nodes.slice().reverse().forEach(function (n) {\n    return FieldNode.encode(b, n);\n  });\n  var nodesVectorOffset = b.endVector();\n  _RecordBatch.startBuffersVector(b, buffers.length);\n  buffers.slice().reverse().forEach(function (b_) {\n    return BufferRegion.encode(b, b_);\n  });\n  var buffersVectorOffset = b.endVector();\n  _RecordBatch.startRecordBatch(b);\n  _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n  _RecordBatch.addNodes(b, nodesVectorOffset);\n  _RecordBatch.addBuffers(b, buffersVectorOffset);\n  return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n  var dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n  _DictionaryBatch.startDictionaryBatch(b);\n  _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n  _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n  _DictionaryBatch.addData(b, dataOffset);\n  return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\nfunction encodeFieldNode(b, node) {\n  return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\nfunction encodeBufferRegion(b, node) {\n  return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\nvar platformIsLittleEndian = function () {\n  var buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 256;\n}();","map":{"version":3,"mappings":"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","names":["flatbuffers","Schema_","Message_","Schema","Field","toUint8Array","MessageHeader","MetadataVersion","instance","typeAssembler","fieldFromJSON","schemaFromJSON","recordBatchFromJSON","dictionaryBatchFromJSON","Long","Builder","ByteBuffer","Type","org","apache","arrow","flatbuf","_Field","_Schema","_Buffer","Buffer","_Message","Message","_KeyValue","KeyValue","_FieldNode","FieldNode","_Endianness","Endianness","_RecordBatch","RecordBatch","_DictionaryBatch","DictionaryBatch","DataType","Dictionary","Utf8","Binary","Decimal","FixedSizeBinary","List","FixedSizeList","Map_","Struct","Union","Bool","Null","Int","Float","Date_","Time","Interval","Timestamp","Int32","bodyLength","version","headerType","header","_version","_headerType","body","Uint8Array","_createHeader","_bodyLength","low","msg","message","V4","messageHeaderFromJSON","buf","_message","getRootAsMessage","decodeMessageHeader","b","headerOffset","isSchema","encode","isRecordBatch","isDictionaryBatch","startMessage","addVersion","addHeader","addHeaderType","addBodyLength","finishMessageBuffer","endMessage","asUint8Array","Error","length","nodes","buffers","_nodes","_buffers","_length","data","id","isDelta","_data","_isDelta","_id","BufferRegion","offset","nullCount","type","fromJSON","decode","encodeField","decodeField","encodeSchema","decodeSchema","encodeRecordBatch","decodeRecordBatch","encodeDictionaryBatch","decodeDictionaryBatch","encodeFieldNode","decodeFieldNode","encodeBufferRegion","decodeBufferRegion","_schema","dictionaries","Map","fields","decodeSchemaFields","decodeCustomMetadata","batch","decodeFieldNodes","decodeBuffers","f","i","j","n","nodesLength","bufferRegions","buffersLength","bb_pos","schema","fieldsLength","decodeFieldChildren","field","children","childrenLength","keys","dictType","dictMeta","dictionary","decodeFieldType","name","nullable","has","indexType","decodeIndexType","set","isOrdered","get","parent","entry","key","customMetadataLength","customMetadata","value","_type","isSigned","bitWidth","typeId","typeType","NONE","Struct_","t","FloatingPoint","precision","scale","Date","unit","timezone","mode","typeIdsArray","byteWidth","listSize","keysSorted","fieldOffsets","map","startFieldsVector","fieldsVectorOffset","createFieldsVector","metadataOffset","metadata","size","createCustomMetadataVector","k","v","createString","val","startKeyValue","addKey","addValue","endKeyValue","startSchema","addFields","addEndianness","platformIsLittleEndian","Little","Big","addCustomMetadata","endSchema","nameOffset","typeOffset","dictionaryOffset","isDictionary","visit","childOffsets","childrenVectorOffset","createChildrenVector","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","endField","recordBatch","startNodesVector","slice","reverse","forEach","nodesVectorOffset","endVector","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","dictionaryBatch","dataOffset","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","node","createFieldNode","createBuffer","buffer","ArrayBuffer","DataView","setInt16","Int16Array"],"sources":["ipc/metadata/message.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n"]},"metadata":{},"sourceType":"module"}