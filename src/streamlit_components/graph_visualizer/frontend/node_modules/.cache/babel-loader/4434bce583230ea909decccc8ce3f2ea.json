{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n  visit(node) {\n    return node == null ? undefined : super.visit(node);\n  }\n  visitNull(_ref) {\n    let {\n      typeId\n    } = _ref;\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitInt(_ref2) {\n    let {\n      typeId,\n      bitWidth,\n      isSigned\n    } = _ref2;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'bitWidth': bitWidth,\n      'isSigned': isSigned\n    };\n  }\n  visitFloat(_ref3) {\n    let {\n      typeId,\n      precision\n    } = _ref3;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'precision': Precision[precision]\n    };\n  }\n  visitBinary(_ref4) {\n    let {\n      typeId\n    } = _ref4;\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitBool(_ref5) {\n    let {\n      typeId\n    } = _ref5;\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitUtf8(_ref6) {\n    let {\n      typeId\n    } = _ref6;\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitDecimal(_ref7) {\n    let {\n      typeId,\n      scale,\n      precision\n    } = _ref7;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'scale': scale,\n      'precision': precision\n    };\n  }\n  visitDate(_ref8) {\n    let {\n      typeId,\n      unit\n    } = _ref8;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': DateUnit[unit]\n    };\n  }\n  visitTime(_ref9) {\n    let {\n      typeId,\n      unit,\n      bitWidth\n    } = _ref9;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': TimeUnit[unit],\n      bitWidth\n    };\n  }\n  visitTimestamp(_ref10) {\n    let {\n      typeId,\n      timezone,\n      unit\n    } = _ref10;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': TimeUnit[unit],\n      timezone\n    };\n  }\n  visitInterval(_ref11) {\n    let {\n      typeId,\n      unit\n    } = _ref11;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'unit': IntervalUnit[unit]\n    };\n  }\n  visitList(_ref12) {\n    let {\n      typeId\n    } = _ref12;\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitStruct(_ref13) {\n    let {\n      typeId\n    } = _ref13;\n    return {\n      'name': ArrowType[typeId].toLowerCase()\n    };\n  }\n  visitUnion(_ref14) {\n    let {\n      typeId,\n      mode,\n      typeIds\n    } = _ref14;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'mode': UnionMode[mode],\n      'typeIds': [...typeIds]\n    };\n  }\n  visitDictionary(node) {\n    return this.visit(node.dictionary);\n  }\n  visitFixedSizeBinary(_ref15) {\n    let {\n      typeId,\n      byteWidth\n    } = _ref15;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'byteWidth': byteWidth\n    };\n  }\n  visitFixedSizeList(_ref16) {\n    let {\n      typeId,\n      listSize\n    } = _ref16;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'listSize': listSize\n    };\n  }\n  visitMap(_ref17) {\n    let {\n      typeId,\n      keysSorted\n    } = _ref17;\n    return {\n      'name': ArrowType[typeId].toLowerCase(),\n      'keysSorted': keysSorted\n    };\n  }\n}","map":{"version":3,"mappings":"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","names":["Visitor","ArrowType","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","JSONTypeAssembler","visit","node","undefined","visitNull","typeId","toLowerCase","visitInt","bitWidth","isSigned","visitFloat","precision","visitBinary","visitBool","visitUtf8","visitDecimal","scale","visitDate","unit","visitTime","visitTimestamp","timezone","visitInterval","visitList","visitStruct","visitUnion","mode","typeIds","visitDictionary","dictionary","visitFixedSizeBinary","byteWidth","visitFixedSizeList","listSize","visitMap","keysSorted"],"sources":["visitor/jsontypeassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\n\n/** @ignore */\nexport interface JSONTypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T): object | undefined;\n}\n\n/** @ignore */\nexport class JSONTypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T): object | undefined {\n        return node == null ? undefined : super.visit(node);\n    }\n    public visitNull<T extends type.Null>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitInt<T extends type.Int>({ typeId, bitWidth, isSigned }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    public visitFloat<T extends type.Float>({ typeId, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    public visitBinary<T extends type.Binary>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitBool<T extends type.Bool>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUtf8<T extends type.Utf8>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitDecimal<T extends type.Decimal>({ typeId, scale, precision }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    public visitDate<T extends type.Date_>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    public visitTime<T extends type.Time>({ typeId, unit, bitWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    public visitTimestamp<T extends type.Timestamp>({ typeId, timezone, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    public visitInterval<T extends type.Interval>({ typeId, unit }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    public visitList<T extends type.List>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitStruct<T extends type.Struct>({ typeId }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    public visitUnion<T extends type.Union>({ typeId, mode, typeIds }: T) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T) {\n        return this.visit(node.dictionary);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>({ typeId, byteWidth }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>({ typeId, listSize }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    public visitMap<T extends type.Map_>({ typeId, keysSorted }: T) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}