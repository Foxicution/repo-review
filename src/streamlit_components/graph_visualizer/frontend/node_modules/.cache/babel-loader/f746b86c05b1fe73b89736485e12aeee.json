{"ast":null,"code":"var _jsxFileName = \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { Graph } from \"react-graph-vis\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n      const graph = {\n        nodes: [{\n          id: 1,\n          label: \"Node 1\",\n          title: \"node 1 tootip text\"\n        }, {\n          id: 2,\n          label: \"Node 2\",\n          title: \"node 2 tootip text\"\n        }, {\n          id: 3,\n          label: \"Node 3\",\n          title: \"node 3 tootip text\"\n        }, {\n          id: 4,\n          label: \"Node 4\",\n          title: \"node 4 tootip text\"\n        }, {\n          id: 5,\n          label: \"Node 5\",\n          title: \"node 5 tootip text\"\n        }],\n        edges: [{\n          from: 1,\n          to: 2\n        }, {\n          from: 1,\n          to: 3\n        }, {\n          from: 2,\n          to: 4\n        }, {\n          from: 2,\n          to: 5\n        }]\n      };\n      const options = {\n        layout: {\n          hierarchical: false\n        },\n        edges: {\n          color: \"#000000\"\n        },\n        height: \"500px\"\n      };\n      const events = {\n        select: function (event) {\n          var {\n            nodes,\n            edges\n          } = event;\n        }\n      };\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/React.createElement(Graph, {\n        graph: graph,\n        options: options,\n        events: events\n        //getNetwork={network => {\n        //  if you want access to vis.js network api you can set the state in a parent component using this property\n        //}}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 5\n        }\n      });\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","Graph","MyComponent","render","name","props","args","graph","nodes","id","label","title","edges","from","to","options","layout","hierarchical","color","height","events","select","event"],"sources":["/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport {Graph, NetworkEvents} from \"react-graph-vis\"\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n    const graph = {\n    nodes: [\n      { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n      { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n      { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n      { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n      { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n    ],\n    edges: [\n      { from: 1, to: 2 },\n      { from: 1, to: 3 },\n      { from: 2, to: 4 },\n      { from: 2, to: 5 }\n    ]\n  };\n\n  const options = {\n    layout: {\n      hierarchical: false\n    },\n    edges: {\n      color: \"#000000\"\n    },\n    height: \"500px\"\n  };\n\n    const events = {\n    select: function(event: { nodes: any; edges: any }) {\n      var { nodes, edges } = event;\n    }\n  };\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n    <Graph\n      graph={graph}\n      options={options}\n      events={events}\n      //getNetwork={network => {\n        //  if you want access to vis.js network api you can set the state in a parent component using this property\n      //}}\n    />\n    )\n  }\n}\n\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"],"mappings":";AAAA,SAEEA,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAAqB,OAAO;AACxC,SAAQC,KAAK,QAAsB,iBAAiB;;AAEpD;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASJ,sBAAsB,CAAC;EAAA;IAAA;IAAA,KAExCK,MAAM,GAAG,MAAiB;MAC/B;MACA;MACA,MAAMC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,MAAM,CAAC;MACpC,MAAMC,KAAK,GAAG;QACdC,KAAK,EAAE,CACL;UAAEC,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAqB,CAAC,EACvD;UAAEF,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAqB,CAAC,EACvD;UAAEF,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAqB,CAAC,EACvD;UAAEF,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAqB,CAAC,EACvD;UAAEF,EAAE,EAAE,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAqB,CAAC,CACxD;QACDC,KAAK,EAAE,CACL;UAAEC,IAAI,EAAE,CAAC;UAAEC,EAAE,EAAE;QAAE,CAAC,EAClB;UAAED,IAAI,EAAE,CAAC;UAAEC,EAAE,EAAE;QAAE,CAAC,EAClB;UAAED,IAAI,EAAE,CAAC;UAAEC,EAAE,EAAE;QAAE,CAAC,EAClB;UAAED,IAAI,EAAE,CAAC;UAAEC,EAAE,EAAE;QAAE,CAAC;MAEtB,CAAC;MAED,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAE;UACNC,YAAY,EAAE;QAChB,CAAC;QACDL,KAAK,EAAE;UACLM,KAAK,EAAE;QACT,CAAC;QACDC,MAAM,EAAE;MACV,CAAC;MAEC,MAAMC,MAAM,GAAG;QACfC,MAAM,EAAE,UAASC,KAAiC,EAAE;UAClD,IAAI;YAAEd,KAAK;YAAEI;UAAM,CAAC,GAAGU,KAAK;QAC9B;MACF,CAAC;;MAEC;MACA;MACA;MACA;MACA,oBACA,oBAAC,KAAK;QACJ,KAAK,EAAEf,KAAM;QACb,OAAO,EAAEQ,OAAQ;QACjB,MAAM,EAAEK;QACR;QACE;QACF;QAAA;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACA;IAEJ,CAAC;EAAA;AACH;;AAGA;AACA;AACA;AACA;AACA;AACA,eAAerB,uBAAuB,CAACG,WAAW,CAAC"},"metadata":{},"sourceType":"module"}