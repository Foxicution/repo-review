{"ast":null,"code":"var _jsxFileName = \"/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport Graph from 'react-graph-vis';\nclass StreamlitVisGraph extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.render = () => {\n      function lookup_node_id(lookup_node, mynodes) {\n        for (let node of mynodes) {\n          if (node.id === lookup_node) {\n            return node;\n          }\n        }\n      }\n\n      //var graph = JSON.parse(this.props.args[\"data\"]);\n      var graph = {\n        nodes: [{\n          id: 1,\n          label: \"Node 1\",\n          title: \"node 1 tootip text\"\n        }, {\n          id: 2,\n          label: \"Node 2\",\n          title: \"node 2 tootip text\"\n        }, {\n          id: 3,\n          label: \"Node 3\",\n          title: \"node 3 tootip text\"\n        }, {\n          id: 4,\n          label: \"Node 4\",\n          title: \"node 4 tootip text\"\n        }, {\n          id: 5,\n          label: \"Node 5\",\n          title: \"node 5 tootip text\"\n        }],\n        edges: [{\n          from: 1,\n          to: 2\n        }, {\n          from: 1,\n          to: 3\n        }, {\n          from: 2,\n          to: 4\n        }, {\n          from: 2,\n          to: 5\n        }]\n      };\n      var nodes = graph.nodes.slice();\n\n      // for (let i = 0; i < nodes.length; i++) {\n      //   if(nodes[i].title)\n      //     nodes[i].div = this.htmlTitle(nodes[i].title);\n      // }\n\n      const options = JSON.parse(this.props.args[\"config\"]);\n      const events = {\n        selectNode: event => {\n          Streamlit.setComponentValue(event.nodes[0]);\n        },\n        doubleClick: event => {\n          console.log(event.nodes);\n          // let link = nodes;\n          let lookup_node = lookup_node_id(event.nodes[0], nodes);\n          let link = lookup_node.div.innerHTML;\n          if (link) {\n            window.open(link);\n          }\n        }\n      };\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Graph, {\n        graph: graph,\n        options: options,\n        events: events,\n        getNetwork: network => {\n          //  if you want access to vis.js network api you can set the state in a parent component using this property\n          //console.log(network);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }));\n    };\n    this.htmlTitle = html => {\n      const container = document.createElement(\"div\");\n      container.innerHTML = html;\n      return container;\n    };\n  }\n}\nexport default withStreamlitConnection(StreamlitVisGraph);","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","Graph","StreamlitVisGraph","render","lookup_node_id","lookup_node","mynodes","node","id","graph","nodes","label","title","edges","from","to","slice","options","JSON","parse","props","args","events","selectNode","event","setComponentValue","doubleClick","console","log","link","div","innerHTML","window","open","network","htmlTitle","html","container","document","createElement"],"sources":["/home/fox/Projects/Python/repo-review/streamlit_components/graph_visualizer/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport Graph from 'react-graph-vis';\n\n\nclass StreamlitVisGraph extends StreamlitComponentBase {\n\n  public render = (): ReactNode => {\n\n    function lookup_node_id(lookup_node: any, mynodes: any){\n      for (let node of mynodes){\n          if (node.id === lookup_node){\n              return node;\n          }\n    }}\n\n    //var graph = JSON.parse(this.props.args[\"data\"]);\n    var graph = {\n      nodes: [\n        { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\n        { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\n        { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\n        { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\n        { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\n      ],\n      edges: [\n        { from: 1, to: 2 },\n        { from: 1, to: 3 },\n        { from: 2, to: 4 },\n        { from: 2, to: 5 }\n      ]\n    };\n    \n    var nodes = graph.nodes.slice();\n\n    // for (let i = 0; i < nodes.length; i++) {\n    //   if(nodes[i].title)\n    //     nodes[i].div = this.htmlTitle(nodes[i].title);\n    // }\n  \n    const options = JSON.parse(this.props.args[\"config\"]);\n\n    const events = {\n\n      selectNode: (event:any) => {\n        Streamlit.setComponentValue(event.nodes[0]);\n      },\n\n      doubleClick: (event:any) => {\n        console.log(event.nodes);\n        // let link = nodes;\n        let lookup_node = lookup_node_id(event.nodes[0], nodes);\n        let link = lookup_node.div.innerHTML;\n        if(link){\n          window.open(link);\n        }\n      }\n    };\n    return (\n      <span>\n    \n      <Graph\n      graph={graph}\n      options={options}\n      events={events}\n      getNetwork={(network: any) => {\n        //  if you want access to vis.js network api you can set the state in a parent component using this property\n        //console.log(network);\n      }}/>\n      </span>\n    )\n  }\n\n  private htmlTitle = (html: string):any => {   \n    const container = document.createElement(\"div\");\n    container.innerHTML = html;\n    return container;\n  }\n}\n\nexport default withStreamlitConnection(StreamlitVisGraph)"],"mappings":"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"},"metadata":{},"sourceType":"module"}